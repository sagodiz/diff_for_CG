digraph "call-graph" {
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"
    "<java.io.File: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "<java.lang.Object: void <clinit>()>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <clinit>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(60)<org.joda.time.DurationFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>"->"<java.lang.Object: void <clinit>()>";
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>"->"<java.lang.Object: void <clinit>()>";
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>"->"<java.lang.Object: void <clinit>()>";
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>"->"<java.lang.Object: void <clinit>()>";
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"
    "<java.util.Collections: void <clinit>()>"
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "<java.util.Collections: java.util.Set singleton(java.lang.Object)>"
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.util.Collections: java.util.Set singleton(java.lang.Object)>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(36)<org.joda.time.tz.UTCProvider: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(60)<org.joda.time.tz.UTCProvider: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "<java.util.ArrayList: void <clinit>()>"
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <clinit>()>";
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"
    "<java.lang.String: void <clinit>()>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(int)>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"
    "<java.lang.Integer: void <clinit>()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(239)<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(239)<org.joda.time.tz.ZoneInfoCompiler: char parseZoneChar(char)>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "<java.lang.Integer: int parseInt(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>"
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"<java.lang.Object: void <clinit>()>";
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "<java.lang.System: void <clinit>()>"
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.System: void <clinit>()>";
    "(127)<org.joda.time.tz.ZoneInfoCompiler: void printUsage()>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"
    "<java.util.TreeMap: void <clinit>()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <clinit>()>";
    "<java.lang.Short: java.lang.Short valueOf(short)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: java.lang.Short valueOf(short)>";
    "<java.lang.Short: void <clinit>()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: void <clinit>()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"
    "<java.util.Locale: void <clinit>()>"
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.util.Locale: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(142)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "<java.lang.Long: java.lang.Long valueOf(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: java.lang.Long valueOf(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.Long: void <clinit>()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <clinit>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"
    "<java.io.BufferedReader: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: void <clinit>()>";
    "<java.io.FileOutputStream: void <clinit>()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.System: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <clinit>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "<java.io.FileInputStream: void <clinit>()>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"
    "<java.lang.Character: void <clinit>()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: boolean isWhitespace(char)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Character: boolean isWhitespace(char)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.System: void <clinit>()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Locale: void <clinit>()>";
    "<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Locale: void <clinit>()>";
    "<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Boolean: void <clinit>()>"
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"
    "<java.util.TreeSet: void <clinit>()>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <clinit>()>";
    "<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.Collections: void <clinit>()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.Object: void <clinit>()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <clinit>()>";
    "<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <clinit>()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: void <clinit>()>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: void <clinit>()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <clinit>()>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <clinit>()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"
    "<java.lang.ClassLoader: void <clinit>()>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: void <clinit>()>";
    "<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>";
    "(50)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$0(org.joda.time.tz.ZoneInfoProvider)>"
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"(50)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$0(org.joda.time.tz.ZoneInfoProvider)>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"(50)<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader access$0(org.joda.time.tz.ZoneInfoProvider)>";
    "(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.System: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.Locale: void <clinit>()>";
    "<java.text.DateFormatSymbols: void <clinit>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"
    "<java.util.Arrays: void <clinit>()>"
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: int binarySearch(long[],long)>"
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: void <clinit>()>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.util.Arrays: int binarySearch(long[],long)>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: boolean equals(int[],int[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(int[],int[])>";
    "<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "<java.util.Arrays: boolean equals(long[],long[])>"
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(long[],long[])>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"
    "<java.util.HashSet: void <clinit>()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <clinit>()>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: void <clinit>()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.Object: void <clinit>()>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"
    "<java.util.TimeZone: void <clinit>()>"
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: void <clinit>()>";
    "<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>"
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: void <clinit>()>";
    "<java.util.SimpleTimeZone: void <clinit>()>"
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.SimpleTimeZone: void <clinit>()>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.Object: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Object: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Boolean: void <clinit>()>";
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Boolean: void <clinit>()>";
    "(25)<org.joda.time.tz.ZoneInfoLogger$1: java.lang.Boolean initialValue()>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: void <clinit>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <clinit>()>";
    "(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"
    "(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"<java.lang.Object: void <clinit>()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"<java.lang.Object: void <clinit>()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"<java.lang.Object: void <clinit>()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"<java.lang.Object: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"->"<java.lang.Object: void <clinit>()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.Arrays: void <clinit>()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: void <clinit>()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>"
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"
    "(707)<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: void <clinit>()>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>";
    "(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(272)<org.joda.time.field.UnsupportedDurationField: java.lang.Object readResolve()>"
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"
    "(272)<org.joda.time.field.UnsupportedDurationField: java.lang.Object readResolve()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(96)<org.joda.time.field.PreciseDateTimeField: long addWrapField(long,int)>"
    "(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>"
    "(96)<org.joda.time.field.PreciseDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"
    "(112)<org.joda.time.field.PreciseDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>"
    "(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(136)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsString()>"
    "(136)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsString()>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.String toString(int)>"
    "(136)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsString()>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(136)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsString()>"->"<java.lang.Object: void <clinit>()>";
    "(213)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getDifference(org.joda.time.ReadableInstant)>"
    "(213)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getDifference(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(213)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getDifference(org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(213)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getDifference(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(230)<org.joda.time.field.AbstractReadableInstantFieldProperty: long getDifferenceAsLong(org.joda.time.ReadableInstant)>"
    "(230)<org.joda.time.field.AbstractReadableInstantFieldProperty: long getDifferenceAsLong(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(230)<org.joda.time.field.AbstractReadableInstantFieldProperty: long getDifferenceAsLong(org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(230)<org.joda.time.field.AbstractReadableInstantFieldProperty: long getDifferenceAsLong(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"
    "(442)<org.joda.time.field.AbstractReadableInstantFieldProperty: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(106)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsString()>"
    "(106)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsString()>"->"<java.lang.Integer: void <clinit>()>";
    "(106)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsString()>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(106)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsString()>"->"<java.lang.Object: void <clinit>()>";
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"
    "(322)<org.joda.time.field.AbstractPartialFieldProperty: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>"
    "(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"
    "(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(49)<org.joda.time.field.MillisDurationField: org.joda.time.DurationFieldType getType()>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.field.MillisDurationField: int getValue(long)>"
    "(85)<org.joda.time.field.MillisDurationField: int getValue(long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(93)<org.joda.time.field.MillisDurationField: int getValue(long,long)>"
    "(93)<org.joda.time.field.MillisDurationField: int getValue(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(117)<org.joda.time.field.MillisDurationField: long add(long,int)>"
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"
    "(117)<org.joda.time.field.MillisDurationField: long add(long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(121)<org.joda.time.field.MillisDurationField: long add(long,long)>"
    "(121)<org.joda.time.field.MillisDurationField: long add(long,long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(125)<org.joda.time.field.MillisDurationField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"
    "(129)<org.joda.time.field.MillisDurationField: long getDifferenceAsLong(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(171)<org.joda.time.field.MillisDurationField: java.lang.Object readResolve()>"
    "(171)<org.joda.time.field.MillisDurationField: java.lang.Object readResolve()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(171)<org.joda.time.field.MillisDurationField: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"
    "(85)<org.joda.time.field.ZeroIsMaxDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(461)<org.joda.time.field.BaseDateTimeField: long addWrapField(long,int)>"
    "(461)<org.joda.time.field.BaseDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(495)<org.joda.time.field.BaseDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"
    "(495)<org.joda.time.field.BaseDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(585)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"
    "(585)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(668)<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.field.BaseDurationField: int getValue(long)>"
    "(79)<org.joda.time.field.BaseDurationField: int getValue(long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(111)<org.joda.time.field.BaseDurationField: int getValue(long,long)>"
    "(111)<org.joda.time.field.BaseDurationField: int getValue(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(135)<org.joda.time.field.BaseDurationField: long getMillis(long)>"
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"
    "(135)<org.joda.time.field.BaseDurationField: long getMillis(long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"
    "(141)<org.joda.time.field.BaseDurationField: int getDifference(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>"
    "(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"
    "(79)<org.joda.time.field.PreciseDurationDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"
    "<java.math.BigDecimal: void <clinit>()>"
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.math.BigDecimal: void <clinit>()>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.Object: void <clinit>()>";
    "(241)<org.joda.time.field.FieldUtils: int safeMultiplyToInt(long,long)>"
    "(241)<org.joda.time.field.FieldUtils: int safeMultiplyToInt(long,long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(241)<org.joda.time.field.FieldUtils: int safeMultiplyToInt(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(331)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>"
    "(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>"->"(331)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>";
    "(540)<org.joda.time.field.UnsupportedDateTimeField: java.lang.Object readResolve()>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(540)<org.joda.time.field.UnsupportedDateTimeField: java.lang.Object readResolve()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(100)<org.joda.time.field.PreciseDurationField: long getMillis(long,long)>"
    "(100)<org.joda.time.field.PreciseDurationField: long getMillis(long,long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>"
    "(104)<org.joda.time.field.PreciseDurationField: long add(long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(109)<org.joda.time.field.PreciseDurationField: long add(long,long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"
    "(114)<org.joda.time.field.PreciseDurationField: long getDifferenceAsLong(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"
    "(87)<org.joda.time.field.SkipUndoDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(157)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String)>"
    "(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"
    "(157)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String)>"->"(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "(168)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(157)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String)>"->"(168)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"
    "<java.util.GregorianCalendar: void <clinit>()>"
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.util.GregorianCalendar: void <clinit>()>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>";
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.Calendar: void <clinit>()>"
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.util.Calendar: void <clinit>()>";
    "(264)<org.joda.time.LocalDateTime: void <init>()>"
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>"
    "(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(305)<org.joda.time.LocalDateTime: void <init>(long)>"
    "(305)<org.joda.time.LocalDateTime: void <init>(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(305)<org.joda.time.LocalDateTime: void <init>(long)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(305)<org.joda.time.LocalDateTime: void <init>(long)>"->"<java.lang.Object: void <clinit>()>";
    "(319)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(319)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(319)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(319)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(436)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int)>"
    "(436)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(436)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(436)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(458)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int)>"
    "(458)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(458)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(458)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>"
    "(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"
    "(84)<org.joda.time.LocalTime: void <clinit>()>"
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"->"<java.lang.Object: void <clinit>()>";
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"
    "<java.util.Date: void <clinit>()>"
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.Date: void <clinit>()>";
    "<java.util.TimeZone: java.util.TimeZone getDefault()>"
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.TimeZone: java.util.TimeZone getDefault()>";
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.TimeZone: void <clinit>()>";
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.lang.Object: void <clinit>()>";
    "(824)<org.joda.time.LocalDateTime: java.util.Date toDate(java.util.TimeZone)>"
    "(824)<org.joda.time.LocalDateTime: java.util.Date toDate(java.util.TimeZone)>"->"<java.util.Calendar: void <clinit>()>";
    "<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>"
    "(824)<org.joda.time.LocalDateTime: java.util.Date toDate(java.util.TimeZone)>"->"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>";
    "(824)<org.joda.time.LocalDateTime: java.util.Date toDate(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"<java.util.Calendar: void <clinit>()>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(2097)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String)>"
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"
    "(2097)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"
    "(2097)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(2097)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance()>"
    "(72)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance()>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(72)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)>"
    "(87)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"
    "(87)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)>"->"(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(87)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(130)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getDateOnlyInstance()>"
    "(130)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getDateOnlyInstance()>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(130)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getDateOnlyInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getTimeOnlyInstance()>"
    "(145)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getTimeOnlyInstance()>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(145)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getTimeOnlyInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(232)<org.joda.time.DateTimeComparator: java.lang.Object readResolve()>"
    "(232)<org.joda.time.DateTimeComparator: java.lang.Object readResolve()>"->"(54)<org.joda.time.DateTimeComparator: void <clinit>()>";
    "(232)<org.joda.time.DateTimeComparator: java.lang.Object readResolve()>"->"(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(232)<org.joda.time.DateTimeComparator: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReference: void <clinit>()>"
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.DateTimeUtils: void setCurrentMillisSystem()>"
    "(84)<org.joda.time.DateTimeUtils: void setCurrentMillisSystem()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(145)<org.joda.time.DateTimeUtils: void checkPermission()>"
    "(84)<org.joda.time.DateTimeUtils: void setCurrentMillisSystem()>"->"(145)<org.joda.time.DateTimeUtils: void checkPermission()>";
    "(84)<org.joda.time.DateTimeUtils: void setCurrentMillisSystem()>"->"<java.lang.Object: void <clinit>()>";
    "(98)<org.joda.time.DateTimeUtils: void setCurrentMillisFixed(long)>"
    "(98)<org.joda.time.DateTimeUtils: void setCurrentMillisFixed(long)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(98)<org.joda.time.DateTimeUtils: void setCurrentMillisFixed(long)>"->"(145)<org.joda.time.DateTimeUtils: void checkPermission()>";
    "(98)<org.joda.time.DateTimeUtils: void setCurrentMillisFixed(long)>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.DateTimeUtils: void setCurrentMillisOffset(long)>"
    "(113)<org.joda.time.DateTimeUtils: void setCurrentMillisOffset(long)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(113)<org.joda.time.DateTimeUtils: void setCurrentMillisOffset(long)>"->"(145)<org.joda.time.DateTimeUtils: void checkPermission()>";
    "(113)<org.joda.time.DateTimeUtils: void setCurrentMillisOffset(long)>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.DateTimeUtils: void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider)>"
    "(132)<org.joda.time.DateTimeUtils: void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(132)<org.joda.time.DateTimeUtils: void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider)>"->"(145)<org.joda.time.DateTimeUtils: void checkPermission()>";
    "(132)<org.joda.time.DateTimeUtils: void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider)>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeUtils: void checkPermission()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
    "(145)<org.joda.time.DateTimeUtils: void checkPermission()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(145)<org.joda.time.DateTimeUtils: void checkPermission()>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>"
    "(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.Class: void <clinit>()>"
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <clinit>()>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"<java.util.Collections: void <clinit>()>";
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"<java.lang.Object: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.Collections: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.lang.Object: void <clinit>()>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.lang.Math: double floor(double)>"
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"->"<java.lang.Math: double floor(double)>";
    "(483)<org.joda.time.DateTimeUtils: double toJulianDay(long)>"
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"->"(483)<org.joda.time.DateTimeUtils: double toJulianDay(long)>";
    "<java.lang.Math: void <clinit>()>"
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"->"<java.lang.Math: void <clinit>()>";
    "(503)<org.joda.time.DateTimeUtils: long toJulianDayNumber(long)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Duration: void <clinit>()>"
    "(45)<org.joda.time.Duration: void <clinit>()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(45)<org.joda.time.Duration: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.Duration: org.joda.time.Duration parse(java.lang.String)>"
    "(61)<org.joda.time.Duration: org.joda.time.Duration parse(java.lang.String)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(61)<org.joda.time.Duration: org.joda.time.Duration parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"<java.lang.Object: void <clinit>()>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"<java.lang.Object: void <clinit>()>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"<java.lang.Object: void <clinit>()>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.Duration: org.joda.time.Days toStandardDays()>"
    "(45)<org.joda.time.Days: void <clinit>()>"
    "(312)<org.joda.time.Duration: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"
    "(312)<org.joda.time.Duration: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(312)<org.joda.time.Duration: org.joda.time.Days toStandardDays()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(312)<org.joda.time.Duration: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(329)<org.joda.time.Duration: org.joda.time.Hours toStandardHours()>"
    "(45)<org.joda.time.Hours: void <clinit>()>"
    "(329)<org.joda.time.Duration: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"
    "(329)<org.joda.time.Duration: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(329)<org.joda.time.Duration: org.joda.time.Hours toStandardHours()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(329)<org.joda.time.Duration: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(346)<org.joda.time.Duration: org.joda.time.Minutes toStandardMinutes()>"
    "(45)<org.joda.time.Minutes: void <clinit>()>"
    "(346)<org.joda.time.Duration: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"
    "(346)<org.joda.time.Duration: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(346)<org.joda.time.Duration: org.joda.time.Minutes toStandardMinutes()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(346)<org.joda.time.Duration: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(362)<org.joda.time.Duration: org.joda.time.Seconds toStandardSeconds()>"
    "(45)<org.joda.time.Seconds: void <clinit>()>"
    "(362)<org.joda.time.Duration: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"
    "(362)<org.joda.time.Duration: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(362)<org.joda.time.Duration: org.joda.time.Seconds toStandardSeconds()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(362)<org.joda.time.Duration: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(374)<org.joda.time.Duration: org.joda.time.Duration withMillis(long)>"
    "(374)<org.joda.time.Duration: org.joda.time.Duration withMillis(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(374)<org.joda.time.Duration: org.joda.time.Duration withMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(486)<org.joda.time.Duration: org.joda.time.Duration multipliedBy(long)>"
    "(486)<org.joda.time.Duration: org.joda.time.Duration multipliedBy(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(486)<org.joda.time.Duration: org.joda.time.Duration multipliedBy(long)>"->"(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>";
    "(486)<org.joda.time.Duration: org.joda.time.Duration multipliedBy(long)>"->"<java.lang.Object: void <clinit>()>";
    "(503)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long)>"
    "(503)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"
    "(503)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long)>"->"(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>";
    "(503)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long)>"->"<java.lang.Object: void <clinit>()>";
    "(521)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long,java.math.RoundingMode)>"
    "(521)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long,java.math.RoundingMode)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(521)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long,java.math.RoundingMode)>"->"(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>";
    "(521)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long,java.math.RoundingMode)>"->"<java.lang.Object: void <clinit>()>";
    "(534)<org.joda.time.Duration: org.joda.time.Duration negated()>"
    "(534)<org.joda.time.Duration: org.joda.time.Duration negated()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(534)<org.joda.time.Duration: org.joda.time.Duration negated()>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String)>"
    "(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>"
    "(87)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(98)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(87)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String)>"->"(98)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(108)<org.joda.time.Instant: void <init>()>"
    "(108)<org.joda.time.Instant: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(108)<org.joda.time.Instant: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(108)<org.joda.time.Instant: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>"->"<java.lang.Object: void <clinit>()>";
    "(288)<org.joda.time.Instant: org.joda.time.DateTime toDateTime()>"
    "(288)<org.joda.time.Instant: org.joda.time.DateTime toDateTime()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(288)<org.joda.time.Instant: org.joda.time.DateTime toDateTime()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(288)<org.joda.time.Instant: org.joda.time.DateTime toDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(334)<org.joda.time.Instant: org.joda.time.MutableDateTime toMutableDateTime()>"
    "(334)<org.joda.time.Instant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(334)<org.joda.time.Instant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(334)<org.joda.time.Instant: org.joda.time.MutableDateTime toMutableDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(899)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addToCopy(int)>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"
    "(899)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addToCopy(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(899)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(923)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addWrapFieldToCopy(int)>"
    "(923)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addWrapFieldToCopy(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(923)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addWrapFieldToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(940)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(int)>"
    "(940)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(940)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(957)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(java.lang.String,java.util.Locale)>"
    "(957)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(java.lang.String,java.util.Locale)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(957)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1010)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addToCopy(int)>"
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"
    "(1010)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addToCopy(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(1010)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1034)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addWrapFieldToCopy(int)>"
    "(1034)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addWrapFieldToCopy(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(1034)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addWrapFieldToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1051)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(int)>"
    "(1051)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(1051)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1068)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(java.lang.String,java.util.Locale)>"
    "(1068)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(java.lang.String,java.util.Locale)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(1068)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.LocalTime: org.joda.time.LocalTime now()>"
    "(118)<org.joda.time.LocalTime: org.joda.time.LocalTime now()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(118)<org.joda.time.LocalTime: org.joda.time.LocalTime now()>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.DateTimeZone)>"
    "(131)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(131)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(147)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.Chronology)>"
    "(147)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.Chronology)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(147)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(164)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String)>"
    "(164)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(175)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(164)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String)>"->"(175)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>"
    "(164)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String)>"->"(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "(164)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(190)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long)>"
    "(190)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"
    "(190)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long)>"->"(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>";
    "(190)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long)>"->"<java.lang.Object: void <clinit>()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(234)<org.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)>"
    "(234)<org.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(234)<org.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(267)<org.joda.time.LocalTime: org.joda.time.LocalTime fromDateFields(java.util.Date)>"
    "(267)<org.joda.time.LocalTime: org.joda.time.LocalTime fromDateFields(java.util.Date)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(267)<org.joda.time.LocalTime: org.joda.time.LocalTime fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(288)<org.joda.time.LocalTime: void <init>()>"
    "(288)<org.joda.time.LocalTime: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(288)<org.joda.time.LocalTime: void <init>()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(288)<org.joda.time.LocalTime: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(288)<org.joda.time.LocalTime: void <init>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(288)<org.joda.time.LocalTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>"
    "(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(329)<org.joda.time.LocalTime: void <init>(long)>"
    "(329)<org.joda.time.LocalTime: void <init>(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(329)<org.joda.time.LocalTime: void <init>(long)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(329)<org.joda.time.LocalTime: void <init>(long)>"->"<java.lang.Object: void <clinit>()>";
    "(343)<org.joda.time.LocalTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(343)<org.joda.time.LocalTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(343)<org.joda.time.LocalTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(343)<org.joda.time.LocalTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(450)<org.joda.time.LocalTime: void <init>(int,int)>"
    "(450)<org.joda.time.LocalTime: void <init>(int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(450)<org.joda.time.LocalTime: void <init>(int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(450)<org.joda.time.LocalTime: void <init>(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.LocalTime: void <init>(int,int,int)>"
    "(465)<org.joda.time.LocalTime: void <init>(int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(465)<org.joda.time.LocalTime: void <init>(int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(465)<org.joda.time.LocalTime: void <init>(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(622)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(738)<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>"
    "(738)<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(738)<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"->"(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>";
    "(1309)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String)>"
    "(1309)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(1309)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(1309)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>"
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(101)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(137)<org.joda.time.Weeks: org.joda.time.Weeks weeksIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.Weeks: org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)>"
    "(165)<org.joda.time.Weeks: org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(165)<org.joda.time.Weeks: org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"
    "(165)<org.joda.time.Weeks: org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)>"->"(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>";
    "(165)<org.joda.time.Weeks: org.joda.time.Weeks standardWeeksIn(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.Weeks: java.lang.Object readResolve()>"
    "(207)<org.joda.time.Weeks: java.lang.Object readResolve()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(207)<org.joda.time.Weeks: java.lang.Object readResolve()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(207)<org.joda.time.Weeks: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(217)<org.joda.time.Weeks: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>";
    "(226)<org.joda.time.Weeks: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(244)<org.joda.time.Weeks: org.joda.time.Days toStandardDays()>"
    "(244)<org.joda.time.Weeks: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(244)<org.joda.time.Weeks: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"
    "(244)<org.joda.time.Weeks: org.joda.time.Days toStandardDays()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(244)<org.joda.time.Weeks: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(262)<org.joda.time.Weeks: org.joda.time.Hours toStandardHours()>"
    "(262)<org.joda.time.Weeks: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(262)<org.joda.time.Weeks: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(262)<org.joda.time.Weeks: org.joda.time.Hours toStandardHours()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(262)<org.joda.time.Weeks: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(280)<org.joda.time.Weeks: org.joda.time.Minutes toStandardMinutes()>"
    "(280)<org.joda.time.Weeks: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(280)<org.joda.time.Weeks: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(280)<org.joda.time.Weeks: org.joda.time.Minutes toStandardMinutes()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(280)<org.joda.time.Weeks: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(299)<org.joda.time.Weeks: org.joda.time.Seconds toStandardSeconds()>"
    "(299)<org.joda.time.Weeks: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(299)<org.joda.time.Weeks: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(299)<org.joda.time.Weeks: org.joda.time.Seconds toStandardSeconds()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(299)<org.joda.time.Weeks: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(318)<org.joda.time.Weeks: org.joda.time.Duration toStandardDuration()>"
    "(318)<org.joda.time.Weeks: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(318)<org.joda.time.Weeks: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(343)<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>"
    "(343)<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(343)<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(343)<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(343)<org.joda.time.Weeks: org.joda.time.Weeks plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(376)<org.joda.time.Weeks: org.joda.time.Weeks minus(int)>"
    "(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>"
    "(376)<org.joda.time.Weeks: org.joda.time.Weeks minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(406)<org.joda.time.Weeks: org.joda.time.Weeks multipliedBy(int)>"
    "(406)<org.joda.time.Weeks: org.joda.time.Weeks multipliedBy(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(406)<org.joda.time.Weeks: org.joda.time.Weeks multipliedBy(int)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(406)<org.joda.time.Weeks: org.joda.time.Weeks multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(406)<org.joda.time.Weeks: org.joda.time.Weeks multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(420)<org.joda.time.Weeks: org.joda.time.Weeks dividedBy(int)>"
    "(420)<org.joda.time.Weeks: org.joda.time.Weeks dividedBy(int)>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(420)<org.joda.time.Weeks: org.joda.time.Weeks dividedBy(int)>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(420)<org.joda.time.Weeks: org.joda.time.Weeks dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(434)<org.joda.time.Weeks: org.joda.time.Weeks negated()>"
    "(434)<org.joda.time.Weeks: org.joda.time.Weeks negated()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(434)<org.joda.time.Weeks: org.joda.time.Weeks negated()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(434)<org.joda.time.Weeks: org.joda.time.Weeks negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(434)<org.joda.time.Weeks: org.joda.time.Weeks negated()>"->"<java.lang.Object: void <clinit>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(245)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(284)<org.joda.time.MutableInterval: void setStart(org.joda.time.ReadableInstant)>"
    "(284)<org.joda.time.MutableInterval: void setStart(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(284)<org.joda.time.MutableInterval: void setStart(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(284)<org.joda.time.MutableInterval: void setStart(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.MutableInterval: void setEnd(org.joda.time.ReadableInstant)>"
    "(306)<org.joda.time.MutableInterval: void setEnd(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(306)<org.joda.time.MutableInterval: void setEnd(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(306)<org.joda.time.MutableInterval: void setEnd(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(319)<org.joda.time.MutableInterval: void setDurationAfterStart(long)>"
    "(319)<org.joda.time.MutableInterval: void setDurationAfterStart(long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(330)<org.joda.time.MutableInterval: void setDurationBeforeEnd(long)>"
    "(330)<org.joda.time.MutableInterval: void setDurationBeforeEnd(long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(342)<org.joda.time.MutableInterval: void setDurationAfterStart(org.joda.time.ReadableDuration)>"
    "(342)<org.joda.time.MutableInterval: void setDurationAfterStart(org.joda.time.ReadableDuration)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(342)<org.joda.time.MutableInterval: void setDurationAfterStart(org.joda.time.ReadableDuration)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>"
    "(342)<org.joda.time.MutableInterval: void setDurationAfterStart(org.joda.time.ReadableDuration)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(342)<org.joda.time.MutableInterval: void setDurationAfterStart(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(354)<org.joda.time.MutableInterval: void setDurationBeforeEnd(org.joda.time.ReadableDuration)>"
    "(354)<org.joda.time.MutableInterval: void setDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(354)<org.joda.time.MutableInterval: void setDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(354)<org.joda.time.MutableInterval: void setDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(354)<org.joda.time.MutableInterval: void setDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.System: long currentTimeMillis()>"
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.System: long currentTimeMillis()>";
    "(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(595)<org.joda.time.DateTimeUtils$OffsetMillisProvider: long getMillis()>"
    "(595)<org.joda.time.DateTimeUtils$OffsetMillisProvider: long getMillis()>"->"<java.lang.System: void <clinit>()>";
    "(595)<org.joda.time.DateTimeUtils$OffsetMillisProvider: long getMillis()>"->"<java.lang.System: long currentTimeMillis()>";
    "(595)<org.joda.time.DateTimeUtils$OffsetMillisProvider: long getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String)>"
    "(141)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(152)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(141)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String)>"->"(152)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(303)<org.joda.time.DateMidnight: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(303)<org.joda.time.DateMidnight: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(303)<org.joda.time.DateMidnight: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(303)<org.joda.time.DateMidnight: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(871)<org.joda.time.DateMidnight: org.joda.time.YearMonthDay toYearMonthDay()>"
    "(871)<org.joda.time.DateMidnight: org.joda.time.YearMonthDay toYearMonthDay()>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(871)<org.joda.time.DateMidnight: org.joda.time.YearMonthDay toYearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(882)<org.joda.time.DateMidnight: org.joda.time.LocalDate toLocalDate()>"
    "(882)<org.joda.time.DateMidnight: org.joda.time.LocalDate toLocalDate()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(882)<org.joda.time.DateMidnight: org.joda.time.LocalDate toLocalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"
    "(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>";
    "(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>";
    "(39)<org.joda.time.convert.NullConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(39)<org.joda.time.convert.NullConverter: void <clinit>()>";
    "(34)<org.joda.time.convert.LongConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(34)<org.joda.time.convert.LongConverter: void <clinit>()>";
    "(35)<org.joda.time.convert.DateConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(35)<org.joda.time.convert.DateConverter: void <clinit>()>";
    "(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>";
    "(44)<org.joda.time.convert.StringConverter: void <clinit>()>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(44)<org.joda.time.convert.StringConverter: void <clinit>()>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(230)<org.joda.time.convert.ConverterManager: void checkAlterInstantConverters()>"
    "(230)<org.joda.time.convert.ConverterManager: void checkAlterInstantConverters()>"->"<java.lang.System: void <clinit>()>";
    "(230)<org.joda.time.convert.ConverterManager: void checkAlterInstantConverters()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(230)<org.joda.time.convert.ConverterManager: void checkAlterInstantConverters()>"->"<java.lang.Object: void <clinit>()>";
    "(317)<org.joda.time.convert.ConverterManager: void checkAlterPartialConverters()>"
    "(317)<org.joda.time.convert.ConverterManager: void checkAlterPartialConverters()>"->"<java.lang.System: void <clinit>()>";
    "(317)<org.joda.time.convert.ConverterManager: void checkAlterPartialConverters()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(317)<org.joda.time.convert.ConverterManager: void checkAlterPartialConverters()>"->"<java.lang.Object: void <clinit>()>";
    "(404)<org.joda.time.convert.ConverterManager: void checkAlterDurationConverters()>"
    "(404)<org.joda.time.convert.ConverterManager: void checkAlterDurationConverters()>"->"<java.lang.System: void <clinit>()>";
    "(404)<org.joda.time.convert.ConverterManager: void checkAlterDurationConverters()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(404)<org.joda.time.convert.ConverterManager: void checkAlterDurationConverters()>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.convert.ConverterManager: void checkAlterPeriodConverters()>"
    "(491)<org.joda.time.convert.ConverterManager: void checkAlterPeriodConverters()>"->"<java.lang.System: void <clinit>()>";
    "(491)<org.joda.time.convert.ConverterManager: void checkAlterPeriodConverters()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(491)<org.joda.time.convert.ConverterManager: void checkAlterPeriodConverters()>"->"<java.lang.Object: void <clinit>()>";
    "(578)<org.joda.time.convert.ConverterManager: void checkAlterIntervalConverters()>"
    "(578)<org.joda.time.convert.ConverterManager: void checkAlterIntervalConverters()>"->"<java.lang.System: void <clinit>()>";
    "(578)<org.joda.time.convert.ConverterManager: void checkAlterIntervalConverters()>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(578)<org.joda.time.convert.ConverterManager: void checkAlterIntervalConverters()>"->"<java.lang.Object: void <clinit>()>";
    "(44)<org.joda.time.convert.StringConverter: void <clinit>()>"->"(44)<org.joda.time.convert.StringConverter: void <clinit>()>";
    "(44)<org.joda.time.convert.StringConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "<java.lang.Long: long parseLong(java.lang.String)>"
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: long parseLong(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: long parseLong(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: long parseLong(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Long: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Integer: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: void <clinit>()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(35)<org.joda.time.convert.DateConverter: void <clinit>()>"->"(35)<org.joda.time.convert.DateConverter: void <clinit>()>";
    "(35)<org.joda.time.convert.DateConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>"->"(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"
    "(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(34)<org.joda.time.convert.LongConverter: void <clinit>()>"->"(34)<org.joda.time.convert.LongConverter: void <clinit>()>";
    "(34)<org.joda.time.convert.LongConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>"->"(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"
    "(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(227)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInterval)>";
    "(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>"->"(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"
    "(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>"
    "(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>"->"(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>";
    "(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"
    "(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>"->"(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>";
    "(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(39)<org.joda.time.convert.NullConverter: void <clinit>()>"->"(39)<org.joda.time.convert.NullConverter: void <clinit>()>";
    "(39)<org.joda.time.convert.NullConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"
    "(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>"->"(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>";
    "(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>";
    "(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>"
    "(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>"->"<java.lang.System: void <clinit>()>";
    "<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
    "(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"<java.lang.System: void <clinit>()>";
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"<java.lang.Object: void <clinit>()>";
    "(149)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String)>"
    "(149)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(160)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(149)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String)>"->"(160)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(299)<org.joda.time.MutableDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(299)<org.joda.time.MutableDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(299)<org.joda.time.MutableDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(299)<org.joda.time.MutableDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(484)<org.joda.time.MutableDateTime: void setMillis(org.joda.time.ReadableInstant)>"
    "(484)<org.joda.time.MutableDateTime: void setMillis(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(484)<org.joda.time.MutableDateTime: void setMillis(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(484)<org.joda.time.MutableDateTime: void setMillis(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(496)<org.joda.time.MutableDateTime: void add(long)>"
    "(496)<org.joda.time.MutableDateTime: void add(long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(521)<org.joda.time.MutableDateTime: void add(org.joda.time.ReadableDuration,int)>"
    "(521)<org.joda.time.MutableDateTime: void add(org.joda.time.ReadableDuration,int)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(970)<org.joda.time.MutableDateTime: void setTime(long)>"
    "(970)<org.joda.time.MutableDateTime: void setTime(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(970)<org.joda.time.MutableDateTime: void setTime(long)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(970)<org.joda.time.MutableDateTime: void setTime(long)>"->"<java.lang.Object: void <clinit>()>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.MonthDay: org.joda.time.MonthDay now()>"
    "(103)<org.joda.time.MonthDay: org.joda.time.MonthDay now()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(103)<org.joda.time.MonthDay: org.joda.time.MonthDay now()>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.DateTimeZone)>"
    "(116)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(116)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.Chronology)>"
    "(132)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.Chronology)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(132)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(149)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String)>"
    "(149)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(149)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String)>"->"(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(149)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.MonthDay: org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)>"
    "(182)<org.joda.time.MonthDay: org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(182)<org.joda.time.MonthDay: org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.MonthDay: org.joda.time.MonthDay fromDateFields(java.util.Date)>"
    "(203)<org.joda.time.MonthDay: org.joda.time.MonthDay fromDateFields(java.util.Date)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(203)<org.joda.time.MonthDay: org.joda.time.MonthDay fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>"
    "(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(297)<org.joda.time.MonthDay: void <init>(java.lang.Object)>"
    "(297)<org.joda.time.MonthDay: void <init>(java.lang.Object)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(319)<org.joda.time.MonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(319)<org.joda.time.MonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(319)<org.joda.time.MonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(319)<org.joda.time.MonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(319)<org.joda.time.MonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(380)<org.joda.time.MonthDay: java.lang.Object readResolve()>"
    "(380)<org.joda.time.MonthDay: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(380)<org.joda.time.MonthDay: java.lang.Object readResolve()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(380)<org.joda.time.MonthDay: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(426)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(437)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(437)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(437)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(486)<org.joda.time.MonthDay: org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType,int)>"
    "(486)<org.joda.time.MonthDay: org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(486)<org.joda.time.MonthDay: org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(514)<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(514)<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(514)<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(540)<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(540)<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(540)<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(540)<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"<java.lang.Object: void <clinit>()>";
    "(592)<org.joda.time.MonthDay: org.joda.time.MonthDay plusMonths(int)>"
    "(592)<org.joda.time.MonthDay: org.joda.time.MonthDay plusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(592)<org.joda.time.MonthDay: org.joda.time.MonthDay plusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(592)<org.joda.time.MonthDay: org.joda.time.MonthDay plusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(615)<org.joda.time.MonthDay: org.joda.time.MonthDay plusDays(int)>"
    "(615)<org.joda.time.MonthDay: org.joda.time.MonthDay plusDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(615)<org.joda.time.MonthDay: org.joda.time.MonthDay plusDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(615)<org.joda.time.MonthDay: org.joda.time.MonthDay plusDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(655)<org.joda.time.MonthDay: org.joda.time.MonthDay minusMonths(int)>"
    "(655)<org.joda.time.MonthDay: org.joda.time.MonthDay minusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(655)<org.joda.time.MonthDay: org.joda.time.MonthDay minusMonths(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(655)<org.joda.time.MonthDay: org.joda.time.MonthDay minusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(655)<org.joda.time.MonthDay: org.joda.time.MonthDay minusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(675)<org.joda.time.MonthDay: org.joda.time.MonthDay minusDays(int)>"
    "(675)<org.joda.time.MonthDay: org.joda.time.MonthDay minusDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(675)<org.joda.time.MonthDay: org.joda.time.MonthDay minusDays(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(675)<org.joda.time.MonthDay: org.joda.time.MonthDay minusDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(675)<org.joda.time.MonthDay: org.joda.time.MonthDay minusDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(686)<org.joda.time.MonthDay: org.joda.time.LocalDate toLocalDate(int)>"
    "(686)<org.joda.time.MonthDay: org.joda.time.LocalDate toLocalDate(int)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(686)<org.joda.time.MonthDay: org.joda.time.LocalDate toLocalDate(int)>"->"<java.lang.Object: void <clinit>()>";
    "(721)<org.joda.time.MonthDay: org.joda.time.MonthDay withMonthOfYear(int)>"
    "(721)<org.joda.time.MonthDay: org.joda.time.MonthDay withMonthOfYear(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(721)<org.joda.time.MonthDay: org.joda.time.MonthDay withMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(738)<org.joda.time.MonthDay: org.joda.time.MonthDay withDayOfMonth(int)>"
    "(738)<org.joda.time.MonthDay: org.joda.time.MonthDay withDayOfMonth(int)>"->"(79)<org.joda.time.MonthDay: void <clinit>()>";
    "(738)<org.joda.time.MonthDay: org.joda.time.MonthDay withDayOfMonth(int)>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(796)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String)>"
    "(796)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(796)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(796)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(75)<org.joda.time.YearMonth: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(95)<org.joda.time.YearMonth: org.joda.time.YearMonth now()>"
    "(95)<org.joda.time.YearMonth: org.joda.time.YearMonth now()>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(95)<org.joda.time.YearMonth: org.joda.time.YearMonth now()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.DateTimeZone)>"
    "(108)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.DateTimeZone)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(108)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.Chronology)>"
    "(124)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.Chronology)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(124)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(141)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String)>"
    "(141)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(141)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String)>"->"(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(141)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(141)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.YearMonth: org.joda.time.YearMonth fromCalendarFields(java.util.Calendar)>"
    "(174)<org.joda.time.YearMonth: org.joda.time.YearMonth fromCalendarFields(java.util.Calendar)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(174)<org.joda.time.YearMonth: org.joda.time.YearMonth fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(195)<org.joda.time.YearMonth: org.joda.time.YearMonth fromDateFields(java.util.Date)>"
    "(195)<org.joda.time.YearMonth: org.joda.time.YearMonth fromDateFields(java.util.Date)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(195)<org.joda.time.YearMonth: org.joda.time.YearMonth fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>"
    "(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(289)<org.joda.time.YearMonth: void <init>(java.lang.Object)>"
    "(289)<org.joda.time.YearMonth: void <init>(java.lang.Object)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(311)<org.joda.time.YearMonth: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(311)<org.joda.time.YearMonth: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(311)<org.joda.time.YearMonth: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(311)<org.joda.time.YearMonth: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(311)<org.joda.time.YearMonth: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.YearMonth: java.lang.Object readResolve()>"
    "(372)<org.joda.time.YearMonth: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(372)<org.joda.time.YearMonth: java.lang.Object readResolve()>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(372)<org.joda.time.YearMonth: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(418)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(429)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(429)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(429)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(478)<org.joda.time.YearMonth: org.joda.time.YearMonth withField(org.joda.time.DateTimeFieldType,int)>"
    "(478)<org.joda.time.YearMonth: org.joda.time.YearMonth withField(org.joda.time.DateTimeFieldType,int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(478)<org.joda.time.YearMonth: org.joda.time.YearMonth withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(506)<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(506)<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(506)<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(532)<org.joda.time.YearMonth: org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(532)<org.joda.time.YearMonth: org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(532)<org.joda.time.YearMonth: org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(532)<org.joda.time.YearMonth: org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"<java.lang.Object: void <clinit>()>";
    "(582)<org.joda.time.YearMonth: org.joda.time.YearMonth plusYears(int)>"
    "(582)<org.joda.time.YearMonth: org.joda.time.YearMonth plusYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(582)<org.joda.time.YearMonth: org.joda.time.YearMonth plusYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(582)<org.joda.time.YearMonth: org.joda.time.YearMonth plusYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(601)<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>"
    "(601)<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(601)<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(601)<org.joda.time.YearMonth: org.joda.time.YearMonth plusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(639)<org.joda.time.YearMonth: org.joda.time.YearMonth minusYears(int)>"
    "(639)<org.joda.time.YearMonth: org.joda.time.YearMonth minusYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(639)<org.joda.time.YearMonth: org.joda.time.YearMonth minusYears(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(639)<org.joda.time.YearMonth: org.joda.time.YearMonth minusYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(639)<org.joda.time.YearMonth: org.joda.time.YearMonth minusYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(658)<org.joda.time.YearMonth: org.joda.time.YearMonth minusMonths(int)>"
    "(658)<org.joda.time.YearMonth: org.joda.time.YearMonth minusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(658)<org.joda.time.YearMonth: org.joda.time.YearMonth minusMonths(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(658)<org.joda.time.YearMonth: org.joda.time.YearMonth minusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(658)<org.joda.time.YearMonth: org.joda.time.YearMonth minusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"<java.lang.Object: void <clinit>()>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(735)<org.joda.time.YearMonth: org.joda.time.YearMonth withYear(int)>"
    "(735)<org.joda.time.YearMonth: org.joda.time.YearMonth withYear(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(735)<org.joda.time.YearMonth: org.joda.time.YearMonth withYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(752)<org.joda.time.YearMonth: org.joda.time.YearMonth withMonthOfYear(int)>"
    "(752)<org.joda.time.YearMonth: org.joda.time.YearMonth withMonthOfYear(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(752)<org.joda.time.YearMonth: org.joda.time.YearMonth withMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"->"(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "(807)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String)>"
    "(807)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(807)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(807)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.DateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: java.util.TimeZone getDefault()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "<java.lang.System: java.lang.String getProperty(java.lang.String)>"
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.util.TimeZone: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.System: void <clinit>()>";
    "(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.DateTimeZone: void setDefault(org.joda.time.DateTimeZone)>"
    "(182)<org.joda.time.DateTimeZone: void setDefault(org.joda.time.DateTimeZone)>"->"<java.lang.System: void <clinit>()>";
    "(182)<org.joda.time.DateTimeZone: void setDefault(org.joda.time.DateTimeZone)>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(182)<org.joda.time.DateTimeZone: void setDefault(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(182)<org.joda.time.DateTimeZone: void setDefault(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(243)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHours(int)>"
    "(243)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHours(int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"
    "(243)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHours(int)>"->"(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>";
    "(243)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "<java.lang.Math: int abs(int)>"
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.Math: int abs(int)>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.Math: void <clinit>()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>";
    "<java.lang.Character: boolean isDigit(char)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: boolean isDigit(char)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Character: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: int digit(char,int)>"
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Character: int digit(char,int)>";
    "(384)<org.joda.time.DateTimeZone: java.lang.String convertToAsciiNumber(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(404)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>";
    "(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>"->"<java.lang.Object: void <clinit>()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>";
    "(429)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"<java.lang.System: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(450)<org.joda.time.DateTimeZone: void setProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>";
    "<java.lang.Class: java.lang.Class forName(java.lang.String)>"
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(36)<org.joda.time.tz.UTCProvider: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.io.File: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.System: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Class: void <clinit>()>";
    "(504)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>";
    "(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"<java.lang.System: void <clinit>()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"<java.lang.System: java.lang.SecurityManager getSecurityManager()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(572)<org.joda.time.DateTimeZone: void setNameProvider(org.joda.time.tz.NameProvider)>"->"<java.lang.Object: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: java.lang.Class forName(java.lang.String)>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.System: java.lang.String getProperty(java.lang.String)>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Class: void <clinit>()>";
    "(591)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(620)<org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(630)<org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.AbstractStringBuilder: void <clinit>()>"
    "(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "<java.util.Locale: java.util.Locale getDefault()>"
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(742)<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(643)<org.joda.time.DateTimeZone: java.lang.String printOffset(int)>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(551)<org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getNameProvider()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(788)<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(823)<org.joda.time.DateTimeZone: int getOffset(org.joda.time.ReadableInstant)>"
    "(823)<org.joda.time.DateTimeZone: int getOffset(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(823)<org.joda.time.DateTimeZone: int getOffset(org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(823)<org.joda.time.DateTimeZone: int getOffset(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1250)<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>"
    "(1250)<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: void <clinit>()>";
    "(1250)<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>";
    "(1250)<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: void <clinit>()>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(217)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: void <clinit>()>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(233)<org.joda.time.base.BaseSingleFieldPeriod: int getValue(int)>"->"<java.lang.Object: void <clinit>()>";
    "(273)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.Period toPeriod()>"
    "(273)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.Period toPeriod()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(273)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.Period toPeriod()>"->"<java.lang.Object: void <clinit>()>";
    "(273)<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.Period toPeriod()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(90)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(90)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(90)<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"
    "(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(54)<org.joda.time.base.AbstractDuration: org.joda.time.Duration toDuration()>"
    "(54)<org.joda.time.base.AbstractDuration: org.joda.time.Duration toDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(54)<org.joda.time.base.AbstractDuration: org.joda.time.Duration toDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.base.AbstractDuration: org.joda.time.Period toPeriod()>"
    "(80)<org.joda.time.base.AbstractDuration: org.joda.time.Period toPeriod()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(80)<org.joda.time.base.AbstractDuration: org.joda.time.Period toPeriod()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.base.AbstractDuration: org.joda.time.Period toPeriod()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(113)<org.joda.time.base.AbstractDuration: boolean isEqual(org.joda.time.ReadableDuration)>"
    "(113)<org.joda.time.base.AbstractDuration: boolean isEqual(org.joda.time.ReadableDuration)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(113)<org.joda.time.base.AbstractDuration: boolean isEqual(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(126)<org.joda.time.base.AbstractDuration: boolean isLongerThan(org.joda.time.ReadableDuration)>"
    "(126)<org.joda.time.base.AbstractDuration: boolean isLongerThan(org.joda.time.ReadableDuration)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(126)<org.joda.time.base.AbstractDuration: boolean isLongerThan(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.base.AbstractDuration: boolean isShorterThan(org.joda.time.ReadableDuration)>"
    "(139)<org.joda.time.base.AbstractDuration: boolean isShorterThan(org.joda.time.ReadableDuration)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(139)<org.joda.time.base.AbstractDuration: boolean isShorterThan(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.base.AbstractDuration: java.lang.String toString()>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(73)<org.joda.time.base.BaseDuration: void <init>(long,long)>"
    "(73)<org.joda.time.base.BaseDuration: void <init>(long,long)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(85)<org.joda.time.base.BaseDuration: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(144)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"
    "(144)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(144)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(164)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.Chronology)>"
    "(164)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.Chronology)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(164)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(164)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.Chronology)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(185)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(185)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(185)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriod(org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(200)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant)>"
    "(200)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(200)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(216)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"
    "(216)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(216)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodFrom(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(232)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant)>"
    "(232)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(232)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(232)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(249)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"
    "(249)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(249)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(249)<org.joda.time.base.BaseDuration: org.joda.time.Period toPeriodTo(org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(79)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType[] getFieldTypes()>"
    "(79)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType[] getFieldTypes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(79)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(147)<org.joda.time.base.AbstractPeriod: org.joda.time.Period toPeriod()>"
    "(147)<org.joda.time.base.AbstractPeriod: org.joda.time.Period toPeriod()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(147)<org.joda.time.base.AbstractPeriod: org.joda.time.Period toPeriod()>"->"<java.lang.Object: void <clinit>()>";
    "(147)<org.joda.time.base.AbstractPeriod: org.joda.time.Period toPeriod()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(65)<org.joda.time.base.BasePartial: void <init>()>"
    "(65)<org.joda.time.base.BasePartial: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(65)<org.joda.time.base.BasePartial: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(65)<org.joda.time.base.BasePartial: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>"
    "(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(265)<org.joda.time.base.BasePartial: void setValue(int,int)>"
    "(265)<org.joda.time.base.BasePartial: void setValue(int,int)>"->"<java.lang.System: void <clinit>()>";
    "(265)<org.joda.time.base.BasePartial: void setValue(int,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(265)<org.joda.time.base.BasePartial: void setValue(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(280)<org.joda.time.base.BasePartial: void setValues(int[])>"
    "(280)<org.joda.time.base.BasePartial: void setValues(int[])>"->"<java.lang.System: void <clinit>()>";
    "(280)<org.joda.time.base.BasePartial: void setValues(int[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(280)<org.joda.time.base.BasePartial: void setValues(int[])>"->"<java.lang.Object: void <clinit>()>";
    "(292)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String)>"
    "(292)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(292)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(292)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>"
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>";
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.util.Calendar: void <clinit>()>";
    "(271)<org.joda.time.base.AbstractDateTime: java.util.Calendar toCalendar(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(295)<org.joda.time.base.AbstractDateTime: java.util.GregorianCalendar toGregorianCalendar()>"
    "(295)<org.joda.time.base.AbstractDateTime: java.util.GregorianCalendar toGregorianCalendar()>"->"<java.util.GregorianCalendar: void <clinit>()>";
    "(295)<org.joda.time.base.AbstractDateTime: java.util.GregorianCalendar toGregorianCalendar()>"->"<java.lang.Object: void <clinit>()>";
    "(295)<org.joda.time.base.AbstractDateTime: java.util.GregorianCalendar toGregorianCalendar()>"->"<java.util.Calendar: void <clinit>()>";
    "(325)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String)>"
    "(325)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(325)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(325)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(112)<org.joda.time.base.AbstractInterval: boolean containsNow()>"
    "(112)<org.joda.time.base.AbstractInterval: boolean containsNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(112)<org.joda.time.base.AbstractInterval: boolean containsNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(112)<org.joda.time.base.AbstractInterval: boolean containsNow()>"->"<java.lang.Object: void <clinit>()>";
    "(231)<org.joda.time.base.AbstractInterval: boolean overlaps(org.joda.time.ReadableInterval)>"
    "(231)<org.joda.time.base.AbstractInterval: boolean overlaps(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(231)<org.joda.time.base.AbstractInterval: boolean overlaps(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(231)<org.joda.time.base.AbstractInterval: boolean overlaps(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>"
    "(279)<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(279)<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(279)<org.joda.time.base.AbstractInterval: boolean isBeforeNow()>"->"<java.lang.Object: void <clinit>()>";
    "(334)<org.joda.time.base.AbstractInterval: boolean isAfterNow()>"
    "(334)<org.joda.time.base.AbstractInterval: boolean isAfterNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(334)<org.joda.time.base.AbstractInterval: boolean isAfterNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(334)<org.joda.time.base.AbstractInterval: boolean isAfterNow()>"->"<java.lang.Object: void <clinit>()>";
    "(363)<org.joda.time.base.AbstractInterval: boolean isAfter(org.joda.time.ReadableInterval)>"
    "(363)<org.joda.time.base.AbstractInterval: boolean isAfter(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(363)<org.joda.time.base.AbstractInterval: boolean isAfter(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(363)<org.joda.time.base.AbstractInterval: boolean isAfter(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(402)<org.joda.time.base.AbstractInterval: long toDurationMillis()>"
    "(402)<org.joda.time.base.AbstractInterval: long toDurationMillis()>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(414)<org.joda.time.base.AbstractInterval: org.joda.time.Duration toDuration()>"
    "(414)<org.joda.time.base.AbstractInterval: org.joda.time.Duration toDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(414)<org.joda.time.base.AbstractInterval: org.joda.time.Duration toDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(414)<org.joda.time.base.AbstractInterval: org.joda.time.Duration toDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(414)<org.joda.time.base.AbstractInterval: org.joda.time.Duration toDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(433)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod()>"
    "(433)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(433)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod()>"->"<java.lang.Object: void <clinit>()>";
    "(433)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(447)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"
    "(447)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(447)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(447)<org.joda.time.base.AbstractInterval: org.joda.time.Period toPeriod(org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"
    "(464)<org.joda.time.base.AbstractInterval: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>";
    "(62)<org.joda.time.base.BasePeriod$1: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTimeISO()>"
    "(155)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTimeISO()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(155)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTimeISO()>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(155)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTimeISO()>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTimeISO()>"
    "(200)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTimeISO()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(200)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTimeISO()>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(200)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTimeISO()>"->"<java.lang.Object: void <clinit>()>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(235)<org.joda.time.base.AbstractInstant: java.util.Date toDate()>"
    "(235)<org.joda.time.base.AbstractInstant: java.util.Date toDate()>"->"<java.util.Date: void <clinit>()>";
    "(235)<org.joda.time.base.AbstractInstant: java.util.Date toDate()>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"
    "(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(333)<org.joda.time.base.AbstractInstant: boolean isAfterNow()>"
    "(333)<org.joda.time.base.AbstractInstant: boolean isAfterNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(333)<org.joda.time.base.AbstractInstant: boolean isAfterNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(333)<org.joda.time.base.AbstractInstant: boolean isAfterNow()>"->"<java.lang.Object: void <clinit>()>";
    "(344)<org.joda.time.base.AbstractInstant: boolean isAfter(org.joda.time.ReadableInstant)>"
    "(344)<org.joda.time.base.AbstractInstant: boolean isAfter(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(344)<org.joda.time.base.AbstractInstant: boolean isAfter(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(344)<org.joda.time.base.AbstractInstant: boolean isAfter(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(367)<org.joda.time.base.AbstractInstant: boolean isBeforeNow()>"
    "(367)<org.joda.time.base.AbstractInstant: boolean isBeforeNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(367)<org.joda.time.base.AbstractInstant: boolean isBeforeNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(367)<org.joda.time.base.AbstractInstant: boolean isBeforeNow()>"->"<java.lang.Object: void <clinit>()>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(401)<org.joda.time.base.AbstractInstant: boolean isEqualNow()>"
    "(401)<org.joda.time.base.AbstractInstant: boolean isEqualNow()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(401)<org.joda.time.base.AbstractInstant: boolean isEqualNow()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(401)<org.joda.time.base.AbstractInstant: boolean isEqualNow()>"->"<java.lang.Object: void <clinit>()>";
    "(412)<org.joda.time.base.AbstractInstant: boolean isEqual(org.joda.time.ReadableInstant)>"
    "(412)<org.joda.time.base.AbstractInstant: boolean isEqual(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(412)<org.joda.time.base.AbstractInstant: boolean isEqual(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(412)<org.joda.time.base.AbstractInstant: boolean isEqual(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(61)<org.joda.time.base.BaseDateTime: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>"
    "(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.base.BaseDateTime: void <init>(long)>"
    "(97)<org.joda.time.base.BaseDateTime: void <init>(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(97)<org.joda.time.base.BaseDateTime: void <init>(long)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(97)<org.joda.time.base.BaseDateTime: void <init>(long)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(199)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>"
    "(199)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(199)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(199)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(227)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>"
    "(227)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(227)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(227)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(280)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>"
    "(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(107)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(124)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(248)<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>"
    "(248)<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(248)<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(248)<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(57)<org.joda.time.base.BasePeriod: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"<java.lang.System: void <clinit>()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"<java.lang.Object: void <clinit>()>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>";
    "(308)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType checkPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(453)<org.joda.time.base.BasePeriod: int[] setPeriodInternal(int,int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>"
    "(517)<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(578)<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>"
    "(578)<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(616)<org.joda.time.base.BasePeriod: void setValues(int[])>"
    "(616)<org.joda.time.base.BasePeriod: void setValues(int[])>"->"<java.lang.System: void <clinit>()>";
    "(616)<org.joda.time.base.BasePeriod: void setValues(int[])>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(616)<org.joda.time.base.BasePeriod: void setValues(int[])>"->"<java.lang.Object: void <clinit>()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>";
    "(1325)<org.joda.time.DateTimeZone$LazyInit: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: void <clinit>()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.lang.Object: void <clinit>()>";
    "(1097)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addToCopy(int)>"
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"
    "(1097)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addToCopy(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1097)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1123)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addNoWrapToCopy(int)>"
    "(1123)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addNoWrapToCopy(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1123)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addNoWrapToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1147)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addWrapFieldToCopy(int)>"
    "(1147)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addWrapFieldToCopy(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1147)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addWrapFieldToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1164)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(int)>"
    "(1164)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1164)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1181)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(java.lang.String,java.util.Locale)>"
    "(1181)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(java.lang.String,java.util.Locale)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1181)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$0()>"
    "(73)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$0()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$0()>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$1()>"
    "(76)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$1()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$1()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$2()>"
    "(79)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$2()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(79)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$2()>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$3()>"
    "(82)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$3()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(82)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$3()>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$4()>"
    "(85)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$4()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(85)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$4()>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$5()>"
    "(88)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$5()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(88)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$5()>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$6()>"
    "(91)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$6()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(91)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$6()>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$7()>"
    "(94)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$7()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(94)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$7()>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$8()>"
    "(97)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$8()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(97)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$8()>"->"<java.lang.Object: void <clinit>()>";
    "(100)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$9()>"
    "(100)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$9()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(100)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$9()>"->"<java.lang.Object: void <clinit>()>";
    "(103)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$10()>"
    "(103)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$10()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(103)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$10()>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$11()>"
    "(106)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$11()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(106)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$11()>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$12()>"
    "(110)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$12()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(110)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$12()>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$13()>"
    "(113)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$13()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(113)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$13()>"->"<java.lang.Object: void <clinit>()>";
    "(116)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$14()>"
    "(116)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$14()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(116)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$14()>"->"<java.lang.Object: void <clinit>()>";
    "(119)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$15()>"
    "(119)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$15()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(119)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$15()>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$16()>"
    "(122)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$16()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(122)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$16()>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$17()>"
    "(125)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$17()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(125)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$17()>"->"<java.lang.Object: void <clinit>()>";
    "(128)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$18()>"
    "(128)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$18()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(128)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$18()>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$19()>"
    "(131)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$19()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(131)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$19()>"->"<java.lang.Object: void <clinit>()>";
    "(134)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$20()>"
    "(134)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$20()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(134)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$20()>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$21()>"
    "(137)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$21()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(137)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$21()>"->"<java.lang.Object: void <clinit>()>";
    "(140)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$22()>"
    "(140)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$22()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(140)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$22()>"->"<java.lang.Object: void <clinit>()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.System: void <clinit>()>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.System: void <clinit>()>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(620)<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(620)<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(687)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadableInstant)>"
    "(687)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(687)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(687)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(687)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.Arrays: void <clinit>()>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(817)<org.joda.time.Partial: java.lang.String toString(java.lang.String)>"
    "(817)<org.joda.time.Partial: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(817)<org.joda.time.Partial: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(817)<org.joda.time.Partial: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(118)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(155)<org.joda.time.Days: org.joda.time.Days daysIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.Days: org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)>"
    "(183)<org.joda.time.Days: org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(183)<org.joda.time.Days: org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(183)<org.joda.time.Days: org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)>"->"(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>";
    "(183)<org.joda.time.Days: org.joda.time.Days standardDaysIn(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(225)<org.joda.time.Days: java.lang.Object readResolve()>"
    "(225)<org.joda.time.Days: java.lang.Object readResolve()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(225)<org.joda.time.Days: java.lang.Object readResolve()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(225)<org.joda.time.Days: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(235)<org.joda.time.Days: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>";
    "(244)<org.joda.time.Days: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(261)<org.joda.time.Days: org.joda.time.Weeks toStandardWeeks()>"
    "(261)<org.joda.time.Days: org.joda.time.Weeks toStandardWeeks()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(261)<org.joda.time.Days: org.joda.time.Weeks toStandardWeeks()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(261)<org.joda.time.Days: org.joda.time.Weeks toStandardWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.Days: org.joda.time.Hours toStandardHours()>"
    "(278)<org.joda.time.Days: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(278)<org.joda.time.Days: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(278)<org.joda.time.Days: org.joda.time.Hours toStandardHours()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(278)<org.joda.time.Days: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(296)<org.joda.time.Days: org.joda.time.Minutes toStandardMinutes()>"
    "(296)<org.joda.time.Days: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(296)<org.joda.time.Days: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(296)<org.joda.time.Days: org.joda.time.Minutes toStandardMinutes()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(296)<org.joda.time.Days: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(314)<org.joda.time.Days: org.joda.time.Seconds toStandardSeconds()>"
    "(314)<org.joda.time.Days: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(314)<org.joda.time.Days: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(314)<org.joda.time.Days: org.joda.time.Seconds toStandardSeconds()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(314)<org.joda.time.Days: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(332)<org.joda.time.Days: org.joda.time.Duration toStandardDuration()>"
    "(332)<org.joda.time.Days: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(332)<org.joda.time.Days: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.Days: org.joda.time.Days plus(int)>"
    "(357)<org.joda.time.Days: org.joda.time.Days plus(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(357)<org.joda.time.Days: org.joda.time.Days plus(int)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(357)<org.joda.time.Days: org.joda.time.Days plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(357)<org.joda.time.Days: org.joda.time.Days plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(390)<org.joda.time.Days: org.joda.time.Days minus(int)>"
    "(390)<org.joda.time.Days: org.joda.time.Days minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(420)<org.joda.time.Days: org.joda.time.Days multipliedBy(int)>"
    "(420)<org.joda.time.Days: org.joda.time.Days multipliedBy(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(420)<org.joda.time.Days: org.joda.time.Days multipliedBy(int)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(420)<org.joda.time.Days: org.joda.time.Days multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(420)<org.joda.time.Days: org.joda.time.Days multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(434)<org.joda.time.Days: org.joda.time.Days dividedBy(int)>"
    "(434)<org.joda.time.Days: org.joda.time.Days dividedBy(int)>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(434)<org.joda.time.Days: org.joda.time.Days dividedBy(int)>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(434)<org.joda.time.Days: org.joda.time.Days dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(448)<org.joda.time.Days: org.joda.time.Days negated()>"
    "(448)<org.joda.time.Days: org.joda.time.Days negated()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(448)<org.joda.time.Days: org.joda.time.Days negated()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(448)<org.joda.time.Days: org.joda.time.Days negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(448)<org.joda.time.Days: org.joda.time.Days negated()>"->"<java.lang.Object: void <clinit>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(1314)<org.joda.time.DateTimeZone$Stub: java.lang.Object readResolve()>"
    "(1314)<org.joda.time.DateTimeZone$Stub: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1314)<org.joda.time.DateTimeZone$Stub: java.lang.Object readResolve()>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "(1314)<org.joda.time.DateTimeZone$Stub: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String)>"
    "(74)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String)>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(85)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String,org.joda.time.format.PeriodFormatter)>"
    "(74)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String)>"->"(85)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String,org.joda.time.format.PeriodFormatter)>";
    "(114)<org.joda.time.MutablePeriod: void <init>(int,int,int,int)>"
    "(114)<org.joda.time.MutablePeriod: void <init>(int,int,int,int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(114)<org.joda.time.MutablePeriod: void <init>(int,int,int,int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(114)<org.joda.time.MutablePeriod: void <init>(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.MutablePeriod: void <init>(int,int,int,int,int,int,int,int)>"
    "(131)<org.joda.time.MutablePeriod: void <init>(int,int,int,int,int,int,int,int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(131)<org.joda.time.MutablePeriod: void <init>(int,int,int,int,int,int,int,int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(131)<org.joda.time.MutablePeriod: void <init>(int,int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(497)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInterval)>"
    "(497)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(497)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInterval)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(497)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(203)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getIntervalChronology(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(516)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(547)<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>"
    "(547)<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(547)<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(547)<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(579)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableDuration,org.joda.time.Chronology)>"
    "(579)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableDuration,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(579)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableDuration,org.joda.time.Chronology)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(579)<org.joda.time.MutablePeriod: void setPeriod(org.joda.time.ReadableDuration,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(610)<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>"
    "(610)<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(610)<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(610)<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(658)<org.joda.time.MutablePeriod: void add(int,int,int,int,int,int,int,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(690)<org.joda.time.MutablePeriod: void add(org.joda.time.ReadableDuration)>"
    "(690)<org.joda.time.MutablePeriod: void add(org.joda.time.ReadableDuration)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(690)<org.joda.time.MutablePeriod: void add(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(690)<org.joda.time.MutablePeriod: void add(org.joda.time.ReadableDuration)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(707)<org.joda.time.MutablePeriod: void add(long)>"
    "(707)<org.joda.time.MutablePeriod: void add(long)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(707)<org.joda.time.MutablePeriod: void add(long)>"->"<java.lang.Object: void <clinit>()>";
    "(707)<org.joda.time.MutablePeriod: void add(long)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(723)<org.joda.time.MutablePeriod: void add(long,org.joda.time.Chronology)>"
    "(723)<org.joda.time.MutablePeriod: void add(long,org.joda.time.Chronology)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(723)<org.joda.time.MutablePeriod: void add(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(723)<org.joda.time.MutablePeriod: void add(long,org.joda.time.Chronology)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(746)<org.joda.time.MutablePeriod: int getYears()>"
    "(746)<org.joda.time.MutablePeriod: int getYears()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(746)<org.joda.time.MutablePeriod: int getYears()>"->"<java.lang.Object: void <clinit>()>";
    "(755)<org.joda.time.MutablePeriod: int getMonths()>"
    "(755)<org.joda.time.MutablePeriod: int getMonths()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(755)<org.joda.time.MutablePeriod: int getMonths()>"->"<java.lang.Object: void <clinit>()>";
    "(764)<org.joda.time.MutablePeriod: int getWeeks()>"
    "(764)<org.joda.time.MutablePeriod: int getWeeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(764)<org.joda.time.MutablePeriod: int getWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(773)<org.joda.time.MutablePeriod: int getDays()>"
    "(773)<org.joda.time.MutablePeriod: int getDays()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(773)<org.joda.time.MutablePeriod: int getDays()>"->"<java.lang.Object: void <clinit>()>";
    "(783)<org.joda.time.MutablePeriod: int getHours()>"
    "(783)<org.joda.time.MutablePeriod: int getHours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(783)<org.joda.time.MutablePeriod: int getHours()>"->"<java.lang.Object: void <clinit>()>";
    "(792)<org.joda.time.MutablePeriod: int getMinutes()>"
    "(792)<org.joda.time.MutablePeriod: int getMinutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(792)<org.joda.time.MutablePeriod: int getMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(801)<org.joda.time.MutablePeriod: int getSeconds()>"
    "(801)<org.joda.time.MutablePeriod: int getSeconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(801)<org.joda.time.MutablePeriod: int getSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(810)<org.joda.time.MutablePeriod: int getMillis()>"
    "(810)<org.joda.time.MutablePeriod: int getMillis()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(810)<org.joda.time.MutablePeriod: int getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(821)<org.joda.time.MutablePeriod: void setYears(int)>"
    "(821)<org.joda.time.MutablePeriod: void setYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(821)<org.joda.time.MutablePeriod: void setYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(821)<org.joda.time.MutablePeriod: void setYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(832)<org.joda.time.MutablePeriod: void addYears(int)>"
    "(832)<org.joda.time.MutablePeriod: void addYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(832)<org.joda.time.MutablePeriod: void addYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(832)<org.joda.time.MutablePeriod: void addYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.MutablePeriod: void setMonths(int)>"
    "(843)<org.joda.time.MutablePeriod: void setMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(843)<org.joda.time.MutablePeriod: void setMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(843)<org.joda.time.MutablePeriod: void setMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.MutablePeriod: void addMonths(int)>"
    "(854)<org.joda.time.MutablePeriod: void addMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(854)<org.joda.time.MutablePeriod: void addMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(854)<org.joda.time.MutablePeriod: void addMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(865)<org.joda.time.MutablePeriod: void setWeeks(int)>"
    "(865)<org.joda.time.MutablePeriod: void setWeeks(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(865)<org.joda.time.MutablePeriod: void setWeeks(int)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(865)<org.joda.time.MutablePeriod: void setWeeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(876)<org.joda.time.MutablePeriod: void addWeeks(int)>"
    "(876)<org.joda.time.MutablePeriod: void addWeeks(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(876)<org.joda.time.MutablePeriod: void addWeeks(int)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(876)<org.joda.time.MutablePeriod: void addWeeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(887)<org.joda.time.MutablePeriod: void setDays(int)>"
    "(887)<org.joda.time.MutablePeriod: void setDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(887)<org.joda.time.MutablePeriod: void setDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(887)<org.joda.time.MutablePeriod: void setDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(898)<org.joda.time.MutablePeriod: void addDays(int)>"
    "(898)<org.joda.time.MutablePeriod: void addDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(898)<org.joda.time.MutablePeriod: void addDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(898)<org.joda.time.MutablePeriod: void addDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(909)<org.joda.time.MutablePeriod: void setHours(int)>"
    "(909)<org.joda.time.MutablePeriod: void setHours(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(909)<org.joda.time.MutablePeriod: void setHours(int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(909)<org.joda.time.MutablePeriod: void setHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(920)<org.joda.time.MutablePeriod: void addHours(int)>"
    "(920)<org.joda.time.MutablePeriod: void addHours(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(920)<org.joda.time.MutablePeriod: void addHours(int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(920)<org.joda.time.MutablePeriod: void addHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(931)<org.joda.time.MutablePeriod: void setMinutes(int)>"
    "(931)<org.joda.time.MutablePeriod: void setMinutes(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(931)<org.joda.time.MutablePeriod: void setMinutes(int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(931)<org.joda.time.MutablePeriod: void setMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(942)<org.joda.time.MutablePeriod: void addMinutes(int)>"
    "(942)<org.joda.time.MutablePeriod: void addMinutes(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(942)<org.joda.time.MutablePeriod: void addMinutes(int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(942)<org.joda.time.MutablePeriod: void addMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(953)<org.joda.time.MutablePeriod: void setSeconds(int)>"
    "(953)<org.joda.time.MutablePeriod: void setSeconds(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(953)<org.joda.time.MutablePeriod: void setSeconds(int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(953)<org.joda.time.MutablePeriod: void setSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(964)<org.joda.time.MutablePeriod: void addSeconds(int)>"
    "(964)<org.joda.time.MutablePeriod: void addSeconds(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(964)<org.joda.time.MutablePeriod: void addSeconds(int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(964)<org.joda.time.MutablePeriod: void addSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(975)<org.joda.time.MutablePeriod: void setMillis(int)>"
    "(975)<org.joda.time.MutablePeriod: void setMillis(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(975)<org.joda.time.MutablePeriod: void setMillis(int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(975)<org.joda.time.MutablePeriod: void setMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(986)<org.joda.time.MutablePeriod: void addMillis(int)>"
    "(986)<org.joda.time.MutablePeriod: void addMillis(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(986)<org.joda.time.MutablePeriod: void addMillis(int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(986)<org.joda.time.MutablePeriod: void addMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(115)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)>"
    "(115)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(115)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(145)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromDateFields(java.util.Date)>"
    "(145)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromDateFields(java.util.Date)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(145)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(168)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long)>"
    "(168)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"
    "(168)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long)>"->"(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>";
    "(168)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long)>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(214)<org.joda.time.TimeOfDay: void <init>(org.joda.time.DateTimeZone)>"
    "(214)<org.joda.time.TimeOfDay: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(214)<org.joda.time.TimeOfDay: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(214)<org.joda.time.TimeOfDay: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(277)<org.joda.time.TimeOfDay: void <init>(java.lang.Object)>"
    "(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>"
    "(277)<org.joda.time.TimeOfDay: void <init>(java.lang.Object)>"->"(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>";
    "(302)<org.joda.time.TimeOfDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(302)<org.joda.time.TimeOfDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(302)<org.joda.time.TimeOfDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>";
    "(302)<org.joda.time.TimeOfDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(302)<org.joda.time.TimeOfDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(464)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(475)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(475)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(475)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType,int)>"
    "(524)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType,int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(524)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(553)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(553)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(580)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(580)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(580)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(580)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"<java.lang.Object: void <clinit>()>";
    "(632)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusHours(int)>"
    "(632)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusHours(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(632)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusHours(int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(632)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(652)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMinutes(int)>"
    "(652)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMinutes(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(652)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMinutes(int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(652)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(672)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusSeconds(int)>"
    "(672)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusSeconds(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(672)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusSeconds(int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(672)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(692)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMillis(int)>"
    "(692)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMillis(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(692)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMillis(int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(692)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay plusMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(732)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusHours(int)>"
    "(732)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusHours(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(732)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusHours(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(732)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusHours(int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(732)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(752)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMinutes(int)>"
    "(752)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMinutes(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(752)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMinutes(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(752)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMinutes(int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(752)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(772)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusSeconds(int)>"
    "(772)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusSeconds(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(772)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusSeconds(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(772)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusSeconds(int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(772)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(792)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMillis(int)>"
    "(792)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMillis(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(792)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMillis(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(792)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMillis(int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(792)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay minusMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(816)<org.joda.time.TimeOfDay: org.joda.time.LocalTime toLocalTime()>"
    "(816)<org.joda.time.TimeOfDay: org.joda.time.LocalTime toLocalTime()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(816)<org.joda.time.TimeOfDay: org.joda.time.LocalTime toLocalTime()>"->"<java.lang.Object: void <clinit>()>";
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(901)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withHourOfDay(int)>"
    "(901)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withHourOfDay(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(901)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withHourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(919)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMinuteOfHour(int)>"
    "(919)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMinuteOfHour(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(919)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMinuteOfHour(int)>"->"<java.lang.Object: void <clinit>()>";
    "(937)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withSecondOfMinute(int)>"
    "(937)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withSecondOfMinute(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(937)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withSecondOfMinute(int)>"->"<java.lang.Object: void <clinit>()>";
    "(955)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMillisOfSecond(int)>"
    "(955)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMillisOfSecond(int)>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(955)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMillisOfSecond(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"->"(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(101)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(137)<org.joda.time.Seconds: org.joda.time.Seconds secondsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.Seconds: org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)>"
    "(165)<org.joda.time.Seconds: org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(165)<org.joda.time.Seconds: org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(165)<org.joda.time.Seconds: org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)>"->"(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>";
    "(165)<org.joda.time.Seconds: org.joda.time.Seconds standardSecondsIn(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.Seconds: java.lang.Object readResolve()>"
    "(207)<org.joda.time.Seconds: java.lang.Object readResolve()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(207)<org.joda.time.Seconds: java.lang.Object readResolve()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(207)<org.joda.time.Seconds: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(217)<org.joda.time.Seconds: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>";
    "(226)<org.joda.time.Seconds: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(245)<org.joda.time.Seconds: org.joda.time.Weeks toStandardWeeks()>"
    "(245)<org.joda.time.Seconds: org.joda.time.Weeks toStandardWeeks()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(245)<org.joda.time.Seconds: org.joda.time.Weeks toStandardWeeks()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(245)<org.joda.time.Seconds: org.joda.time.Weeks toStandardWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(262)<org.joda.time.Seconds: org.joda.time.Days toStandardDays()>"
    "(262)<org.joda.time.Seconds: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(262)<org.joda.time.Seconds: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(262)<org.joda.time.Seconds: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(278)<org.joda.time.Seconds: org.joda.time.Hours toStandardHours()>"
    "(278)<org.joda.time.Seconds: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(278)<org.joda.time.Seconds: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(278)<org.joda.time.Seconds: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(294)<org.joda.time.Seconds: org.joda.time.Minutes toStandardMinutes()>"
    "(294)<org.joda.time.Seconds: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(294)<org.joda.time.Seconds: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(294)<org.joda.time.Seconds: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.Seconds: org.joda.time.Duration toStandardDuration()>"
    "(312)<org.joda.time.Seconds: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(312)<org.joda.time.Seconds: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(337)<org.joda.time.Seconds: org.joda.time.Seconds plus(int)>"
    "(337)<org.joda.time.Seconds: org.joda.time.Seconds plus(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(337)<org.joda.time.Seconds: org.joda.time.Seconds plus(int)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(337)<org.joda.time.Seconds: org.joda.time.Seconds plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(337)<org.joda.time.Seconds: org.joda.time.Seconds plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(370)<org.joda.time.Seconds: org.joda.time.Seconds minus(int)>"
    "(370)<org.joda.time.Seconds: org.joda.time.Seconds minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(400)<org.joda.time.Seconds: org.joda.time.Seconds multipliedBy(int)>"
    "(400)<org.joda.time.Seconds: org.joda.time.Seconds multipliedBy(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(400)<org.joda.time.Seconds: org.joda.time.Seconds multipliedBy(int)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(400)<org.joda.time.Seconds: org.joda.time.Seconds multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(400)<org.joda.time.Seconds: org.joda.time.Seconds multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(414)<org.joda.time.Seconds: org.joda.time.Seconds dividedBy(int)>"
    "(414)<org.joda.time.Seconds: org.joda.time.Seconds dividedBy(int)>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(414)<org.joda.time.Seconds: org.joda.time.Seconds dividedBy(int)>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(414)<org.joda.time.Seconds: org.joda.time.Seconds dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.Seconds: org.joda.time.Seconds negated()>"
    "(428)<org.joda.time.Seconds: org.joda.time.Seconds negated()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(428)<org.joda.time.Seconds: org.joda.time.Seconds negated()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(428)<org.joda.time.Seconds: org.joda.time.Seconds negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(428)<org.joda.time.Seconds: org.joda.time.Seconds negated()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(913)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addToCopy(int)>"
    "(913)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addToCopy(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(913)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(937)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addWrapFieldToCopy(int)>"
    "(937)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addWrapFieldToCopy(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(937)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addWrapFieldToCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(954)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(int)>"
    "(954)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(int)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(954)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(971)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(java.lang.String,java.util.Locale)>"
    "(971)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(java.lang.String,java.util.Locale)>"->"(75)<org.joda.time.YearMonth: void <clinit>()>";
    "(971)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2281)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMaximumValue()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"
    "(2281)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMaximumValue()>"->"(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>";
    "(2310)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMinimumValue()>"
    "(2310)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMinimumValue()>"->"(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(72)<org.joda.time.YearMonthDay: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)>"
    "(106)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(106)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(133)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromDateFields(java.util.Date)>"
    "(133)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromDateFields(java.util.Date)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(133)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(168)<org.joda.time.YearMonthDay: void <init>(org.joda.time.DateTimeZone)>"
    "(168)<org.joda.time.YearMonthDay: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(168)<org.joda.time.YearMonthDay: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(168)<org.joda.time.YearMonthDay: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(231)<org.joda.time.YearMonthDay: void <init>(java.lang.Object)>"
    "(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"
    "(231)<org.joda.time.YearMonthDay: void <init>(java.lang.Object)>"->"(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(256)<org.joda.time.YearMonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(256)<org.joda.time.YearMonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(256)<org.joda.time.YearMonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(256)<org.joda.time.YearMonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(256)<org.joda.time.YearMonthDay: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(351)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType getFieldType(int)>"->"<java.lang.Object: void <clinit>()>";
    "(362)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(362)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(362)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: void <clinit>()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(411)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType,int)>"
    "(411)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(411)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(439)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(439)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(439)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(465)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(465)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(465)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(465)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"<java.lang.Object: void <clinit>()>";
    "(516)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusYears(int)>"
    "(516)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(516)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(516)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(536)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusMonths(int)>"
    "(536)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(536)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(536)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(556)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusDays(int)>"
    "(556)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(556)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(556)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay plusDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(595)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusYears(int)>"
    "(595)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusYears(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(595)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusYears(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(595)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusYears(int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(595)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(615)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusMonths(int)>"
    "(615)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusMonths(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(615)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusMonths(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(615)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusMonths(int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(615)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(635)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusDays(int)>"
    "(635)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusDays(int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(635)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusDays(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(635)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusDays(int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(635)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay minusDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(659)<org.joda.time.YearMonthDay: org.joda.time.LocalDate toLocalDate()>"
    "(659)<org.joda.time.YearMonthDay: org.joda.time.LocalDate toLocalDate()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(659)<org.joda.time.YearMonthDay: org.joda.time.LocalDate toLocalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(797)<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"
    "(797)<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(797)<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(797)<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withYear(int)>"
    "(843)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withYear(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(843)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(861)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withMonthOfYear(int)>"
    "(861)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withMonthOfYear(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(861)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(879)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withDayOfMonth(int)>"
    "(879)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withDayOfMonth(int)>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(879)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withDayOfMonth(int)>"->"<java.lang.Object: void <clinit>()>";
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"->"(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(45)<org.joda.time.Months: void <clinit>()>"
    "(45)<org.joda.time.Months: void <clinit>()>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(142)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(183)<org.joda.time.Months: org.joda.time.Months monthsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(228)<org.joda.time.Months: java.lang.Object readResolve()>"
    "(228)<org.joda.time.Months: java.lang.Object readResolve()>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(228)<org.joda.time.Months: java.lang.Object readResolve()>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(228)<org.joda.time.Months: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(238)<org.joda.time.Months: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>";
    "(247)<org.joda.time.Months: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(271)<org.joda.time.Months: org.joda.time.Months plus(int)>"
    "(271)<org.joda.time.Months: org.joda.time.Months plus(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(271)<org.joda.time.Months: org.joda.time.Months plus(int)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(271)<org.joda.time.Months: org.joda.time.Months plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(271)<org.joda.time.Months: org.joda.time.Months plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(304)<org.joda.time.Months: org.joda.time.Months minus(int)>"
    "(304)<org.joda.time.Months: org.joda.time.Months minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(334)<org.joda.time.Months: org.joda.time.Months multipliedBy(int)>"
    "(334)<org.joda.time.Months: org.joda.time.Months multipliedBy(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(334)<org.joda.time.Months: org.joda.time.Months multipliedBy(int)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(334)<org.joda.time.Months: org.joda.time.Months multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(334)<org.joda.time.Months: org.joda.time.Months multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.Months: org.joda.time.Months dividedBy(int)>"
    "(348)<org.joda.time.Months: org.joda.time.Months dividedBy(int)>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(348)<org.joda.time.Months: org.joda.time.Months dividedBy(int)>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(348)<org.joda.time.Months: org.joda.time.Months dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(362)<org.joda.time.Months: org.joda.time.Months negated()>"
    "(362)<org.joda.time.Months: org.joda.time.Months negated()>"->"(45)<org.joda.time.Months: void <clinit>()>";
    "(362)<org.joda.time.Months: org.joda.time.Months negated()>"->"(90)<org.joda.time.Months: org.joda.time.Months months(int)>";
    "(362)<org.joda.time.Months: org.joda.time.Months negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(362)<org.joda.time.Months: org.joda.time.Months negated()>"->"<java.lang.Object: void <clinit>()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(73)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter getDefault()>"
    "(73)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter getDefault()>"->"<java.util.Locale: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"
    "(73)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter getDefault()>"->"(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "(73)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter getDefault()>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(73)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter getDefault()>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"->"<java.util.Locale: void <clinit>()>";
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"->"(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(85)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased()>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "<java.util.ResourceBundle: void <clinit>()>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>";
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>"
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(217)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildWordBased(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.String: void <clinit>()>";
    "(341)<org.joda.time.format.PeriodFormat: java.lang.String[] retrieveVariants(java.util.ResourceBundle)>"->"<java.lang.Object: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "<java.lang.Math: double log(double)>"
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Math: double log(double)>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(31)<org.joda.time.format.FormatUtils: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Math: double log(double)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,long,int)>"
    "(125)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,long,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"
    "(125)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,long,int)>"->"(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>";
    "(125)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<java.lang.Long: java.lang.String toString(long)>"
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Math: double log(double)>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Long: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Long: void <clinit>()>";
    "(143)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Math: double log(double)>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Math: double log(double)>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Long: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Long: void <clinit>()>";
    "(239)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.Object: void <clinit>()>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>";
    "(325)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,long)>"->"<java.lang.Object: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Long: void <clinit>()>";
    "(340)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,long)>"->"<java.lang.Object: void <clinit>()>";
    "(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>"
    "(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"<java.lang.Object: void <clinit>()>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"<java.lang.Long: void <clinit>()>";
    "(394)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,long)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: double log(double)>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Math: void <clinit>()>";
    "(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"
    "(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "<java.lang.Math: int min(int,int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Boolean: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <clinit>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "<java.lang.Math: long abs(long)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "<java.lang.Math: int max(int,int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(407)<org.joda.time.format.FormatUtils: int calculateDigitCount(long)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(51)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(275)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: long abs(long)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(182)<org.joda.time.format.FormatUtils: void writePaddedInteger(java.io.Writer,int,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(359)<org.joda.time.format.FormatUtils: void writeUnpaddedInteger(java.io.Writer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: int min(int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: int min(int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: int min(int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: int min(int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: int min(int,int)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Math: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"
    "<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>";
    "<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>"
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"(53)<org.joda.time.format.PeriodFormat: void <clinit>()>";
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>";
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: void <clinit>()>";
    "<java.lang.Character: char toLowerCase(char)>"
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toLowerCase(char)>";
    "<java.lang.Character: char toUpperCase(char)>"
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"
    "(72)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$0(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(72)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$0(org.joda.time.format.DateTimeParserBucket)>";
    "(80)<org.joda.time.format.DateTimeParserBucket: int access$3(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(80)<org.joda.time.format.DateTimeParserBucket: int access$3(org.joda.time.format.DateTimeParserBucket)>";
    "(78)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$2(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(78)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$2(org.joda.time.format.DateTimeParserBucket)>";
    "(74)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$1(org.joda.time.format.DateTimeParserBucket)>"
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"(74)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$1(org.joda.time.format.DateTimeParserBucket)>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"
    "(72)<org.joda.time.format.DateTimeParserBucket: void access$4(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(72)<org.joda.time.format.DateTimeParserBucket: void access$4(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>";
    "(80)<org.joda.time.format.DateTimeParserBucket: void access$8(org.joda.time.format.DateTimeParserBucket,int)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(80)<org.joda.time.format.DateTimeParserBucket: void access$8(org.joda.time.format.DateTimeParserBucket,int)>";
    "(81)<org.joda.time.format.DateTimeParserBucket: void access$7(org.joda.time.format.DateTimeParserBucket,boolean)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(81)<org.joda.time.format.DateTimeParserBucket: void access$7(org.joda.time.format.DateTimeParserBucket,boolean)>";
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(80)<org.joda.time.format.DateTimeParserBucket: int access$3(org.joda.time.format.DateTimeParserBucket)>";
    "(78)<org.joda.time.format.DateTimeParserBucket: void access$6(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(78)<org.joda.time.format.DateTimeParserBucket: void access$6(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>";
    "(74)<org.joda.time.format.DateTimeParserBucket: void access$5(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>"
    "(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>"->"(74)<org.joda.time.format.DateTimeParserBucket: void access$5(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"<java.lang.Object: void <clinit>()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <clinit>()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.lang.Object: void <clinit>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(417)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])>"
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"
    "(417)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(417)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>";
    "(1919)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$1(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(1919)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter access$1(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "(1921)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$0(org.joda.time.format.PeriodFormatterBuilder$Separator)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(1921)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser access$0(org.joda.time.format.PeriodFormatterBuilder$Separator)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$0()>"
    "(91)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$0()>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$0()>"->"<java.lang.Object: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "<java.util.Collections: void reverse(java.util.List)>"
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void reverse(java.util.List)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.Collections: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <clinit>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(132)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimePrinter toPrinter()>"
    "(37)<org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>"
    "(132)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimePrinter toPrinter()>"->"(37)<org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "(239)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter)>"
    "(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"
    "(239)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter)>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"
    "(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(277)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"
    "(277)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(277)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(649)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int,int)>"
    "(649)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(649)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int,int)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(649)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfDay(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"<java.lang.Object: void <clinit>()>";
    "(676)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)>"
    "(676)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(676)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(676)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"<java.lang.Object: void <clinit>()>";
    "(696)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)>"
    "(696)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(696)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(696)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"<java.lang.Object: void <clinit>()>";
    "(716)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)>"
    "(716)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(716)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(716)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"<java.lang.Object: void <clinit>()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"<java.lang.Object: void <clinit>()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"<java.lang.Object: void <clinit>()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"<java.lang.Object: void <clinit>()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(934)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int,int)>"
    "(934)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(934)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int,int)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(934)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfCentury(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"<java.lang.Object: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"<java.lang.Object: void <clinit>()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"<java.lang.Object: void <clinit>()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"<java.lang.Object: void <clinit>()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"<java.lang.Object: void <clinit>()>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"<java.lang.Object: void <clinit>()>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"<java.lang.Object: void <clinit>()>";
    "(1133)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>"
    "(1133)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(384)<org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"
    "(1133)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>"->"(384)<org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>";
    "(1133)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: void <clinit>()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toLowerCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Character: char toUpperCase(char)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.String: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.String: void <clinit>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.util.Locale: void <clinit>()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.format.DateTimeParserBucket: long parseMillis(org.joda.time.format.DateTimeParser,java.lang.CharSequence)>"
    "(174)<org.joda.time.format.DateTimeParserBucket: long parseMillis(org.joda.time.format.DateTimeParser,java.lang.CharSequence)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(247)<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>"
    "(247)<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>"->"<java.lang.Integer: void <clinit>()>";
    "(247)<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(247)<org.joda.time.format.DateTimeParserBucket: void setOffset(int)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void <clinit>()>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"<java.lang.Object: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: void <clinit>()>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],int,int)>"
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.util.Arrays: void sort(java.lang.Object[],int,int)>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"<java.lang.Object: void <clinit>()>";
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: java.lang.String toString(long)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Integer: java.lang.String toString(int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Long: void <clinit>()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: int max(int,int)>";
    "<java.util.Collections: void sort(java.util.List)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void sort(java.util.List)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(416)<org.joda.time.DateTimeZone: java.util.Set getAvailableIDs()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Math: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>"->"<java.lang.Object: void <clinit>()>";
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>"->"<java.lang.Object: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()>"
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()>"->"(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>";
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()>"->"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>";
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()>"->"<java.lang.System: void <clinit>()>";
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId valueOf(java.lang.String)>"
    "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>"
    "(1)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>";
    "(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.Object: void <clinit>()>";
    "(497)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateParser()>"
    "(497)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1317)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2()>"
    "(497)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1317)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2()>";
    "(497)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1318)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3()>"
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1318)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3()>";
    "(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(534)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateElementParser()>"
    "(534)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1314)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4()>"
    "(534)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1314)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4()>";
    "(534)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1319)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$5()>"
    "(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1319)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$5()>";
    "(555)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1320)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$6()>"
    "(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1320)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$6()>";
    "(577)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(596)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeElementParser()>"
    "(596)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1316)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$7()>"
    "(596)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1316)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$7()>";
    "(596)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1321)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$8()>"
    "(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1321)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$8()>";
    "(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1322)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$9()>"
    "(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1322)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$9()>";
    "(649)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1323)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$10()>"
    "(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1323)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$10()>";
    "(676)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"
    "(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>"->"(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1283)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$11()>"
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"(1283)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$11()>";
    "(707)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(723)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeNoMillis()>"
    "(723)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1285)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$12()>"
    "(723)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1285)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$12()>";
    "(723)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1286)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$13()>"
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"(1286)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$13()>";
    "(740)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"
    "(757)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1287)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$14()>"
    "(757)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1287)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$14()>";
    "(757)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1288)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$15()>"
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1288)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$15()>";
    "(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(789)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"
    "(789)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1289)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$16()>"
    "(789)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1289)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$16()>";
    "(789)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(803)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDate()>"
    "(803)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1294)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$17()>"
    "(803)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1294)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$17()>";
    "(803)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(820)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"
    "(820)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1296)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$18()>"
    "(820)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1296)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$18()>";
    "(820)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(837)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"
    "(837)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1297)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$19()>"
    "(837)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1297)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$19()>";
    "(837)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1269)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$20()>"
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"(1269)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$20()>";
    "(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(866)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTime()>"
    "(866)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1291)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$21()>"
    "(866)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1291)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$21()>";
    "(866)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(882)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"
    "(882)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1293)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$22()>"
    "(882)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1293)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$22()>";
    "(882)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(895)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDate()>"
    "(895)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1298)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$23()>"
    "(895)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDate()>"->"(1298)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$23()>";
    "(895)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(911)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTime()>"
    "(911)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1300)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$24()>"
    "(911)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1300)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$24()>";
    "(911)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(926)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"
    "(926)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1301)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$25()>"
    "(926)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1301)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$25()>";
    "(926)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(942)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTime()>"
    "(942)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1302)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$26()>"
    "(942)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1302)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$26()>";
    "(942)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(958)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"
    "(958)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1303)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$27()>"
    "(958)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1303)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$27()>";
    "(958)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTime()>"
    "(973)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1304)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$28()>"
    "(973)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1304)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$28()>";
    "(973)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(988)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"
    "(988)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1305)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$29()>"
    "(988)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1305)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$29()>";
    "(988)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1001)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"
    "(1001)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1306)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$30()>"
    "(1001)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(1306)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$30()>";
    "(1001)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1017)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"
    "(1017)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1308)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$31()>"
    "(1017)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1308)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$31()>";
    "(1017)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1033)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"
    "(1033)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1309)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$32()>"
    "(1033)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1309)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$32()>";
    "(1033)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1045)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDate()>"
    "(1045)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1310)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$33()>"
    "(1045)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(1310)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$33()>";
    "(1045)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1060)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"
    "(1060)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1312)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$34()>"
    "(1060)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1312)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$34()>";
    "(1060)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1075)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"
    "(1075)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1313)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$35()>"
    "(1075)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1313)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$35()>";
    "(1075)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1085)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter year()>"
    "(1085)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter year()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1085)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter year()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>";
    "(1085)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter year()>"->"<java.lang.Object: void <clinit>()>";
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1263)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$36()>"
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1263)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$36()>";
    "(1095)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1265)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$37()>"
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1265)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$37()>";
    "(1105)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1114)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyear()>"
    "(1114)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyear()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1114)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyear()>"->"(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>";
    "(1114)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(1124)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeek()>"
    "(1124)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1267)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$38()>"
    "(1124)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1267)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$38()>";
    "(1124)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1134)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"
    "(1134)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1134)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1269)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$20()>";
    "(1134)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1255)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$39()>"
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"(1255)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$39()>";
    "(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>"->"<java.lang.Object: void <clinit>()>";
    "(1153)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinute()>"
    "(1153)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1271)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$40()>"
    "(1153)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1271)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$40()>";
    "(1153)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1163)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"
    "(1163)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1273)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$41()>"
    "(1163)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1273)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$41()>";
    "(1163)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1175)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"
    "(1175)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1274)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$42()>"
    "(1175)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1274)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$42()>";
    "(1175)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1275)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$43()>"
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1275)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$43()>";
    "(1187)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1197)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHour()>"
    "(1197)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1276)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$44()>"
    "(1197)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1276)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$44()>";
    "(1197)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1207)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinute()>"
    "(1207)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1278)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$45()>"
    "(1207)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1278)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$45()>";
    "(1207)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1218)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"
    "(1218)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1279)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$46()>"
    "(1218)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1279)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$46()>";
    "(1218)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1230)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"
    "(1230)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1280)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$47()>"
    "(1230)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1280)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$47()>";
    "(1230)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1242)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"
    "(1242)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1281)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$48()>"
    "(1242)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1281)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$48()>";
    "(1242)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"<java.lang.Object: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(850)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekDate()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1143)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hour()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"<java.lang.Object: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"<java.lang.Object: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"<java.lang.Object: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"<java.lang.Object: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1248)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$0()>"->"<java.lang.Object: void <clinit>()>";
    "(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1251)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$1()>"->"<java.lang.Object: void <clinit>()>";
    "(1317)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1317)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$2()>"->"<java.lang.Object: void <clinit>()>";
    "(1318)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1318)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$3()>"->"<java.lang.Object: void <clinit>()>";
    "(1314)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1314)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$4()>"->"<java.lang.Object: void <clinit>()>";
    "(1319)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$5()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1319)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$5()>"->"<java.lang.Object: void <clinit>()>";
    "(1320)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$6()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1320)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$6()>"->"<java.lang.Object: void <clinit>()>";
    "(1316)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$7()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1316)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$7()>"->"<java.lang.Object: void <clinit>()>";
    "(1321)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$8()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1321)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$8()>"->"<java.lang.Object: void <clinit>()>";
    "(1322)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$9()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1322)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$9()>"->"<java.lang.Object: void <clinit>()>";
    "(1323)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$10()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1323)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$10()>"->"<java.lang.Object: void <clinit>()>";
    "(1283)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$11()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1283)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$11()>"->"<java.lang.Object: void <clinit>()>";
    "(1285)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$12()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1285)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$12()>"->"<java.lang.Object: void <clinit>()>";
    "(1286)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$13()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1286)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$13()>"->"<java.lang.Object: void <clinit>()>";
    "(1287)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$14()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1287)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$14()>"->"<java.lang.Object: void <clinit>()>";
    "(1288)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$15()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1288)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$15()>"->"<java.lang.Object: void <clinit>()>";
    "(1289)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$16()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1289)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$16()>"->"<java.lang.Object: void <clinit>()>";
    "(1294)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$17()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1294)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$17()>"->"<java.lang.Object: void <clinit>()>";
    "(1296)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$18()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1296)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$18()>"->"<java.lang.Object: void <clinit>()>";
    "(1297)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$19()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1297)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$19()>"->"<java.lang.Object: void <clinit>()>";
    "(1269)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$20()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1269)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$20()>"->"<java.lang.Object: void <clinit>()>";
    "(1291)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$21()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1291)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$21()>"->"<java.lang.Object: void <clinit>()>";
    "(1293)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$22()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1293)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$22()>"->"<java.lang.Object: void <clinit>()>";
    "(1298)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$23()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1298)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$23()>"->"<java.lang.Object: void <clinit>()>";
    "(1300)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$24()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1300)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$24()>"->"<java.lang.Object: void <clinit>()>";
    "(1301)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$25()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1301)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$25()>"->"<java.lang.Object: void <clinit>()>";
    "(1302)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$26()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1302)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$26()>"->"<java.lang.Object: void <clinit>()>";
    "(1303)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$27()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1303)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$27()>"->"<java.lang.Object: void <clinit>()>";
    "(1304)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$28()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1304)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$28()>"->"<java.lang.Object: void <clinit>()>";
    "(1305)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$29()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1305)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$29()>"->"<java.lang.Object: void <clinit>()>";
    "(1306)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$30()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1306)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$30()>"->"<java.lang.Object: void <clinit>()>";
    "(1308)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$31()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1308)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$31()>"->"<java.lang.Object: void <clinit>()>";
    "(1309)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$32()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1309)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$32()>"->"<java.lang.Object: void <clinit>()>";
    "(1310)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$33()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1310)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$33()>"->"<java.lang.Object: void <clinit>()>";
    "(1312)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$34()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1312)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$34()>"->"<java.lang.Object: void <clinit>()>";
    "(1313)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$35()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1313)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$35()>"->"<java.lang.Object: void <clinit>()>";
    "(1263)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$36()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1263)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$36()>"->"<java.lang.Object: void <clinit>()>";
    "(1265)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$37()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1265)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$37()>"->"<java.lang.Object: void <clinit>()>";
    "(1267)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$38()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1267)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$38()>"->"<java.lang.Object: void <clinit>()>";
    "(1255)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$39()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1255)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$39()>"->"<java.lang.Object: void <clinit>()>";
    "(1271)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$40()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1271)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$40()>"->"<java.lang.Object: void <clinit>()>";
    "(1273)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$41()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1273)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$41()>"->"<java.lang.Object: void <clinit>()>";
    "(1274)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$42()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1274)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$42()>"->"<java.lang.Object: void <clinit>()>";
    "(1275)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$43()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1275)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$43()>"->"<java.lang.Object: void <clinit>()>";
    "(1276)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$44()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1276)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$44()>"->"<java.lang.Object: void <clinit>()>";
    "(1278)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$45()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1278)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$45()>"->"<java.lang.Object: void <clinit>()>";
    "(1279)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$46()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1279)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$46()>"->"<java.lang.Object: void <clinit>()>";
    "(1280)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$47()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1280)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$47()>"->"<java.lang.Object: void <clinit>()>";
    "(1281)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$48()>"->"(1248)<org.joda.time.format.ISODateTimeFormat$Constants: void <clinit>()>";
    "(1281)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter access$48()>"->"<java.lang.Object: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <clinit>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"
    "(118)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"->"(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>";
    "(118)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>"->"(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>";
    "(176)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>"
    "(176)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>"->"(37)<org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>";
    "(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"
    "(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>"->"(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>";
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(439)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(int)>"
    "(439)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(int)>"->"<java.lang.Integer: void <clinit>()>";
    "(439)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(439)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(int)>"->"<java.lang.Object: void <clinit>()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Object: void <clinit>()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: void <clinit>()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Math: int min(int,int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>"
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>";
    "(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(201)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>"
    "(201)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"
    "(201)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>"->"(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>";
    "(201)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forStyle(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(237)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDate()>"
    "(237)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDate()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"
    "(237)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDate()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(237)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDate()>"->"<java.lang.Object: void <clinit>()>";
    "(249)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortTime()>"
    "(249)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(249)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(249)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortTime()>"->"<java.lang.Object: void <clinit>()>";
    "(261)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDateTime()>"
    "(261)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDateTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(261)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDateTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(261)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter shortDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDate()>"
    "(274)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDate()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(274)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDate()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(274)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDate()>"->"<java.lang.Object: void <clinit>()>";
    "(286)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumTime()>"
    "(286)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(286)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(286)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumTime()>"->"<java.lang.Object: void <clinit>()>";
    "(298)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDateTime()>"
    "(298)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDateTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(298)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDateTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(298)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter mediumDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(311)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDate()>"
    "(311)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDate()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(311)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDate()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(311)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDate()>"->"<java.lang.Object: void <clinit>()>";
    "(323)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longTime()>"
    "(323)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(323)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(323)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longTime()>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDateTime()>"
    "(335)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDateTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(335)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDateTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(335)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter longDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDate()>"
    "(348)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDate()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(348)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDate()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(348)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDate()>"->"<java.lang.Object: void <clinit>()>";
    "(360)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullTime()>"
    "(360)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(360)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(360)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullTime()>"->"<java.lang.Object: void <clinit>()>";
    "(372)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDateTime()>"
    "(372)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDateTime()>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(372)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDateTime()>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(372)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter fullDateTime()>"->"<java.lang.Object: void <clinit>()>";
    "(384)<org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"
    "(384)<org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>";
    "(384)<org.joda.time.format.DateTimeFormat: void appendPatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>";
    "(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>"
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>"
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>";
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>";
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>"->"(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>";
    "(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"
    "<java.util.regex.Pattern: void <clinit>()>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: void <clinit>()>";
    "<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$0()>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$0()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Arrays: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: void <clinit>()>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.lang.Object: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashSet: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.String: void <clinit>()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Math: int min(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(31)<org.joda.time.format.FormatUtils: void <clinit>()>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>";
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.String: void <clinit>()>";
    "(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Years: void <clinit>()>"
    "(45)<org.joda.time.Years: void <clinit>()>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(102)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(139)<org.joda.time.Years: org.joda.time.Years yearsIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(184)<org.joda.time.Years: java.lang.Object readResolve()>"
    "(184)<org.joda.time.Years: java.lang.Object readResolve()>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(184)<org.joda.time.Years: java.lang.Object readResolve()>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(184)<org.joda.time.Years: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(194)<org.joda.time.Years: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>";
    "(203)<org.joda.time.Years: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(227)<org.joda.time.Years: org.joda.time.Years plus(int)>"
    "(227)<org.joda.time.Years: org.joda.time.Years plus(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(227)<org.joda.time.Years: org.joda.time.Years plus(int)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(227)<org.joda.time.Years: org.joda.time.Years plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(227)<org.joda.time.Years: org.joda.time.Years plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(260)<org.joda.time.Years: org.joda.time.Years minus(int)>"
    "(260)<org.joda.time.Years: org.joda.time.Years minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(290)<org.joda.time.Years: org.joda.time.Years multipliedBy(int)>"
    "(290)<org.joda.time.Years: org.joda.time.Years multipliedBy(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(290)<org.joda.time.Years: org.joda.time.Years multipliedBy(int)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(290)<org.joda.time.Years: org.joda.time.Years multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(290)<org.joda.time.Years: org.joda.time.Years multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(304)<org.joda.time.Years: org.joda.time.Years dividedBy(int)>"
    "(304)<org.joda.time.Years: org.joda.time.Years dividedBy(int)>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(304)<org.joda.time.Years: org.joda.time.Years dividedBy(int)>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(304)<org.joda.time.Years: org.joda.time.Years dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(318)<org.joda.time.Years: org.joda.time.Years negated()>"
    "(318)<org.joda.time.Years: org.joda.time.Years negated()>"->"(45)<org.joda.time.Years: void <clinit>()>";
    "(318)<org.joda.time.Years: org.joda.time.Years negated()>"->"(72)<org.joda.time.Years: org.joda.time.Years years(int)>";
    "(318)<org.joda.time.Years: org.joda.time.Years negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(318)<org.joda.time.Years: org.joda.time.Years negated()>"->"<java.lang.Object: void <clinit>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(65)<org.joda.time.Period: void <clinit>()>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(92)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>"
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"->"(92)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>";
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"<java.lang.Object: void <clinit>()>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.Period: void <init>(int,int,int,int)>"
    "(312)<org.joda.time.Period: void <init>(int,int,int,int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(312)<org.joda.time.Period: void <init>(int,int,int,int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(312)<org.joda.time.Period: void <init>(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(329)<org.joda.time.Period: void <init>(int,int,int,int,int,int,int,int)>"
    "(329)<org.joda.time.Period: void <init>(int,int,int,int,int,int,int,int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(329)<org.joda.time.Period: void <init>(int,int,int,int,int,int,int,int)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(329)<org.joda.time.Period: void <init>(int,int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.Period: int getYears()>"
    "(757)<org.joda.time.Period: int getYears()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(757)<org.joda.time.Period: int getYears()>"->"<java.lang.Object: void <clinit>()>";
    "(766)<org.joda.time.Period: int getMonths()>"
    "(766)<org.joda.time.Period: int getMonths()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(766)<org.joda.time.Period: int getMonths()>"->"<java.lang.Object: void <clinit>()>";
    "(775)<org.joda.time.Period: int getWeeks()>"
    "(775)<org.joda.time.Period: int getWeeks()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(775)<org.joda.time.Period: int getWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(784)<org.joda.time.Period: int getDays()>"
    "(784)<org.joda.time.Period: int getDays()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(784)<org.joda.time.Period: int getDays()>"->"<java.lang.Object: void <clinit>()>";
    "(794)<org.joda.time.Period: int getHours()>"
    "(794)<org.joda.time.Period: int getHours()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(794)<org.joda.time.Period: int getHours()>"->"<java.lang.Object: void <clinit>()>";
    "(803)<org.joda.time.Period: int getMinutes()>"
    "(803)<org.joda.time.Period: int getMinutes()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(803)<org.joda.time.Period: int getMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(812)<org.joda.time.Period: int getSeconds()>"
    "(812)<org.joda.time.Period: int getSeconds()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(812)<org.joda.time.Period: int getSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(821)<org.joda.time.Period: int getMillis()>"
    "(821)<org.joda.time.Period: int getMillis()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(821)<org.joda.time.Period: int getMillis()>"->"<java.lang.Object: void <clinit>()>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>"
    "(854)<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(854)<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(854)<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.Object: void <clinit>()>";
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1396)<org.joda.time.Period: org.joda.time.Weeks toStandardWeeks()>"
    "(1396)<org.joda.time.Period: org.joda.time.Weeks toStandardWeeks()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(1396)<org.joda.time.Period: org.joda.time.Weeks toStandardWeeks()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(1396)<org.joda.time.Period: org.joda.time.Weeks toStandardWeeks()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1396)<org.joda.time.Period: org.joda.time.Weeks toStandardWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1426)<org.joda.time.Period: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1457)<org.joda.time.Period: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1488)<org.joda.time.Period: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(1519)<org.joda.time.Period: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(1549)<org.joda.time.Period: org.joda.time.Duration toStandardDuration()>"
    "(1549)<org.joda.time.Period: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(1549)<org.joda.time.Period: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(1601)<org.joda.time.Period: org.joda.time.Period normalizedStandard()>"
    "(1601)<org.joda.time.Period: org.joda.time.Period normalizedStandard()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(1601)<org.joda.time.Period: org.joda.time.Period normalizedStandard()>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(1601)<org.joda.time.Period: org.joda.time.Period normalizedStandard()>"->"<java.lang.Object: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(302)<org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(57)<org.joda.time.base.BasePeriod: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(65)<org.joda.time.Period: void <clinit>()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"<java.lang.Object: void <clinit>()>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(101)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(137)<org.joda.time.Minutes: org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(165)<org.joda.time.Minutes: org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)>"
    "(165)<org.joda.time.Minutes: org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(165)<org.joda.time.Minutes: org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(165)<org.joda.time.Minutes: org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)>"->"(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>";
    "(165)<org.joda.time.Minutes: org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.Minutes: java.lang.Object readResolve()>"
    "(207)<org.joda.time.Minutes: java.lang.Object readResolve()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(207)<org.joda.time.Minutes: java.lang.Object readResolve()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(207)<org.joda.time.Minutes: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(217)<org.joda.time.Minutes: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>";
    "(226)<org.joda.time.Minutes: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(244)<org.joda.time.Minutes: org.joda.time.Weeks toStandardWeeks()>"
    "(244)<org.joda.time.Minutes: org.joda.time.Weeks toStandardWeeks()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(244)<org.joda.time.Minutes: org.joda.time.Weeks toStandardWeeks()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(244)<org.joda.time.Minutes: org.joda.time.Weeks toStandardWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(261)<org.joda.time.Minutes: org.joda.time.Days toStandardDays()>"
    "(261)<org.joda.time.Minutes: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(261)<org.joda.time.Minutes: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(261)<org.joda.time.Minutes: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(277)<org.joda.time.Minutes: org.joda.time.Hours toStandardHours()>"
    "(277)<org.joda.time.Minutes: org.joda.time.Hours toStandardHours()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(277)<org.joda.time.Minutes: org.joda.time.Hours toStandardHours()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(277)<org.joda.time.Minutes: org.joda.time.Hours toStandardHours()>"->"<java.lang.Object: void <clinit>()>";
    "(294)<org.joda.time.Minutes: org.joda.time.Seconds toStandardSeconds()>"
    "(294)<org.joda.time.Minutes: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(294)<org.joda.time.Minutes: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(294)<org.joda.time.Minutes: org.joda.time.Seconds toStandardSeconds()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(294)<org.joda.time.Minutes: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(312)<org.joda.time.Minutes: org.joda.time.Duration toStandardDuration()>"
    "(312)<org.joda.time.Minutes: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(312)<org.joda.time.Minutes: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(337)<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>"
    "(337)<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(337)<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(337)<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(337)<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(370)<org.joda.time.Minutes: org.joda.time.Minutes minus(int)>"
    "(370)<org.joda.time.Minutes: org.joda.time.Minutes minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(400)<org.joda.time.Minutes: org.joda.time.Minutes multipliedBy(int)>"
    "(400)<org.joda.time.Minutes: org.joda.time.Minutes multipliedBy(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(400)<org.joda.time.Minutes: org.joda.time.Minutes multipliedBy(int)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(400)<org.joda.time.Minutes: org.joda.time.Minutes multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(400)<org.joda.time.Minutes: org.joda.time.Minutes multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(414)<org.joda.time.Minutes: org.joda.time.Minutes dividedBy(int)>"
    "(414)<org.joda.time.Minutes: org.joda.time.Minutes dividedBy(int)>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(414)<org.joda.time.Minutes: org.joda.time.Minutes dividedBy(int)>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(414)<org.joda.time.Minutes: org.joda.time.Minutes dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(428)<org.joda.time.Minutes: org.joda.time.Minutes negated()>"
    "(428)<org.joda.time.Minutes: org.joda.time.Minutes negated()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(428)<org.joda.time.Minutes: org.joda.time.Minutes negated()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(428)<org.joda.time.Minutes: org.joda.time.Minutes negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(428)<org.joda.time.Minutes: org.joda.time.Minutes negated()>"->"<java.lang.Object: void <clinit>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(70)<org.joda.time.UTCDateTimeZone: java.util.TimeZone toTimeZone()>"
    "(70)<org.joda.time.UTCDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.SimpleTimeZone: void <clinit>()>";
    "(70)<org.joda.time.UTCDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.UTCDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.TimeZone: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.LocalDate: org.joda.time.LocalDate now()>"
    "(124)<org.joda.time.LocalDate: org.joda.time.LocalDate now()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(124)<org.joda.time.LocalDate: org.joda.time.LocalDate now()>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.DateTimeZone)>"
    "(136)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.DateTimeZone)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(136)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.Chronology)>"
    "(151)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.Chronology)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(151)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(168)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String)>"
    "(168)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(179)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(168)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String)>"->"(179)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(168)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(168)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.lang.Object: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.GregorianCalendar: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.lang.Object: void <clinit>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Calendar: void <clinit>()>";
    "(267)<org.joda.time.LocalDate: void <init>()>"
    "(267)<org.joda.time.LocalDate: void <init>()>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(267)<org.joda.time.LocalDate: void <init>()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(267)<org.joda.time.LocalDate: void <init>()>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(267)<org.joda.time.LocalDate: void <init>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(267)<org.joda.time.LocalDate: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>"
    "(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(308)<org.joda.time.LocalDate: void <init>(long)>"
    "(308)<org.joda.time.LocalDate: void <init>(long)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(308)<org.joda.time.LocalDate: void <init>(long)>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(308)<org.joda.time.LocalDate: void <init>(long)>"->"<java.lang.Object: void <clinit>()>";
    "(322)<org.joda.time.LocalDate: void <init>(long,org.joda.time.DateTimeZone)>"
    "(322)<org.joda.time.LocalDate: void <init>(long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(322)<org.joda.time.LocalDate: void <init>(long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(322)<org.joda.time.LocalDate: void <init>(long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(517)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.lang.Object: void <clinit>()>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void <clinit>()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.TimeZone: java.util.TimeZone getDefault()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.TimeZone: void <clinit>()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"<java.lang.Object: void <clinit>()>";
    "(1160)<org.joda.time.LocalDate: org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(1160)<org.joda.time.LocalDate: org.joda.time.LocalDate withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(1842)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String)>"
    "(1842)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(1842)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(1842)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(150)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DurationFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"
    "(150)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DurationFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(171)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>"
    "(171)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>"->"(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>";
    "(207)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DurationFieldType,java.lang.String)>"
    "(207)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DurationFieldType,java.lang.String)>"->"(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>";
    "(225)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.String)>"
    "(225)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.String)>"->"(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>";
    "(288)<org.joda.time.IllegalFieldValueException: java.lang.String getIllegalValueAsString()>"
    "(288)<org.joda.time.IllegalFieldValueException: java.lang.String getIllegalValueAsString()>"->"<java.lang.String: void <clinit>()>";
    "(288)<org.joda.time.IllegalFieldValueException: java.lang.String getIllegalValueAsString()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(288)<org.joda.time.IllegalFieldValueException: java.lang.String getIllegalValueAsString()>"->"<java.lang.Object: void <clinit>()>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"<java.lang.Object: void <clinit>()>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(121)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(68)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(157)<org.joda.time.Hours: org.joda.time.Hours hoursIn(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(185)<org.joda.time.Hours: org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)>"
    "(185)<org.joda.time.Hours: org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(185)<org.joda.time.Hours: org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(185)<org.joda.time.Hours: org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)>"->"(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>";
    "(185)<org.joda.time.Hours: org.joda.time.Hours standardHoursIn(org.joda.time.ReadablePeriod)>"->"<java.lang.Object: void <clinit>()>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(227)<org.joda.time.Hours: java.lang.Object readResolve()>"
    "(227)<org.joda.time.Hours: java.lang.Object readResolve()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(227)<org.joda.time.Hours: java.lang.Object readResolve()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(227)<org.joda.time.Hours: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(237)<org.joda.time.Hours: org.joda.time.DurationFieldType getFieldType()>"->"<java.lang.Object: void <clinit>()>";
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>";
    "(246)<org.joda.time.Hours: org.joda.time.PeriodType getPeriodType()>"->"<java.lang.Object: void <clinit>()>";
    "(264)<org.joda.time.Hours: org.joda.time.Weeks toStandardWeeks()>"
    "(264)<org.joda.time.Hours: org.joda.time.Weeks toStandardWeeks()>"->"(45)<org.joda.time.Weeks: void <clinit>()>";
    "(264)<org.joda.time.Hours: org.joda.time.Weeks toStandardWeeks()>"->"(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>";
    "(264)<org.joda.time.Hours: org.joda.time.Weeks toStandardWeeks()>"->"<java.lang.Object: void <clinit>()>";
    "(280)<org.joda.time.Hours: org.joda.time.Days toStandardDays()>"
    "(280)<org.joda.time.Hours: org.joda.time.Days toStandardDays()>"->"(45)<org.joda.time.Days: void <clinit>()>";
    "(280)<org.joda.time.Hours: org.joda.time.Days toStandardDays()>"->"(80)<org.joda.time.Days: org.joda.time.Days days(int)>";
    "(280)<org.joda.time.Hours: org.joda.time.Days toStandardDays()>"->"<java.lang.Object: void <clinit>()>";
    "(296)<org.joda.time.Hours: org.joda.time.Minutes toStandardMinutes()>"
    "(296)<org.joda.time.Hours: org.joda.time.Minutes toStandardMinutes()>"->"(45)<org.joda.time.Minutes: void <clinit>()>";
    "(296)<org.joda.time.Hours: org.joda.time.Minutes toStandardMinutes()>"->"(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>";
    "(296)<org.joda.time.Hours: org.joda.time.Minutes toStandardMinutes()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(296)<org.joda.time.Hours: org.joda.time.Minutes toStandardMinutes()>"->"<java.lang.Object: void <clinit>()>";
    "(313)<org.joda.time.Hours: org.joda.time.Seconds toStandardSeconds()>"
    "(313)<org.joda.time.Hours: org.joda.time.Seconds toStandardSeconds()>"->"(45)<org.joda.time.Seconds: void <clinit>()>";
    "(313)<org.joda.time.Hours: org.joda.time.Seconds toStandardSeconds()>"->"(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>";
    "(313)<org.joda.time.Hours: org.joda.time.Seconds toStandardSeconds()>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(313)<org.joda.time.Hours: org.joda.time.Seconds toStandardSeconds()>"->"<java.lang.Object: void <clinit>()>";
    "(331)<org.joda.time.Hours: org.joda.time.Duration toStandardDuration()>"
    "(331)<org.joda.time.Hours: org.joda.time.Duration toStandardDuration()>"->"(45)<org.joda.time.Duration: void <clinit>()>";
    "(331)<org.joda.time.Hours: org.joda.time.Duration toStandardDuration()>"->"<java.lang.Object: void <clinit>()>";
    "(356)<org.joda.time.Hours: org.joda.time.Hours plus(int)>"
    "(356)<org.joda.time.Hours: org.joda.time.Hours plus(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(356)<org.joda.time.Hours: org.joda.time.Hours plus(int)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(356)<org.joda.time.Hours: org.joda.time.Hours plus(int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(356)<org.joda.time.Hours: org.joda.time.Hours plus(int)>"->"<java.lang.Object: void <clinit>()>";
    "(389)<org.joda.time.Hours: org.joda.time.Hours minus(int)>"
    "(389)<org.joda.time.Hours: org.joda.time.Hours minus(int)>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(419)<org.joda.time.Hours: org.joda.time.Hours multipliedBy(int)>"
    "(419)<org.joda.time.Hours: org.joda.time.Hours multipliedBy(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(419)<org.joda.time.Hours: org.joda.time.Hours multipliedBy(int)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(419)<org.joda.time.Hours: org.joda.time.Hours multipliedBy(int)>"->"(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>";
    "(419)<org.joda.time.Hours: org.joda.time.Hours multipliedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(433)<org.joda.time.Hours: org.joda.time.Hours dividedBy(int)>"
    "(433)<org.joda.time.Hours: org.joda.time.Hours dividedBy(int)>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(433)<org.joda.time.Hours: org.joda.time.Hours dividedBy(int)>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(433)<org.joda.time.Hours: org.joda.time.Hours dividedBy(int)>"->"<java.lang.Object: void <clinit>()>";
    "(447)<org.joda.time.Hours: org.joda.time.Hours negated()>"
    "(447)<org.joda.time.Hours: org.joda.time.Hours negated()>"->"(45)<org.joda.time.Hours: void <clinit>()>";
    "(447)<org.joda.time.Hours: org.joda.time.Hours negated()>"->"(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>";
    "(447)<org.joda.time.Hours: org.joda.time.Hours negated()>"->"(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>";
    "(447)<org.joda.time.Hours: org.joda.time.Hours negated()>"->"<java.lang.Object: void <clinit>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(177)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>";
    "(149)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String)>"
    "(149)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(160)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"
    "(149)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String)>"->"(160)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>";
    "(302)<org.joda.time.DateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"
    "(302)<org.joda.time.DateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(302)<org.joda.time.DateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(302)<org.joda.time.DateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTime: org.joda.time.DateTime toDateTimeISO()>"
    "(553)<org.joda.time.DateTime: org.joda.time.DateTime toDateTimeISO()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(553)<org.joda.time.DateTime: org.joda.time.DateTime toDateTimeISO()>"->"(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>";
    "(553)<org.joda.time.DateTime: org.joda.time.DateTime toDateTimeISO()>"->"<java.lang.Object: void <clinit>()>";
    "(566)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"
    "(566)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(566)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(566)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(580)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>"
    "(580)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(580)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(580)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(1565)<org.joda.time.DateTime: org.joda.time.YearMonthDay toYearMonthDay()>"
    "(1565)<org.joda.time.DateTime: org.joda.time.YearMonthDay toYearMonthDay()>"->"(72)<org.joda.time.YearMonthDay: void <clinit>()>";
    "(1565)<org.joda.time.DateTime: org.joda.time.YearMonthDay toYearMonthDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1577)<org.joda.time.DateTime: org.joda.time.TimeOfDay toTimeOfDay()>"
    "(1577)<org.joda.time.DateTime: org.joda.time.TimeOfDay toTimeOfDay()>"->"(75)<org.joda.time.TimeOfDay: void <clinit>()>";
    "(1577)<org.joda.time.DateTime: org.joda.time.TimeOfDay toTimeOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(1599)<org.joda.time.DateTime: org.joda.time.LocalDate toLocalDate()>"
    "(1599)<org.joda.time.DateTime: org.joda.time.LocalDate toLocalDate()>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(1599)<org.joda.time.DateTime: org.joda.time.LocalDate toLocalDate()>"->"<java.lang.Object: void <clinit>()>";
    "(1610)<org.joda.time.DateTime: org.joda.time.LocalTime toLocalTime()>"
    "(1610)<org.joda.time.DateTime: org.joda.time.LocalTime toLocalTime()>"->"(84)<org.joda.time.LocalTime: void <clinit>()>";
    "(1610)<org.joda.time.DateTime: org.joda.time.LocalTime toLocalTime()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.BasicGJChronology: int getDaysInYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"<java.lang.Object: void <clinit>()>";
    "(134)<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.BasicGJChronology: long getTotalMillisByYearMonth(int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(552)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(63)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(63)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(63)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(42)<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(74)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(82)<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Object: void <clinit>()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"
    "(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(42)<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"
    "(92)<org.joda.time.chrono.GJYearOfEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>"
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"<java.lang.Object: void <clinit>()>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"<java.lang.Object: void <clinit>()>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"<java.lang.Math: void <clinit>()>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"<java.lang.Math: int max(int,int)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "(114)<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"
    "(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>"
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(562)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(445)<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>"->"(558)<org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(42)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(68)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(80)<org.joda.time.chrono.BasicDayOfMonthDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(47)<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"
    "(81)<org.joda.time.chrono.GJEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(128)<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.DurationField getDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(161)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>"
    "(161)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(161)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(161)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(170)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.lang.Object: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(161)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstanceUTC()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(242)<org.joda.time.chrono.IslamicChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(180)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(46)<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"
    "(59)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>"->"(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>";
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"
    "(68)<org.joda.time.chrono.BasicYearDateTimeField: long add(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(72)<org.joda.time.chrono.BasicYearDateTimeField: long addWrapField(long,int)>"
    "(72)<org.joda.time.chrono.BasicYearDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"
    "(84)<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"
    "(91)<org.joda.time.chrono.BasicYearDateTimeField: long setExtended(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(43)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(93)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"<java.lang.Object: void <clinit>()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(101)<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(88)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstanceUTC()>"
    "(88)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstanceUTC()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(88)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.EthiopicChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(46)<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(133)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(133)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(133)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(133)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(88)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstanceUTC()>"
    "(88)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstanceUTC()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(88)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(88)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(173)<org.joda.time.chrono.CopticChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone)>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>"
    "(85)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(85)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(94)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"(85)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstanceUTC()>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(139)<org.joda.time.chrono.BuddhistChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(79)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.String: void <clinit>()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.String: java.lang.String valueOf(java.lang.Object)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Integer: void <clinit>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstanceUTC()>"
    "(94)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstanceUTC()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(94)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(94)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(94)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstanceUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(103)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(174)<org.joda.time.chrono.JulianChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(113)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(212)<org.joda.time.chrono.JulianChronology: long getDateMidnightMillis(int,int,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(38)<org.joda.time.field.MillisDurationField: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(269)<org.joda.time.chrono.BasicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.Object: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(630)<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(59)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$0()>"
    "(59)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$0()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(59)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$0()>"->"<java.lang.Object: void <clinit>()>";
    "(61)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$1()>"
    "(61)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$1()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(61)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$1()>"->"<java.lang.Object: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(61)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$1()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(59)<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField access$0()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(795)<org.joda.time.chrono.BasicChronology$HalfdayField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>";
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(45)<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"
    "(80)<org.joda.time.chrono.BasicWeekyearDateTimeField: long add(long,long)>"->"(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Math: int abs(int)>";
    "(129)<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: int abs(int)>";
    "<java.lang.Math: float signum(float)>"
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: float signum(float)>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Math: void <clinit>()>";
    "(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: void <clinit>()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Math: long abs(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"<java.lang.Object: void <clinit>()>";
    "(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>"
    "(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>"->"(315)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>";
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"
    "(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(87)<org.joda.time.chrono.StrictChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"
    "(114)<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>"->"(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(89)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.Object: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(160)<org.joda.time.chrono.GregorianChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(122)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstanceUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(138)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>"->"<java.lang.Object: void <clinit>()>";
    "(154)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)>"
    "(154)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(154)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(154)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(172)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(99)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(285)<org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(96)<org.joda.time.LocalDate: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.Object: void <clinit>()>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"<java.lang.Object: void <clinit>()>";
    "(279)<org.joda.time.chrono.GJChronology: java.lang.Object readResolve()>"
    "(279)<org.joda.time.chrono.GJChronology: java.lang.Object readResolve()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(279)<org.joda.time.chrono.GJChronology: java.lang.Object readResolve()>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(279)<org.joda.time.chrono.GJChronology: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"<java.lang.Object: void <clinit>()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"<java.lang.Object: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(108)<org.joda.time.DateTimeZone: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(145)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(773)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(690)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(577)<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"(83)<org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(581)<org.joda.time.chrono.GJChronology: long gregorianToJulianByYear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>"
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(585)<org.joda.time.chrono.GJChronology: long julianToGregorianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"(94)<org.joda.time.chrono.GJChronology: long convertByWeekyear(long,org.joda.time.Chronology,org.joda.time.Chronology)>";
    "(589)<org.joda.time.chrono.GJChronology: long gregorianToJulianByWeekyear(long)>"->"<java.lang.Object: void <clinit>()>";
    "(218)<org.joda.time.chrono.ISOChronology$Stub: java.lang.Object readResolve()>"
    "(218)<org.joda.time.chrono.ISOChronology$Stub: java.lang.Object readResolve()>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(218)<org.joda.time.chrono.ISOChronology$Stub: java.lang.Object readResolve()>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(218)<org.joda.time.chrono.ISOChronology$Stub: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.Locale: java.util.Locale getDefault()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.String: void <clinit>()>";
    "(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>"->"<java.lang.Object: void <clinit>()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: void <clinit>()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String valueOf(int)>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.Object: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(60)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignMonths(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(68)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] realignDaysOfWeek(java.lang.String[])>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Integer: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Integer: void <clinit>()>";
    "(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>"->"<java.lang.Object: void <clinit>()>";
    "(324)<org.joda.time.chrono.BaseChronology: long add(long,long,int)>"
    "(324)<org.joda.time.chrono.BaseChronology: long add(long,long,int)>"->"(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>";
    "(324)<org.joda.time.chrono.BaseChronology: long add(long,long,int)>"->"(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"(105)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>";
    "(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>"->"<java.lang.Object: void <clinit>()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"(164)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>";
    "(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>"->"<java.lang.Object: void <clinit>()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"(177)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>";
    "(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"(114)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>";
    "(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>"->"<java.lang.Object: void <clinit>()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"(186)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>";
    "(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>"->"<java.lang.Object: void <clinit>()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"(199)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>";
    "(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"(123)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>";
    "(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>"->"<java.lang.Object: void <clinit>()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"(208)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>";
    "(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>"->"<java.lang.Object: void <clinit>()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"(221)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfDay()>";
    "(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"(132)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>";
    "(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>"->"<java.lang.Object: void <clinit>()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"(230)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>";
    "(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"(239)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfDay()>";
    "(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"(141)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType halfdays()>";
    "(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>"->"<java.lang.Object: void <clinit>()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"(248)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfHalfday()>";
    "(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"(257)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType clockhourOfHalfday()>";
    "(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"->"<java.lang.Object: void <clinit>()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"(266)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType halfdayOfDay()>";
    "(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>"->"<java.lang.Object: void <clinit>()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"(151)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>";
    "(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>"->"<java.lang.Object: void <clinit>()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"(276)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>";
    "(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>"->"<java.lang.Object: void <clinit>()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"(285)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>";
    "(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>"->"<java.lang.Object: void <clinit>()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"(294)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>";
    "(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"(160)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>";
    "(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>"->"<java.lang.Object: void <clinit>()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"(303)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>";
    "(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"(169)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weekyears()>";
    "(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>"->"<java.lang.Object: void <clinit>()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"(312)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>";
    "(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>"->"<java.lang.Object: void <clinit>()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"(321)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>";
    "(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"(178)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>";
    "(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>"->"<java.lang.Object: void <clinit>()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"(330)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>";
    "(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>"->"<java.lang.Object: void <clinit>()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"(187)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>";
    "(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>"->"<java.lang.Object: void <clinit>()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"(339)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>";
    "(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>"->"<java.lang.Object: void <clinit>()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"(357)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>";
    "(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>"->"<java.lang.Object: void <clinit>()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"(196)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType centuries()>";
    "(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>"->"<java.lang.Object: void <clinit>()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"(366)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>";
    "(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>"->"<java.lang.Object: void <clinit>()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(60)<org.joda.time.DurationFieldType: void <clinit>()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"(205)<org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>";
    "(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>"->"<java.lang.Object: void <clinit>()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"(375)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>";
    "(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(348)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(80)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstanceUTC()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"<java.lang.Object: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(76)<org.joda.time.chrono.BasicChronology: void <clinit>()>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(42)<org.joda.time.chrono.BasicGJChronology: void <clinit>()>";
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"
    "(86)<org.joda.time.chrono.ISOYearOfEraDateTimeField: long set(long,int)>"->"(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>";
    "(117)<org.joda.time.chrono.ISOYearOfEraDateTimeField: java.lang.Object readResolve()>"
    "(117)<org.joda.time.chrono.ISOYearOfEraDateTimeField: java.lang.Object readResolve()>"->"(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>";
    "(117)<org.joda.time.chrono.ISOYearOfEraDateTimeField: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>"
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(248)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology access$1(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(252)<org.joda.time.chrono.GJChronology: long access$0(org.joda.time.chrono.GJChronology)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(104)<org.joda.time.chrono.GJChronology: void <clinit>()>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"<java.lang.Object: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(140)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$22()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(137)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$21()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(134)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$20()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(131)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$19()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(128)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$18()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(125)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$17()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(122)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$16()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(119)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$15()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(116)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$14()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(113)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$13()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(110)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$12()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(106)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$11()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(103)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$10()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(100)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$9()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(97)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$8()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(94)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$7()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(91)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$6()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(88)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$5()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(85)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$4()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(82)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$3()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(79)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$2()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(76)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$1()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$0()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"(73)<org.joda.time.DateTimeFieldType: void <clinit>()>";
    "(553)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: java.lang.Object readResolve()>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(623)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(56)<org.joda.time.PeriodType: void <clinit>()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(173)<org.joda.time.Interval: void <init>(long,long,org.joda.time.DateTimeZone)>"
    "(173)<org.joda.time.Interval: void <init>(long,long,org.joda.time.DateTimeZone)>"->"(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>";
    "(173)<org.joda.time.Interval: void <init>(long,long,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>";
    "(173)<org.joda.time.Interval: void <init>(long,long,org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <clinit>()>";
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "<java.lang.Math: long min(long,long)>"
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"<java.lang.Math: long min(long,long)>";
    "<java.lang.Math: long max(long,long)>"
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"<java.lang.Math: long max(long,long)>";
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>";
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"<java.lang.Math: void <clinit>()>";
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(415)<org.joda.time.Interval: boolean abuts(org.joda.time.ReadableInterval)>"
    "(415)<org.joda.time.Interval: boolean abuts(org.joda.time.ReadableInterval)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(415)<org.joda.time.Interval: boolean abuts(org.joda.time.ReadableInterval)>"->"(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>";
    "(415)<org.joda.time.Interval: boolean abuts(org.joda.time.ReadableInterval)>"->"<java.lang.Object: void <clinit>()>";
    "(460)<org.joda.time.Interval: org.joda.time.Interval withStart(org.joda.time.ReadableInstant)>"
    "(460)<org.joda.time.Interval: org.joda.time.Interval withStart(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(460)<org.joda.time.Interval: org.joda.time.Interval withStart(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(460)<org.joda.time.Interval: org.joda.time.Interval withStart(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(486)<org.joda.time.Interval: org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)>"
    "(486)<org.joda.time.Interval: org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(486)<org.joda.time.Interval: org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)>"->"(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>";
    "(486)<org.joda.time.Interval: org.joda.time.Interval withEnd(org.joda.time.ReadableInstant)>"->"<java.lang.Object: void <clinit>()>";
    "(499)<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>"
    "(499)<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(499)<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(499)<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "(517)<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>"
    "(517)<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(44)<org.joda.time.DateTimeUtils: void <clinit>()>";
    "(517)<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(319)<org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>";
    "(517)<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.lang.String)>";
    "<java.io.File: void <init>(java.io.File,java.lang.String)>"
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>";
    "(81)<org.joda.time.tz.ZoneInfoCompiler: void main(java.lang.String[])>"->"(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>";
    "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
    "(50)<org.joda.time.tz.UTCProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<java.lang.Object: void <init>()>"
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.Object: void <init>()>";
    "<java.util.ArrayList: void <init>()>"
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "<java.util.ArrayList: int size()>"
    "(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"
    "(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>"->"<java.lang.Object: void <init>()>";
    "(842)<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>"
    "(758)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>"
    "(842)<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>"->"(758)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear getOfYear()>";
    "(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"
    "(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>"
    "(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"
    "(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>"
    "(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>"
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"
    "(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "<java.lang.StringBuilder: void <init>(java.lang.String)>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "(889)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"
    "(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "<java.util.StringTokenizer: boolean hasMoreTokens()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "<java.util.StringTokenizer: java.lang.String nextToken()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.lang.String: boolean startsWith(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "<java.lang.String: java.lang.String substring(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.String: int indexOf(java.lang.String)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "<java.lang.String: java.lang.String substring(int,int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: int length()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: int length()>";
    "<java.lang.String: char charAt(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>";
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1499)<org.joda.time.LocalDate: int getMonthOfYear()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"
    "(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>"->"(1533)<org.joda.time.LocalDate: int getDayOfMonth()>";
    "(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"
    "(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>"->"(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>";
    "(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"
    "(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>"->"(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>"
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(686)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Integer: int intValue()>"
    "(39)<org.joda.time.tz.CachedDateTimeZone: void <clinit>()>"->"<java.lang.Integer: int intValue()>";
    "(68)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>"->"(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>";
    "(704)<org.joda.time.DateTimeZone: java.lang.String getID()>"
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>"
    "(87)<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"
    "(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>"->"(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"
    "(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>"->"(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"
    "(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>"->"(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "(111)<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"
    "(1598)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>"
    "(111)<org.joda.time.tz.CachedDateTimeZone: boolean isFixed()>"->"(1598)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isFixed()>";
    "(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"
    "(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"
    "(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>"->"(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"
    "(1267)<org.joda.time.DateTimeZone: int hashCode()>"
    "(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"
    "(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"
    "(140)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>"->"(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>";
    "(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(152)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>"->"(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>";
    "(135)<org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear getStartOfYear()>"->"(572)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>";
    "<java.util.TreeMap: int size()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Set entrySet()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Set entrySet()>";
    "<java.util.HashMap: void <init>(int)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: void <init>(int)>";
    "<java.util.TreeMap: void <init>()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: void <init>()>";
    "<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "<java.util.TreeMap$DescendingSubMap$DescendingEntrySetView: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$DescendingSubMap$DescendingEntrySetView: java.util.Iterator iterator()>";
    "<java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>";
    "<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.stream.Collectors$Partition$1: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.stream.Collectors$Partition$1: java.util.Iterator iterator()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>";
    "<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.HashSet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<java.util.EnumMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.ImmutableCollections$MapN$1: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$1: java.util.Iterator iterator()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>";
    "<java.util.HashMap$EntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$EntrySet: java.util.Iterator iterator()>";
    "<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>";
    "<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: java.util.Iterator iterator()>";
    "<java.util.Collections$SingletonSet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$SingletonSet: java.util.Iterator iterator()>";
    "<java.util.Collections$EmptySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptySet: java.util.Iterator iterator()>";
    "<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>";
    "<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "<java.util.Arrays$ArrayItr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "<java.util.Arrays$ArrayItr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "<java.util.TreeMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.WeakHashMap$HashIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "<java.util.Collections$CheckedCollection$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "<java.util.Collections$CheckedCollection$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "<java.util.ImmutableCollections$Set12$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "<java.util.Collections$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "<java.util.Collections$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: boolean hasNext()>";
    "<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "<java.util.AbstractMap$2$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "<java.util.AbstractMap$2$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "<java.util.ArrayDeque$DeqIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "<java.util.Vector$Itr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "<java.util.Vector$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.EnumMap$KeyIterator: java.lang.Enum next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "<java.util.EnumMap$EnumMapIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "<java.util.Collections$EmptyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "<java.util.Collections$EmptyIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "<sun.util.PreHashedMap$1$1: java.lang.String next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "<sun.util.PreHashedMap$1$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "<java.util.HashMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.HashMap$HashIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.AbstractMap$1$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "<java.util.AbstractMap$1$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<java.util.TreeMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "<java.util.ArrayList$Itr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<java.util.ArrayList$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.ImmutableCollections$ListItr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "<java.util.ImmutableCollections$ListItr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "<java.util.EnumMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "<java.util.Hashtable$Enumerator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "<java.util.Hashtable$Enumerator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "<java.util.HashMap$ValueIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "<sun.util.PreHashedMap$2$1: boolean hasNext()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "<java.util.Hashtable$Entry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Entry: java.lang.Object getKey()>";
    "<java.util.Hashtable$Entry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Entry: java.lang.Object getValue()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>";
    "<java.util.TreeMap$Entry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "<java.util.TreeMap$Entry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>";
    "<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getValue()>";
    "<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>";
    "<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>";
    "<java.util.HashMap$Node: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$Node: java.lang.Object getKey()>";
    "<java.util.HashMap$Node: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$Node: java.lang.Object getValue()>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "<java.util.KeyValueHolder: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.KeyValueHolder: java.lang.Object getKey()>";
    "<java.util.KeyValueHolder: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.KeyValueHolder: java.lang.Object getValue()>";
    "<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>";
    "<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>";
    "<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>";
    "<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>";
    "<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>";
    "<java.text.AttributeEntry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.text.AttributeEntry: java.lang.Object getValue()>";
    "<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>";
    "<sun.util.PreHashedMap$2$1$1: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.Object getValue()>";
    "<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>";
    "<java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "<java.util.HashMap: boolean containsKey(java.lang.Object)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: int size()>";
    "<java.util.TreeMap: java.util.Collection values()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap: java.util.Collection values()>";
    "<java.lang.InternalError: void <init>(java.lang.String)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "<java.io.DataOutputStream: void writeShort(int)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeUTF(java.lang.String)>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.util.HashMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$Values: java.util.Iterator iterator()>";
    "<java.util.IdentityHashMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$Values: java.util.Iterator iterator()>";
    "<java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedValues: java.util.Iterator iterator()>";
    "<java.util.TreeMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Values: java.util.Iterator iterator()>";
    "<java.util.EnumMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$Values: java.util.Iterator iterator()>";
    "<java.util.WeakHashMap$Values: java.util.Iterator iterator()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$Values: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$DescendingSubMap$DescendingEntrySetView: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedEntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.stream.Collectors$Partition$1: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$1: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$EntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$AscendingSubMap$AscendingEntrySetView: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$SingletonSet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet: java.util.Iterator iterator()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Entry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Hashtable$Entry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$Node: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.HashMap$Node: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.KeyValueHolder: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.KeyValueHolder: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.text.AttributeEntry: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.Object getValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "<java.lang.Short: short shortValue()>"
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(153)<org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>"->"<java.lang.Short: short shortValue()>";
    "<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>"
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(195)<org.joda.time.tz.ZoneInfoCompiler: int parseYear(java.lang.String,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>"
    "(207)<org.joda.time.tz.ZoneInfoCompiler: int parseMonth(java.lang.String)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>"
    "(212)<org.joda.time.tz.ZoneInfoCompiler: int parseDayOfWeek(java.lang.String)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(217)<org.joda.time.tz.ZoneInfoCompiler: java.lang.String parseOptional(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>";
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(305)<org.joda.time.base.BaseDateTime: long getMillis()>"
    "(221)<org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(65)<org.joda.time.tz.FixedDateTimeZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(69)<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(69)<org.joda.time.tz.FixedDateTimeZone: long previousTransition(long)>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(115)<org.joda.time.tz.CachedDateTimeZone: long nextTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(119)<org.joda.time.tz.CachedDateTimeZone: long previousTransition(long)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: void <init>()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: int length()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: int size()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "<java.lang.Long: long longValue()>"
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.Long: long longValue()>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(256)<org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.HashMap: void <init>()>"
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(345)<org.joda.time.tz.ZoneInfoCompiler: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<java.io.FileReader: void <init>(java.io.File)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileReader: void <init>(java.io.File)>";
    "<java.io.BufferedReader: void <init>(java.io.Reader)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "<java.io.File: java.lang.String getName()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.lang.String getName()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>";
    "<java.io.BufferedReader: void close()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.BufferedReader: void close()>";
    "<java.io.File: boolean exists()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "<java.io.File: boolean mkdirs()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "<java.io.File: boolean isDirectory()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean isDirectory()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.io.IOException: void <init>(java.lang.String)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(847)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.ArrayList: int size()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "<java.io.File: java.io.File getParentFile()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: java.io.File getParentFile()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean exists()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.File: boolean mkdirs()>";
    "<java.io.FileOutputStream: void <init>(java.io.File)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "<java.io.DataOutputStream: void <init>(java.io.OutputStream)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "<java.util.TreeMap: void <init>(java.util.Comparator)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "<java.util.TreeMap: void putAll(java.util.Map)>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.util.TreeMap: void putAll(java.util.Map)>";
    "<java.io.FilterOutputStream: void close()>"
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "(359)<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>"->"<java.io.FilterOutputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: java.io.File getParentFile()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean exists()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.File: boolean mkdirs()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void <init>(java.io.File)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>";
    "<java.io.FileOutputStream: void close()>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileOutputStream: void close()>";
    "<java.io.FileInputStream: void <init>(java.io.File)>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileInputStream: void close()>"
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.io.FileInputStream: void close()>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.tz.ZoneInfoCompiler: void writeZone(java.io.File,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.DateTimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: java.lang.String trim()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String trim()>";
    "<java.lang.String: int indexOf(int)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int indexOf(int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: int length()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: char charAt(int)>";
    "<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "<java.util.StringTokenizer: int countTokens()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: int countTokens()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(770)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(776)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "(494)<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Properties: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.security.Provider: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>"
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(57)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(116)<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String,boolean)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"
    "(159)<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>"->"<java.util.HashMap: void <init>(int)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet()>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet()>";
    "<java.util.TreeSet: void <init>(java.util.Collection)>"
    "(61)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.io.File)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.String: boolean endsWith(java.lang.String)>"
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.String: boolean endsWith(java.lang.String)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet()>";
    "(109)<org.joda.time.tz.ZoneInfoProvider: void <init>(java.lang.String,java.lang.ClassLoader,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Collection)>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.lang.ref.SoftReference: java.lang.Object get()>"
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.ref.SoftReference: java.lang.Object get()>";
    "(142)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone getZone(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(184)<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"
    "<java.lang.Throwable: void printStackTrace()>"
    "(184)<org.joda.time.tz.ZoneInfoProvider: void uncaughtException(java.lang.Exception)>"->"<java.lang.Throwable: void printStackTrace()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.File: void <init>(java.io.File,java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.lang.String: java.lang.String concat(java.lang.String)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"(203)<org.joda.time.tz.ZoneInfoProvider$1: java.io.InputStream run()>";
    "<java.lang.StringBuilder: void <init>(int)>"
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(197)<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "<java.lang.ref.SoftReference: void <init>(java.lang.Object)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.io.BufferedInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.BufferedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.FileInputStream: void close()>";
    "<java.util.zip.ZipFile$ZipFileInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "<sun.nio.ch.ChannelInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "<sun.net.www.MeteredStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.MeteredStream: void close()>";
    "<sun.net.www.http.ChunkedInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<java.io.InputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.InputStream: void close()>";
    "<sun.net.www.http.KeepAliveStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<java.io.ByteArrayInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.ByteArrayInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.ByteArrayInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.io.ByteArrayInputStream: void close()>";
    "<sun.net.www.http.HttpCaptureInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "<java.util.jar.JarVerifier$VerifierStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>"
    "(229)<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>()>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<java.io.DataInputStream: void <init>(java.io.InputStream)>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "<java.io.FilterInputStream: void close()>"
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.io.FilterInputStream: void close()>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.lang.ref.SoftReference: void <init>(java.lang.Object)>";
    "(257)<org.joda.time.tz.ZoneInfoProvider: java.util.Map loadZoneInfoMap(java.io.InputStream)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.io.DataInputStream: int readUnsignedShort()>"
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.io.DataInputStream: java.lang.String readUTF()>"
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.lang.String: java.lang.String intern()>"
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.lang.String: java.lang.String intern()>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(279)<org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(180)<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>"->"<java.lang.Object: void <init>()>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>"->"(186)<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>"->"(196)<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>"->"(206)<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>";
    "(973)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <clinit>()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.ArrayList: void <init>(int)>"
    "(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.lang.Object: void <init>()>";
    "<java.util.ArrayList: void <init>(java.util.Collection)>"
    "(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"
    "<java.util.ArrayList: boolean contains(java.lang.Object)>"
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(913)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(913)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "<java.util.ArrayList: java.util.Iterator iterator()>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(913)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>"->"(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<java.util.ArrayList$Itr: void remove()>"
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: void remove()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(854)<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>"->"(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>";
    "(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"
    "(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>"->"(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: int size()>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>"
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(837)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>";
    "(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"
    "(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1189)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(201)<org.joda.time.tz.ZoneInfoProvider$1: void <init>(org.joda.time.tz.ZoneInfoProvider,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "<java.io.DataInputStream: int readInt()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readInt()>";
    "<java.io.DataInputStream: int readUnsignedByte()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedShort()>";
    "<java.io.DataInputStream: boolean readBoolean()>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"
    "(1373)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>"->"(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: int size()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.lang.IllegalArgumentException: void <init>()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.text.DateFormatSymbols: void <init>(java.util.Locale)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(757)<org.joda.time.Period: int getYears()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(766)<org.joda.time.Period: int getMonths()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(766)<org.joda.time.Period: int getMonths()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: java.lang.String intern()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1421)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>";
    "(1532)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(1602)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long nextTransition(long)>"->"(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>";
    "(1619)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long previousTransition(long)>"->"(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "<java.util.HashSet: void <init>()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: void <init>()>";
    "<java.util.HashSet: boolean add(java.lang.Object)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "<java.util.HashSet: int size()>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: int size()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashSet: java.util.Iterator iterator()>";
    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "<java.io.DataOutputStream: void writeInt(int)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "<java.io.DataOutputStream: void writeByte(int)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeShort(int)>";
    "<java.io.DataOutputStream: void writeBoolean(boolean)>"
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>"->"(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>";
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"
    "(744)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>"->"<java.lang.Object: void <init>()>";
    "(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>"->"(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>";
    "(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"
    "(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>"->"(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>";
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(635)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>"
    "(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>"->"(635)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>";
    "(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"
    "(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(808)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>"->"(804)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence rename(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"
    "<java.lang.StringBuilder: void <init>()>"
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(813)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"
    "(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>"
    "(77)<org.joda.time.tz.FixedDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"
    "(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger: void <clinit>()>"->"(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>";
    "<java.lang.ThreadLocal: java.lang.Object get()>"
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.ThreadLocal: java.lang.Object get()>";
    "<java.lang.Boolean: boolean booleanValue()>"
    "(34)<org.joda.time.tz.ZoneInfoLogger: boolean verbose()>"->"<java.lang.Boolean: boolean booleanValue()>";
    "<java.lang.ThreadLocal: void set(java.lang.Object)>"
    "(38)<org.joda.time.tz.ZoneInfoLogger: void set(boolean)>"->"<java.lang.ThreadLocal: void set(java.lang.Object)>";
    "(95)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>"->"<java.io.DataInputStream: void <init>(java.io.InputStream)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.DataInputStream: java.lang.String readUTF()>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(110)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeInt(int)>";
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "<java.io.DataOutputStream: void writeLong(long)>"
    "(140)<org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>"->"<java.io.DataOutputStream: void writeLong(long)>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: long readLong()>"
    "(183)<org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>"->"<java.io.DataInputStream: long readLong()>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(215)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>"->"(38)<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(225)<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>"->"<java.util.ArrayList: void <init>(int)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: int size()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1026)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>"
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(1026)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"(988)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>";
    "(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(1011)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>"
    "(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>"->"(1011)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>";
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(1015)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>"
    "(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>"->"(1015)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(751)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(825)<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>";
    "(309)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>"->"(1020)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"(252)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: int size()>";
    "(320)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: void <init>()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1037)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(996)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(938)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1167)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1108)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1157)<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: int size()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(926)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(934)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>";
    "(1722)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>"
    "(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>"->"(1722)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: int size()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(930)<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(922)<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>";
    "(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"(402)<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>";
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void <init>(java.io.OutputStream)>";
    "<java.io.DataOutputStream: void flush()>"
    "(447)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>"->"<java.io.DataOutputStream: void flush()>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(333)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeUTF(java.lang.String)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1541)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1579)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(45)<org.joda.time.tz.FixedDateTimeZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(53)<org.joda.time.tz.FixedDateTimeZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1223)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(99)<org.joda.time.tz.CachedDateTimeZone: java.lang.String getNameKey(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(107)<org.joda.time.tz.CachedDateTimeZone: int getStandardOffset(long)>";
    "(95)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>"
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(95)<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>";
    "(465)<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>"->"(1670)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: int countTokens()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(704)<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>"->"(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>";
    "(724)<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>"->"(661)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: int indexOf(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(730)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>"->"<java.lang.String: java.lang.String intern()>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(756)<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "<java.io.DataInputStream: byte readByte()>"
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: byte readByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: int readUnsignedByte()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"<java.io.DataInputStream: boolean readBoolean()>";
    "(488)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>"->"(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.Object: void <init>()>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(505)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>"
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"
    "(528)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>";
    "(555)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>";
    "(597)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>"->"(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(653)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeByte(int)>";
    "(663)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>"->"<java.io.DataOutputStream: void writeBoolean(boolean)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(676)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(695)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>"
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(710)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(721)<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1198)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>"->"(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>";
    "(1208)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "(1215)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>"->"(776)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>";
    "(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1231)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(772)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>";
    "(1273)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(704)<org.joda.time.DateTimeZone: java.lang.String getID()>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>"->"(784)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "(1330)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>"->"(798)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(765)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>";
    "(1336)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>"->"(780)<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>";
    "(899)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.Object: void <init>()>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"<java.lang.Object: void <init>()>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"(846)<org.joda.time.tz.DateTimeZoneBuilder$Rule: java.lang.String getNameKey()>";
    "(906)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>"->"(850)<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>";
    "(913)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>"->"<java.lang.Object: void <init>()>";
    "(942)<org.joda.time.tz.DateTimeZoneBuilder$Transition: org.joda.time.tz.DateTimeZoneBuilder$Transition withMillis(long)>"->"(913)<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>";
    "(949)<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(960)<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.ThreadLocal: void <init>()>"
    "(23)<org.joda.time.tz.ZoneInfoLogger$1: void <init>()>"->"<java.lang.ThreadLocal: void <init>()>";
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(804)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>"->"(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.Object: void <init>()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: java.lang.String nextToken()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.util.StringTokenizer: boolean hasMoreTokens()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"<java.lang.String: java.lang.String intern()>";
    "(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>"->"(581)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>(java.util.StringTokenizer)>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>";
    "(828)<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>"->"(807)<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(268)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(276)<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(786)<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>";
    "(854)<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>"->"(675)<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(885)<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(864)<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>"
    "(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>"
    "(864)<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>"->"(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>";
    "(924)<org.joda.time.Partial$Property: org.joda.time.Partial addToCopy(int)>"
    "(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>"
    "(924)<org.joda.time.Partial$Property: org.joda.time.Partial addToCopy(int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(948)<org.joda.time.Partial$Property: org.joda.time.Partial addWrapFieldToCopy(int)>"
    "(948)<org.joda.time.Partial$Property: org.joda.time.Partial addWrapFieldToCopy(int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(965)<org.joda.time.Partial$Property: org.joda.time.Partial setCopy(int)>"
    "(965)<org.joda.time.Partial$Property: org.joda.time.Partial setCopy(int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(982)<org.joda.time.Partial$Property: org.joda.time.Partial setCopy(java.lang.String,java.util.Locale)>"
    "(982)<org.joda.time.Partial$Property: org.joda.time.Partial setCopy(java.lang.String,java.util.Locale)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(56)<org.joda.time.PeriodType: void <clinit>()>"->"<java.util.HashMap: void <init>(int)>";
    "(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"
    "(102)<org.joda.time.PeriodType: org.joda.time.PeriodType standard()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(134)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(163)<org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(193)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(222)<org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(251)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(278)<org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(305)<org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(333)<org.joda.time.PeriodType: org.joda.time.PeriodType time()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(354)<org.joda.time.PeriodType: org.joda.time.PeriodType years()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(372)<org.joda.time.PeriodType: org.joda.time.PeriodType months()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(390)<org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(408)<org.joda.time.PeriodType: org.joda.time.PeriodType days()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(426)<org.joda.time.PeriodType: org.joda.time.PeriodType hours()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(444)<org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(462)<org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(480)<org.joda.time.PeriodType: org.joda.time.PeriodType millis()>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.HashMap: boolean isEmpty()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: boolean isEmpty()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "<java.util.ArrayList: boolean remove(java.lang.Object)>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: boolean remove(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.util.ArrayList: int size()>";
    "(725)<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(725)<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>";
    "(734)<org.joda.time.PeriodType: org.joda.time.PeriodType withMonthsRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(734)<org.joda.time.PeriodType: org.joda.time.PeriodType withMonthsRemoved()>";
    "(743)<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(743)<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>";
    "(752)<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(752)<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>";
    "(761)<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(761)<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>";
    "(770)<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(770)<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>";
    "(779)<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(779)<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>";
    "(788)<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>"
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(788)<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(502)<org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>"->"<java.lang.Object: void <init>()>";
    "(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"
    "(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>"->"(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "(617)<org.joda.time.PeriodType: int size()>"
    "(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>"->"(617)<org.joda.time.PeriodType: int size()>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(608)<org.joda.time.PeriodType: java.lang.String getName()>"
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"(608)<org.joda.time.PeriodType: java.lang.String getName()>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(662)<org.joda.time.PeriodType: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"
    "(329)<org.joda.time.base.BasePeriod: int getValue(int)>"
    "(674)<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>"->"(329)<org.joda.time.base.BasePeriod: int getValue(int)>";
    "(688)<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>"
    "(688)<org.joda.time.PeriodType: boolean setIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(707)<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(725)<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(734)<org.joda.time.PeriodType: org.joda.time.PeriodType withMonthsRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(743)<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(752)<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(761)<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(770)<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(779)<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(788)<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>"->"(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"(617)<org.joda.time.PeriodType: int size()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"(608)<org.joda.time.PeriodType: java.lang.String getName()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(799)<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>"->"(595)<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: void <init>(int)>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(49)<org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(30)<org.joda.time.DurationField: void <init>()>"
    "(70)<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>"->"(30)<org.joda.time.DurationField: void <init>()>";
    "(110)<org.joda.time.field.UnsupportedDurationField: int getValue(long)>"
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"
    "(110)<org.joda.time.field.UnsupportedDurationField: int getValue(long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(119)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long)>"
    "(119)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(128)<org.joda.time.field.UnsupportedDurationField: int getValue(long,long)>"
    "(128)<org.joda.time.field.UnsupportedDurationField: int getValue(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>"
    "(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(155)<org.joda.time.field.UnsupportedDurationField: long getMillis(long)>"
    "(155)<org.joda.time.field.UnsupportedDurationField: long getMillis(long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(164)<org.joda.time.field.UnsupportedDurationField: long getMillis(int,long)>"
    "(164)<org.joda.time.field.UnsupportedDurationField: long getMillis(int,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>"
    "(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"
    "(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"
    "(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"
    "(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"
    "(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>"->"(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"
    "(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>"
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>"
    "(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"(83)<org.joda.time.field.UnsupportedDurationField: java.lang.String getName()>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(265)<org.joda.time.field.UnsupportedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(276)<org.joda.time.field.UnsupportedDurationField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"
    "(227)<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>"
    "(1)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>"->"(227)<org.joda.time.field.UnsupportedDurationField: int compareTo(org.joda.time.DurationField)>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(49)<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(155)<org.joda.time.field.PreciseDurationDateTimeField: long getUnitMillis()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>"
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"
    "(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>"
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>"
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>"
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"->"(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"->"(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"->"(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>";
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"->"(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>";
    "(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>"->"(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>";
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"->"(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"->"(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>";
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"->"(164)<org.joda.time.field.UnsupportedDurationField: long getMillis(int,long)>";
    "(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>";
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"->"(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"->"(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"->"(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>";
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"->"(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>";
    "(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>"->"(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"
    "(89)<org.joda.time.field.DecoratedDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"
    "(93)<org.joda.time.field.DecoratedDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"
    "(97)<org.joda.time.field.DecoratedDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"
    "(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>"
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"
    "(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>"->"(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>";
    "(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(95)<org.joda.time.field.SkipUndoDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>"
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(74)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int,int,int)>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>"
    "(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>"
    "(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>"->"(79)<org.joda.time.field.DecoratedDateTimeField: int get(long)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>"
    "(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>"->"(83)<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>";
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"
    "(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(162)<org.joda.time.field.OffsetDateTimeField: int getLeapAmount(long)>"
    "(162)<org.joda.time.field.OffsetDateTimeField: int getLeapAmount(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"
    "(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"
    "(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(196)<org.joda.time.field.OffsetDateTimeField: long roundHalfFloor(long)>"
    "(196)<org.joda.time.field.OffsetDateTimeField: long roundHalfFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(200)<org.joda.time.field.OffsetDateTimeField: long roundHalfCeiling(long)>"
    "(200)<org.joda.time.field.OffsetDateTimeField: long roundHalfCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(204)<org.joda.time.field.OffsetDateTimeField: long roundHalfEven(long)>"
    "(204)<org.joda.time.field.OffsetDateTimeField: long roundHalfEven(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"
    "(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "<java.lang.Object: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"
    "(461)<org.joda.time.field.AbstractReadableInstantFieldProperty: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(471)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(343)<org.joda.time.field.AbstractPartialFieldProperty: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(357)<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(54)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "(54)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"
    "(54)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"
    "(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>"->"(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>"->"(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"
    "(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(236)<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>"
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(236)<org.joda.time.field.RemainderDateTimeField: int getDivided(int)>";
    "(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"
    "(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"
    "(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(211)<org.joda.time.field.RemainderDateTimeField: long roundHalfFloor(long)>"
    "(211)<org.joda.time.field.RemainderDateTimeField: long roundHalfFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(215)<org.joda.time.field.RemainderDateTimeField: long roundHalfCeiling(long)>"
    "(215)<org.joda.time.field.RemainderDateTimeField: long roundHalfCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(219)<org.joda.time.field.RemainderDateTimeField: long roundHalfEven(long)>"
    "(219)<org.joda.time.field.RemainderDateTimeField: long roundHalfEven(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"
    "(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(44)<org.joda.time.field.MillisDurationField: void <init>()>"
    "(38)<org.joda.time.field.MillisDurationField: void <clinit>()>"->"(44)<org.joda.time.field.MillisDurationField: void <init>()>";
    "(44)<org.joda.time.field.MillisDurationField: void <init>()>"->"(30)<org.joda.time.DurationField: void <init>()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(134)<org.joda.time.field.MillisDurationField: int compareTo(org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(65)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(80)<org.joda.time.field.SkipDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"
    "(80)<org.joda.time.field.SkipDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"
    "(64)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(33)<org.joda.time.DateTimeField: void <init>()>"
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(33)<org.joda.time.DateTimeField: void <init>()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"
    "(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>"
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>"
    "(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"
    "(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>"
    "(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>"
    "(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"
    "(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(118)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long)>"
    "(106)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long)>"
    "(118)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long)>"->"(106)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long)>";
    "(118)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long)>"->"(118)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long)>";
    "(144)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long)>"
    "(118)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long)>"->"(144)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long)>";
    "(122)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(122)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(121)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(122)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(122)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(153)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(122)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(153)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(136)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(126)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"
    "(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"
    "(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(138)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long)>"
    "(180)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long)>"
    "(138)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long)>"->"(180)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long)>";
    "(138)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long)>"->"(138)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long)>";
    "(189)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long)>"
    "(138)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long)>"->"(189)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long)>";
    "(142)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(142)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(195)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(142)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(142)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(198)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"
    "(142)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(198)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(210)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(146)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"
    "(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"
    "(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"
    "(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(243)<org.joda.time.field.UnsupportedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"
    "(162)<org.joda.time.field.DelegatedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(243)<org.joda.time.field.UnsupportedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(166)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"
    "(166)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>";
    "(166)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(166)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>";
    "(252)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"
    "(166)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(252)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>";
    "(489)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long addWrapField(long,int)>"
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(489)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long addWrapField(long,int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(461)<org.joda.time.field.BaseDateTimeField: long addWrapField(long,int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>";
    "(261)<org.joda.time.field.UnsupportedDateTimeField: long addWrapField(long,int)>"
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(261)<org.joda.time.field.UnsupportedDateTimeField: long addWrapField(long,int)>";
    "(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>"->"(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>";
    "(174)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"
    "(174)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"->"(495)<org.joda.time.field.BaseDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>";
    "(174)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"->"(174)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>";
    "(270)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"
    "(174)<org.joda.time.field.DelegatedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"->"(270)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"
    "(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"
    "(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(194)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String)>"
    "(635)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String)>"
    "(194)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String)>"->"(635)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String)>";
    "(194)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String)>"->"(194)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String)>";
    "(324)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String)>"
    "(194)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String)>"->"(324)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String)>";
    "(198)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"
    "(198)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"->"(585)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>";
    "(198)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"->"(198)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>";
    "(306)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"
    "(198)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"->"(306)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>";
    "(202)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"
    "(654)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"
    "(202)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"->"(654)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>";
    "(202)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"->"(202)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>";
    "(333)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"
    "(202)<org.joda.time.field.DelegatedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"->"(333)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"
    "(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"
    "(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"
    "(340)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(340)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getLeapAmount(long)>";
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>";
    "(535)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(535)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>";
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(162)<org.joda.time.field.OffsetDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>";
    "(716)<org.joda.time.field.BaseDateTimeField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(716)<org.joda.time.field.BaseDateTimeField: int getLeapAmount(long)>";
    "(370)<org.joda.time.field.UnsupportedDateTimeField: int getLeapAmount(long)>"
    "(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>"->"(370)<org.joda.time.field.UnsupportedDateTimeField: int getLeapAmount(long)>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"
    "(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"
    "(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"
    "(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"
    "(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"
    "(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"
    "(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"
    "(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"
    "(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"
    "(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"
    "(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(850)<org.joda.time.field.BaseDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(850)<org.joda.time.field.BaseDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(600)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(600)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(469)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"
    "(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(469)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"
    "(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>"
    "(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"
    "(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>"
    "(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"
    "(903)<org.joda.time.field.BaseDateTimeField: long roundHalfFloor(long)>"
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(903)<org.joda.time.field.BaseDateTimeField: long roundHalfFloor(long)>";
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>";
    "(558)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfFloor(long)>"
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(558)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfFloor(long)>";
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(196)<org.joda.time.field.OffsetDateTimeField: long roundHalfFloor(long)>";
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(211)<org.joda.time.field.RemainderDateTimeField: long roundHalfFloor(long)>";
    "(496)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfFloor(long)>"
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(496)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfFloor(long)>";
    "(91)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfFloor(long)>"
    "(277)<org.joda.time.field.DelegatedDateTimeField: long roundHalfFloor(long)>"->"(91)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfFloor(long)>";
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"
    "(927)<org.joda.time.field.BaseDateTimeField: long roundHalfCeiling(long)>"
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(927)<org.joda.time.field.BaseDateTimeField: long roundHalfCeiling(long)>";
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>";
    "(565)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfCeiling(long)>"
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(565)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfCeiling(long)>";
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(200)<org.joda.time.field.OffsetDateTimeField: long roundHalfCeiling(long)>";
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(215)<org.joda.time.field.RemainderDateTimeField: long roundHalfCeiling(long)>";
    "(505)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfCeiling(long)>"
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(505)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfCeiling(long)>";
    "(96)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfCeiling(long)>"
    "(281)<org.joda.time.field.DelegatedDateTimeField: long roundHalfCeiling(long)>"->"(96)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfCeiling(long)>";
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"
    "(955)<org.joda.time.field.BaseDateTimeField: long roundHalfEven(long)>"
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(955)<org.joda.time.field.BaseDateTimeField: long roundHalfEven(long)>";
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>";
    "(572)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfEven(long)>"
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(572)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfEven(long)>";
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(204)<org.joda.time.field.OffsetDateTimeField: long roundHalfEven(long)>";
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(219)<org.joda.time.field.RemainderDateTimeField: long roundHalfEven(long)>";
    "(514)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfEven(long)>"
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(514)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfEven(long)>";
    "(101)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfEven(long)>"
    "(285)<org.joda.time.field.DelegatedDateTimeField: long roundHalfEven(long)>"->"(101)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundHalfEven(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"
    "(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"
    "(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>"
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"(98)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getName()>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(293)<org.joda.time.field.DelegatedDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"
    "(44)<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>";
    "(57)<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"
    "(46)<org.joda.time.field.ZeroIsMaxDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(90)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"
    "(41)<org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>"->"(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(54)<org.joda.time.field.StrictDateTimeField: void <init>(org.joda.time.DateTimeField)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>"
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>"
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(379)<org.joda.time.field.BaseDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"
    "(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1003)<org.joda.time.field.BaseDateTimeField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(165)<org.joda.time.field.BaseDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>"
    "(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>"
    "(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>"->"(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>";
    "(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>"->"(79)<org.joda.time.field.BaseDurationField: int getValue(long)>";
    "(55)<org.joda.time.field.ScaledDurationField: int getValue(long)>"->"(110)<org.joda.time.field.UnsupportedDurationField: int getValue(long)>";
    "(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>"
    "(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>"->"(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>";
    "(91)<org.joda.time.field.BaseDurationField: long getValueAsLong(long)>"
    "(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>"->"(91)<org.joda.time.field.BaseDurationField: long getValueAsLong(long)>";
    "(59)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long)>"->"(119)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long)>";
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>";
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(128)<org.joda.time.field.UnsupportedDurationField: int getValue(long,long)>";
    "(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>"->"(111)<org.joda.time.field.BaseDurationField: int getValue(long,long)>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>";
    "(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>"->"(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>";
    "(71)<org.joda.time.field.ScaledDurationField: long getMillis(int)>"
    "(71)<org.joda.time.field.ScaledDurationField: long getMillis(int)>"->"(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>";
    "(71)<org.joda.time.field.ScaledDurationField: long getMillis(int)>"->"(135)<org.joda.time.field.BaseDurationField: long getMillis(long)>";
    "(71)<org.joda.time.field.ScaledDurationField: long getMillis(int)>"->"(155)<org.joda.time.field.UnsupportedDurationField: long getMillis(long)>";
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"->"(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>";
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"->"(135)<org.joda.time.field.BaseDurationField: long getMillis(long)>";
    "(76)<org.joda.time.field.ScaledDurationField: long getMillis(long)>"->"(155)<org.joda.time.field.UnsupportedDurationField: long getMillis(long)>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>";
    "(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>"->"(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>";
    "(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>"->"(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "<java.lang.Object: boolean equals(java.lang.Object)>"
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(147)<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(147)<org.joda.time.field.ScaledDurationField: int hashCode()>"->"(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"
    "(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>"->"(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(94)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMinimumValue()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>";
    "(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>"->"(47)<org.joda.time.field.ScaledDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType,int)>";
    "(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(141)<org.joda.time.field.DividedDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(251)<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>"
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(251)<org.joda.time.field.DividedDateTimeField: int getRemainder(int)>";
    "(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "<java.lang.ArithmeticException: void <init>(java.lang.String)>"
    "(52)<org.joda.time.field.FieldUtils: int safeNegate(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(67)<org.joda.time.field.FieldUtils: int safeAdd(int,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(85)<org.joda.time.field.FieldUtils: long safeAdd(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(103)<org.joda.time.field.FieldUtils: long safeSubtract(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(122)<org.joda.time.field.FieldUtils: int safeMultiply(int,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(139)<org.joda.time.field.FieldUtils: long safeMultiply(long,int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(166)<org.joda.time.field.FieldUtils: long safeMultiply(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(192)<org.joda.time.field.FieldUtils: long safeDivide(long,long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "<java.math.BigDecimal: void <init>(long)>"
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.math.BigDecimal: void <init>(long)>";
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.math.BigDecimal: void <init>(long)>";
    "<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>"
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,java.math.RoundingMode)>";
    "<java.math.BigDecimal: long longValue()>"
    "(209)<org.joda.time.field.FieldUtils: long safeDivide(long,long,java.math.RoundingMode)>"->"<java.math.BigDecimal: long longValue()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(226)<org.joda.time.field.FieldUtils: int safeToInt(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(256)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(274)<org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(291)<org.joda.time.field.FieldUtils: void verifyValueBounds(java.lang.String,int,int,int)>"->"(171)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(331)<org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"
    "(360)<org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: void <init>(int)>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>";
    "(55)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"(33)<org.joda.time.DateTimeField: void <init>()>";
    "(82)<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"
    "(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(144)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(153)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(162)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(189)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(198)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(207)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(243)<org.joda.time.field.UnsupportedDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(252)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(261)<org.joda.time.field.UnsupportedDateTimeField: long addWrapField(long,int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(270)<org.joda.time.field.UnsupportedDateTimeField: int[] addWrapField(org.joda.time.ReadablePartial,int,int[],int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(306)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(324)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(333)<org.joda.time.field.UnsupportedDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],java.lang.String,java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(370)<org.joda.time.field.UnsupportedDateTimeField: int getLeapAmount(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(469)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(496)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfFloor(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(505)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfCeiling(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(514)<org.joda.time.field.UnsupportedDateTimeField: long roundHalfEven(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>"->"(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: void <init>()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(544)<org.joda.time.field.UnsupportedDateTimeField: java.lang.UnsupportedOperationException unsupported()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(60)<org.joda.time.field.DelegatedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"
    "(60)<org.joda.time.field.DelegatedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(165)<org.joda.time.field.DelegatedDurationField: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"
    "(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>"->"(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>";
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(54)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField)>";
    "(64)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField,int)>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(111)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now()>"
    "(111)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now()>"->"(264)<org.joda.time.LocalDateTime: void <init>()>";
    "(124)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.DateTimeZone)>"
    "<java.lang.NullPointerException: void <init>(java.lang.String)>"
    "(124)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(124)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.DateTimeZone)>"->"(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(140)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.Chronology)>"
    "(140)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(140)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime now(org.joda.time.Chronology)>"->"(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>";
    "(168)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.Calendar: int get(int)>"
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(196)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromCalendarFields(java.util.Calendar)>"->"(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>";
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.GregorianCalendar: void <init>()>"
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.util.GregorianCalendar: void <init>()>";
    "<java.util.Calendar: void setTime(java.util.Date)>"
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"<java.util.Calendar: void setTime(java.util.Date)>";
    "(234)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime fromDateFields(java.util.Date)>"->"(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>";
    "(264)<org.joda.time.LocalDateTime: void <init>()>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(278)<org.joda.time.LocalDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(292)<org.joda.time.LocalDateTime: void <init>(org.joda.time.Chronology)>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(48)<org.joda.time.base.BaseLocal: void <init>()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>"
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>"
    "(379)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(409)<org.joda.time.LocalDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(482)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int)>"->"(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"
    "(509)<org.joda.time.LocalDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(522)<org.joda.time.LocalDateTime: java.lang.Object readResolve()>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
    "(552)<org.joda.time.LocalDateTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(577)<org.joda.time.LocalDateTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"
    "(607)<org.joda.time.LocalDateTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(703)<org.joda.time.LocalDateTime: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "(748)<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(651)<org.joda.time.LocalDateTime: long getLocalMillis()>"
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>"
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"->"(651)<org.joda.time.LocalDateTime: long getLocalMillis()>";
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"->"(660)<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>";
    "(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "<java.util.Date: void <init>(int,int,int,int,int,int)>"
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.Date: void <init>(int,int,int,int,int,int)>";
    "<java.util.Date: long getTime()>"
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.Date: long getTime()>";
    "<java.util.Date: void setTime(long)>"
    "(795)<org.joda.time.LocalDateTime: java.util.Date toDate()>"->"<java.util.Date: void setTime(long)>";
    "(372)<org.joda.time.base.AbstractPartial: boolean isBefore(org.joda.time.ReadablePartial)>"
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(372)<org.joda.time.base.AbstractPartial: boolean isBefore(org.joda.time.ReadablePartial)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(372)<org.joda.time.base.AbstractPartial: boolean isBefore(org.joda.time.ReadablePartial)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(372)<org.joda.time.base.AbstractPartial: boolean isBefore(org.joda.time.ReadablePartial)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>";
    "(849)<org.joda.time.LocalDateTime: java.util.Date correctDstTransition(java.util.Date,java.util.TimeZone)>"->"(673)<org.joda.time.LocalDateTime: boolean equals(java.lang.Object)>";
    "(889)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>"
    "(889)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(911)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDate(int,int,int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"
    "(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>"
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>"
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>"
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>"
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(938)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withTime(int,int,int,int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(961)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withFields(org.joda.time.ReadablePartial)>"
    "(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>"
    "(961)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withFields(org.joda.time.ReadablePartial)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(987)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withField(org.joda.time.DateTimeFieldType,int)>"
    "(987)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1014)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(1014)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1036)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration,int)>"
    "(1036)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDurationAdded(org.joda.time.ReadableDuration,int)>"->"(324)<org.joda.time.chrono.BaseChronology: long add(long,long,int)>";
    "(1059)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>"
    "(1059)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(1114)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusYears(int)>"
    "(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>"
    "(1114)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusYears(int)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(1114)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusYears(int)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(1137)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMonths(int)>"
    "(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>"
    "(1137)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMonths(int)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(1137)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMonths(int)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(1160)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusWeeks(int)>"
    "(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>"
    "(1160)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusWeeks(int)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(1160)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusWeeks(int)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(1183)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusDays(int)>"
    "(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>"
    "(1183)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusDays(int)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(1183)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusDays(int)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(1207)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusHours(int)>"
    "(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>"
    "(1207)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusHours(int)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(1207)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusHours(int)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(1230)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMinutes(int)>"
    "(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>"
    "(1230)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMinutes(int)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(1230)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMinutes(int)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(1253)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusSeconds(int)>"
    "(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>"
    "(1253)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusSeconds(int)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(1253)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusSeconds(int)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(1276)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMillis(int)>"
    "(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>"
    "(1276)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMillis(int)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(1276)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime plusMillis(int)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(1331)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusYears(int)>"
    "(1331)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusYears(int)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(1331)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusYears(int)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(1354)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMonths(int)>"
    "(1354)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMonths(int)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(1354)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMonths(int)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(1377)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusWeeks(int)>"
    "(1377)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusWeeks(int)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(1377)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusWeeks(int)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(1400)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusDays(int)>"
    "(1400)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusDays(int)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(1400)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusDays(int)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(1424)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusHours(int)>"
    "(1424)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusHours(int)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(1424)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusHours(int)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(1447)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMinutes(int)>"
    "(1447)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMinutes(int)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(1447)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMinutes(int)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(1470)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusSeconds(int)>"
    "(1470)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusSeconds(int)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(1470)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusSeconds(int)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(1493)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMillis(int)>"
    "(1493)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMillis(int)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(1493)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime minusMillis(int)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>"
    "(1510)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1526)<org.joda.time.LocalDateTime: int getEra()>"
    "(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>"
    "(1526)<org.joda.time.LocalDateTime: int getEra()>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1526)<org.joda.time.LocalDateTime: int getEra()>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1535)<org.joda.time.LocalDateTime: int getCenturyOfEra()>"
    "(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>"
    "(1535)<org.joda.time.LocalDateTime: int getCenturyOfEra()>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1535)<org.joda.time.LocalDateTime: int getCenturyOfEra()>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1544)<org.joda.time.LocalDateTime: int getYearOfEra()>"
    "(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>"
    "(1544)<org.joda.time.LocalDateTime: int getYearOfEra()>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1544)<org.joda.time.LocalDateTime: int getYearOfEra()>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1553)<org.joda.time.LocalDateTime: int getYearOfCentury()>"
    "(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>"
    "(1553)<org.joda.time.LocalDateTime: int getYearOfCentury()>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1553)<org.joda.time.LocalDateTime: int getYearOfCentury()>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1562)<org.joda.time.LocalDateTime: int getYear()>"
    "(1562)<org.joda.time.LocalDateTime: int getYear()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1562)<org.joda.time.LocalDateTime: int getYear()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1577)<org.joda.time.LocalDateTime: int getWeekyear()>"
    "(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>"
    "(1577)<org.joda.time.LocalDateTime: int getWeekyear()>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1577)<org.joda.time.LocalDateTime: int getWeekyear()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1586)<org.joda.time.LocalDateTime: int getMonthOfYear()>"
    "(1586)<org.joda.time.LocalDateTime: int getMonthOfYear()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1586)<org.joda.time.LocalDateTime: int getMonthOfYear()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1600)<org.joda.time.LocalDateTime: int getWeekOfWeekyear()>"
    "(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>"
    "(1600)<org.joda.time.LocalDateTime: int getWeekOfWeekyear()>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1600)<org.joda.time.LocalDateTime: int getWeekOfWeekyear()>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1609)<org.joda.time.LocalDateTime: int getDayOfYear()>"
    "(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>"
    "(1609)<org.joda.time.LocalDateTime: int getDayOfYear()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1609)<org.joda.time.LocalDateTime: int getDayOfYear()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1620)<org.joda.time.LocalDateTime: int getDayOfMonth()>"
    "(1620)<org.joda.time.LocalDateTime: int getDayOfMonth()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1620)<org.joda.time.LocalDateTime: int getDayOfMonth()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1631)<org.joda.time.LocalDateTime: int getDayOfWeek()>"
    "(1631)<org.joda.time.LocalDateTime: int getDayOfWeek()>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1631)<org.joda.time.LocalDateTime: int getDayOfWeek()>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1641)<org.joda.time.LocalDateTime: int getHourOfDay()>"
    "(1641)<org.joda.time.LocalDateTime: int getHourOfDay()>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1641)<org.joda.time.LocalDateTime: int getHourOfDay()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1650)<org.joda.time.LocalDateTime: int getMinuteOfHour()>"
    "(1650)<org.joda.time.LocalDateTime: int getMinuteOfHour()>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1650)<org.joda.time.LocalDateTime: int getMinuteOfHour()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1659)<org.joda.time.LocalDateTime: int getSecondOfMinute()>"
    "(1659)<org.joda.time.LocalDateTime: int getSecondOfMinute()>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1659)<org.joda.time.LocalDateTime: int getSecondOfMinute()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1668)<org.joda.time.LocalDateTime: int getMillisOfSecond()>"
    "(1668)<org.joda.time.LocalDateTime: int getMillisOfSecond()>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1668)<org.joda.time.LocalDateTime: int getMillisOfSecond()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1677)<org.joda.time.LocalDateTime: int getMillisOfDay()>"
    "(1677)<org.joda.time.LocalDateTime: int getMillisOfDay()>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1677)<org.joda.time.LocalDateTime: int getMillisOfDay()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1693)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withEra(int)>"
    "(1693)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withEra(int)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1693)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withEra(int)>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1708)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withCenturyOfEra(int)>"
    "(1708)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withCenturyOfEra(int)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1708)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withCenturyOfEra(int)>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1723)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfEra(int)>"
    "(1723)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfEra(int)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1723)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfEra(int)>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1738)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfCentury(int)>"
    "(1738)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfCentury(int)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1738)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYearOfCentury(int)>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1753)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYear(int)>"
    "(1753)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYear(int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1753)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withYear(int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1774)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekyear(int)>"
    "(1774)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekyear(int)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1774)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekyear(int)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1789)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMonthOfYear(int)>"
    "(1789)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMonthOfYear(int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1789)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMonthOfYear(int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1809)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekOfWeekyear(int)>"
    "(1809)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekOfWeekyear(int)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1809)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withWeekOfWeekyear(int)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1824)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfYear(int)>"
    "(1824)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfYear(int)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1824)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfYear(int)>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1839)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfMonth(int)>"
    "(1839)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfMonth(int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1839)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfMonth(int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1854)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfWeek(int)>"
    "(1854)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfWeek(int)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1854)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withDayOfWeek(int)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1870)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withHourOfDay(int)>"
    "(1870)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withHourOfDay(int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1870)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withHourOfDay(int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1885)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMinuteOfHour(int)>"
    "(1885)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMinuteOfHour(int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1885)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMinuteOfHour(int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1900)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withSecondOfMinute(int)>"
    "(1900)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withSecondOfMinute(int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1900)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withSecondOfMinute(int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1915)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfSecond(int)>"
    "(1915)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfSecond(int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1915)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfSecond(int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1930)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfDay(int)>"
    "(1930)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfDay(int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1930)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withMillisOfDay(int)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1940)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property era()>"
    "(1940)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property era()>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1940)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property era()>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1940)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property era()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1949)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property centuryOfEra()>"
    "(1949)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property centuryOfEra()>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1949)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property centuryOfEra()>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1949)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property centuryOfEra()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1958)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfCentury()>"
    "(1958)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfCentury()>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1958)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfCentury()>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1958)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfCentury()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1967)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfEra()>"
    "(1967)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfEra()>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1967)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfEra()>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1967)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property yearOfEra()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1976)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property year()>"
    "(1976)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property year()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1976)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property year()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1976)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property year()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1985)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekyear()>"
    "(1985)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekyear()>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1985)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekyear()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1985)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekyear()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(1994)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property monthOfYear()>"
    "(1994)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property monthOfYear()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1994)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property monthOfYear()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1994)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property monthOfYear()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2003)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekOfWeekyear()>"
    "(2003)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekOfWeekyear()>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(2003)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekOfWeekyear()>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(2003)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property weekOfWeekyear()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2012)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfYear()>"
    "(2012)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfYear()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(2012)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfYear()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(2012)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfYear()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2021)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfMonth()>"
    "(2021)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfMonth()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(2021)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfMonth()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(2021)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfMonth()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2030)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfWeek()>"
    "(2030)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfWeek()>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(2030)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfWeek()>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(2030)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property dayOfWeek()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2040)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property hourOfDay()>"
    "(2040)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property hourOfDay()>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(2040)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property hourOfDay()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(2040)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property hourOfDay()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2049)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property minuteOfHour()>"
    "(2049)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property minuteOfHour()>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(2049)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property minuteOfHour()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(2049)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property minuteOfHour()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2058)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property secondOfMinute()>"
    "(2058)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property secondOfMinute()>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(2058)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property secondOfMinute()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(2058)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property secondOfMinute()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2067)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfSecond()>"
    "(2067)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfSecond()>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(2067)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfSecond()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(2067)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfSecond()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(2076)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfDay()>"
    "(2076)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfDay()>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(2076)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfDay()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(2076)<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime$Property millisOfDay()>"->"(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"
    "(2087)<org.joda.time.LocalDateTime: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(2097)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>"
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(2111)<org.joda.time.LocalDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(54)<org.joda.time.DateTimeComparator: void <clinit>()>"->"(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(106)<org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>";
    "(155)<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>"->"<java.lang.Object: void <init>()>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(192)<org.joda.time.DateTimeComparator: int compare(java.lang.Object,java.lang.Object)>"->"(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(268)<org.joda.time.DateTimeComparator: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>";
    "<java.util.concurrent.atomic.AtomicReference: void <init>()>"
    "(44)<org.joda.time.DateTimeUtils: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReference: void <init>()>";
    "(571)<org.joda.time.DateTimeUtils$FixedMillisProvider: long getMillis()>"
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(571)<org.joda.time.DateTimeUtils$FixedMillisProvider: long getMillis()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(547)<org.joda.time.DateTimeUtils$SystemMillisProvider: long getMillis()>";
    "(72)<org.joda.time.DateTimeUtils: long currentTimeMillis()>"->"(595)<org.joda.time.DateTimeUtils$OffsetMillisProvider: long getMillis()>";
    "(562)<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>"
    "(98)<org.joda.time.DateTimeUtils: void setCurrentMillisFixed(long)>"->"(562)<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>";
    "(586)<org.joda.time.DateTimeUtils$OffsetMillisProvider: void <init>(long)>"
    "(113)<org.joda.time.DateTimeUtils: void setCurrentMillisOffset(long)>"->"(586)<org.joda.time.DateTimeUtils$OffsetMillisProvider: void <init>(long)>";
    "(132)<org.joda.time.DateTimeUtils: void setCurrentMillisProvider(org.joda.time.DateTimeUtils$MillisProvider)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>"
    "(145)<org.joda.time.DateTimeUtils: void checkPermission()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(256)<org.joda.time.Instant: long getMillis()>"
    "(162)<org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(180)<org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(159)<org.joda.time.Interval: void <init>(long,long)>"
    "(250)<org.joda.time.DateTimeUtils: org.joda.time.ReadableInterval getReadableInterval(org.joda.time.ReadableInterval)>"->"(159)<org.joda.time.Interval: void <init>(long,long)>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(350)<org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>";
    "<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>";
    "(381)<org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>"->"<java.text.DateFormatSymbols: void <init>(java.util.Locale)>";
    "<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>"
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>"
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>";
    "(413)<org.joda.time.DateTimeUtils: java.util.Map getDefaultTimeZoneNames()>"->"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>";
    "<java.util.HashMap: void <init>(java.util.Map)>"
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"<java.util.HashMap: void <init>(java.util.Map)>";
    "<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>"
    "(432)<org.joda.time.DateTimeUtils: void setDefaultTimeZoneNames(java.util.Map)>"->"<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>";
    "<java.util.LinkedHashMap: void <init>()>"
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.LinkedHashMap: void <init>()>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(438)<org.joda.time.DateTimeUtils: java.util.Map buildDefaultTimeZoneNames()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(454)<org.joda.time.DateTimeUtils: void put(java.util.Map,java.lang.String,java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(178)<org.joda.time.Duration: void <init>(long)>"
    "(45)<org.joda.time.Duration: void <clinit>()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(211)<org.joda.time.Duration: void <init>(java.lang.Object)>"
    "(61)<org.joda.time.Duration: org.joda.time.Duration parse(java.lang.String)>"->"(211)<org.joda.time.Duration: void <init>(java.lang.Object)>";
    "(83)<org.joda.time.Duration: org.joda.time.Duration standardDays(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(106)<org.joda.time.Duration: org.joda.time.Duration standardHours(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(129)<org.joda.time.Duration: org.joda.time.Duration standardMinutes(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(151)<org.joda.time.Duration: org.joda.time.Duration standardSeconds(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(165)<org.joda.time.Duration: org.joda.time.Duration millis(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(61)<org.joda.time.base.BaseDuration: void <init>(long)>"
    "(178)<org.joda.time.Duration: void <init>(long)>"->"(61)<org.joda.time.base.BaseDuration: void <init>(long)>";
    "(211)<org.joda.time.Duration: void <init>(java.lang.Object)>"->"(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>";
    "(374)<org.joda.time.Duration: org.joda.time.Duration withMillis(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(391)<org.joda.time.Duration: org.joda.time.Duration withDurationAdded(long,int)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(486)<org.joda.time.Duration: org.joda.time.Duration multipliedBy(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(503)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(521)<org.joda.time.Duration: org.joda.time.Duration dividedBy(long,java.math.RoundingMode)>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(534)<org.joda.time.Duration: org.joda.time.Duration negated()>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(534)<org.joda.time.Duration: org.joda.time.Duration negated()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(73)<org.joda.time.Instant: org.joda.time.Instant now()>"
    "(73)<org.joda.time.Instant: org.joda.time.Instant now()>"->"(108)<org.joda.time.Instant: void <init>()>";
    "(98)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>"
    "(98)<org.joda.time.Instant: org.joda.time.Instant parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(137)<org.joda.time.base.AbstractInstant: org.joda.time.Instant toInstant()>";
    "(61)<org.joda.time.base.AbstractInstant: void <init>()>"
    "(108)<org.joda.time.Instant: void <init>()>"->"(61)<org.joda.time.base.AbstractInstant: void <init>()>";
    "(118)<org.joda.time.Instant: void <init>(long)>"
    "(118)<org.joda.time.Instant: void <init>(long)>"->"(61)<org.joda.time.base.AbstractInstant: void <init>()>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(132)<org.joda.time.Instant: void <init>(java.lang.Object)>"->"(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(157)<org.joda.time.Instant: org.joda.time.Instant withMillis(long)>"
    "(157)<org.joda.time.Instant: org.joda.time.Instant withMillis(long)>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(171)<org.joda.time.Instant: org.joda.time.Instant withDurationAdded(long,int)>"
    "(171)<org.joda.time.Instant: org.joda.time.Instant withDurationAdded(long,int)>"->"(324)<org.joda.time.chrono.BaseChronology: long add(long,long,int)>";
    "(288)<org.joda.time.Instant: org.joda.time.DateTime toDateTime()>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(334)<org.joda.time.Instant: org.joda.time.MutableDateTime toMutableDateTime()>"->"(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(842)<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>"
    "(842)<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>"->"(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>";
    "(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>"
    "(899)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addToCopy(int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(923)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay addWrapFieldToCopy(int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(940)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(957)<org.joda.time.MonthDay$Property: org.joda.time.MonthDay setCopy(java.lang.String,java.util.Locale)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>"
    "(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>"->"(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>";
    "(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>"
    "(1010)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addToCopy(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(1034)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay addWrapFieldToCopy(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(1051)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(1068)<org.joda.time.YearMonthDay$Property: org.joda.time.YearMonthDay setCopy(java.lang.String,java.util.Locale)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"
    "(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>"
    "(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(1310)<org.joda.time.MutableDateTime$Property: void readObject(java.io.ObjectInputStream)>"
    "(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>"
    "(1310)<org.joda.time.MutableDateTime$Property: void readObject(java.io.ObjectInputStream)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>"
    "(1331)<org.joda.time.MutableDateTime$Property: long getMillis()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>"
    "(1341)<org.joda.time.MutableDateTime$Property: org.joda.time.Chronology getChronology()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(1362)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(int)>"
    "(1362)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(453)<org.joda.time.MutableDateTime: void setMillis(long)>"
    "(1362)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1374)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(long)>"
    "(1374)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(long)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1374)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime add(long)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1386)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime addWrapField(int)>"
    "(1386)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime addWrapField(int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1386)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime addWrapField(int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"
    "(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>"
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(1322)<org.joda.time.MutableDateTime$Property: org.joda.time.DateTimeField getField()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1413)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(java.lang.String,java.util.Locale)>"
    "(1413)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(java.lang.String,java.util.Locale)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1413)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(java.lang.String,java.util.Locale)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1438)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundFloor()>"
    "(1438)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundFloor()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1438)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundFloor()>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1449)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundCeiling()>"
    "(1449)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundCeiling()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1449)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundCeiling()>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1461)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfFloor()>"
    "(1461)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfFloor()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1461)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfFloor()>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1473)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfCeiling()>"
    "(1473)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfCeiling()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1473)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfCeiling()>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(1485)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfEven()>"
    "(1485)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfEven()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1485)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime roundHalfEven()>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(84)<org.joda.time.LocalTime: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(118)<org.joda.time.LocalTime: org.joda.time.LocalTime now()>"->"(288)<org.joda.time.LocalTime: void <init>()>";
    "(131)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(131)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.DateTimeZone)>"->"(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>";
    "(147)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(147)<org.joda.time.LocalTime: org.joda.time.LocalTime now(org.joda.time.Chronology)>"->"(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>";
    "(862)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>"
    "(175)<org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(862)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(205)<org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(234)<org.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(234)<org.joda.time.LocalTime: org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)>"->"(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>";
    "(267)<org.joda.time.LocalTime: org.joda.time.LocalTime fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(267)<org.joda.time.LocalTime: org.joda.time.LocalTime fromDateFields(java.util.Date)>"->"(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>";
    "(288)<org.joda.time.LocalTime: void <init>()>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(302)<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(316)<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>"
    "(404)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(430)<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(483)<org.joda.time.LocalTime: void <init>(int,int,int,int)>"->"(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(146)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(163)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(517)<org.joda.time.LocalTime: java.lang.Object readResolve()>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(548)<org.joda.time.LocalTime: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(574)<org.joda.time.LocalTime: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(604)<org.joda.time.LocalTime: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.HashSet: boolean contains(java.lang.Object)>"
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(640)<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(682)<org.joda.time.LocalTime: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(712)<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(738)<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(756)<org.joda.time.LocalTime: org.joda.time.LocalTime withFields(org.joda.time.ReadablePartial)>"
    "(756)<org.joda.time.LocalTime: org.joda.time.LocalTime withFields(org.joda.time.ReadablePartial)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(782)<org.joda.time.LocalTime: org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(815)<org.joda.time.LocalTime: org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(845)<org.joda.time.LocalTime: org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>"
    "(845)<org.joda.time.LocalTime: org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(887)<org.joda.time.LocalTime: org.joda.time.LocalTime plusHours(int)>"
    "(887)<org.joda.time.LocalTime: org.joda.time.LocalTime plusHours(int)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(887)<org.joda.time.LocalTime: org.joda.time.LocalTime plusHours(int)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(910)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMinutes(int)>"
    "(910)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMinutes(int)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(910)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMinutes(int)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(933)<org.joda.time.LocalTime: org.joda.time.LocalTime plusSeconds(int)>"
    "(933)<org.joda.time.LocalTime: org.joda.time.LocalTime plusSeconds(int)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(933)<org.joda.time.LocalTime: org.joda.time.LocalTime plusSeconds(int)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(956)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMillis(int)>"
    "(956)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMillis(int)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(956)<org.joda.time.LocalTime: org.joda.time.LocalTime plusMillis(int)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(998)<org.joda.time.LocalTime: org.joda.time.LocalTime minusHours(int)>"
    "(998)<org.joda.time.LocalTime: org.joda.time.LocalTime minusHours(int)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(998)<org.joda.time.LocalTime: org.joda.time.LocalTime minusHours(int)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(1021)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMinutes(int)>"
    "(1021)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMinutes(int)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(1021)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMinutes(int)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(1044)<org.joda.time.LocalTime: org.joda.time.LocalTime minusSeconds(int)>"
    "(1044)<org.joda.time.LocalTime: org.joda.time.LocalTime minusSeconds(int)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(1044)<org.joda.time.LocalTime: org.joda.time.LocalTime minusSeconds(int)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(1067)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMillis(int)>"
    "(1067)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMillis(int)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(1067)<org.joda.time.LocalTime: org.joda.time.LocalTime minusMillis(int)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>"
    "(1084)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1100)<org.joda.time.LocalTime: int getHourOfDay()>"
    "(1100)<org.joda.time.LocalTime: int getHourOfDay()>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1100)<org.joda.time.LocalTime: int getHourOfDay()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1109)<org.joda.time.LocalTime: int getMinuteOfHour()>"
    "(1109)<org.joda.time.LocalTime: int getMinuteOfHour()>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1109)<org.joda.time.LocalTime: int getMinuteOfHour()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1118)<org.joda.time.LocalTime: int getSecondOfMinute()>"
    "(1118)<org.joda.time.LocalTime: int getSecondOfMinute()>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1118)<org.joda.time.LocalTime: int getSecondOfMinute()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1127)<org.joda.time.LocalTime: int getMillisOfSecond()>"
    "(1127)<org.joda.time.LocalTime: int getMillisOfSecond()>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1127)<org.joda.time.LocalTime: int getMillisOfSecond()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1136)<org.joda.time.LocalTime: int getMillisOfDay()>"
    "(1136)<org.joda.time.LocalTime: int getMillisOfDay()>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1136)<org.joda.time.LocalTime: int getMillisOfDay()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1152)<org.joda.time.LocalTime: org.joda.time.LocalTime withHourOfDay(int)>"
    "(1152)<org.joda.time.LocalTime: org.joda.time.LocalTime withHourOfDay(int)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1152)<org.joda.time.LocalTime: org.joda.time.LocalTime withHourOfDay(int)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1167)<org.joda.time.LocalTime: org.joda.time.LocalTime withMinuteOfHour(int)>"
    "(1167)<org.joda.time.LocalTime: org.joda.time.LocalTime withMinuteOfHour(int)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1167)<org.joda.time.LocalTime: org.joda.time.LocalTime withMinuteOfHour(int)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1182)<org.joda.time.LocalTime: org.joda.time.LocalTime withSecondOfMinute(int)>"
    "(1182)<org.joda.time.LocalTime: org.joda.time.LocalTime withSecondOfMinute(int)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1182)<org.joda.time.LocalTime: org.joda.time.LocalTime withSecondOfMinute(int)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1197)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfSecond(int)>"
    "(1197)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfSecond(int)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1197)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfSecond(int)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1212)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfDay(int)>"
    "(1212)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfDay(int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1212)<org.joda.time.LocalTime: org.joda.time.LocalTime withMillisOfDay(int)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1222)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property hourOfDay()>"
    "(1222)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property hourOfDay()>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1222)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property hourOfDay()>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(1222)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property hourOfDay()>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1231)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property minuteOfHour()>"
    "(1231)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property minuteOfHour()>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1231)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property minuteOfHour()>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(1231)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property minuteOfHour()>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1240)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property secondOfMinute()>"
    "(1240)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property secondOfMinute()>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1240)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property secondOfMinute()>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(1240)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property secondOfMinute()>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1249)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfSecond()>"
    "(1249)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfSecond()>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1249)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfSecond()>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(1249)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfSecond()>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1258)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfDay()>"
    "(1258)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfDay()>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1258)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfDay()>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1258)<org.joda.time.LocalTime: org.joda.time.LocalTime$Property millisOfDay()>"->"(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(1285)<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1299)<org.joda.time.LocalTime: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(1309)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(1323)<org.joda.time.LocalTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(198)<org.joda.time.Weeks: void <init>(int)>"
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>"
    "(45)<org.joda.time.Weeks: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(72)<org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>"->"(198)<org.joda.time.Weeks: void <init>(int)>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(118)<org.joda.time.Weeks: org.joda.time.Weeks weeksBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>"
    "(182)<org.joda.time.Weeks: org.joda.time.Weeks parseWeeks(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>"
    "(198)<org.joda.time.Weeks: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(318)<org.joda.time.Weeks: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(474)<org.joda.time.Weeks: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(71)<org.joda.time.MutableInterval: org.joda.time.MutableInterval parse(java.lang.String)>"
    "(186)<org.joda.time.MutableInterval: void <init>(java.lang.Object)>"
    "(71)<org.joda.time.MutableInterval: org.joda.time.MutableInterval parse(java.lang.String)>"->"(186)<org.joda.time.MutableInterval: void <init>(java.lang.Object)>";
    "(186)<org.joda.time.MutableInterval: void <init>(java.lang.Object)>"->"(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>";
    "(227)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInterval)>"
    "(227)<org.joda.time.MutableInterval: void setInterval(org.joda.time.ReadableInterval)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"
    "<java.lang.Object: java.lang.Object clone()>"
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(408)<org.joda.time.MutableInterval: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(541)<org.joda.time.DateTimeUtils$SystemMillisProvider: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(586)<org.joda.time.DateTimeUtils$OffsetMillisProvider: void <init>(long)>"->"<java.lang.Object: void <init>()>";
    "(95)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now()>"
    "(164)<org.joda.time.DateMidnight: void <init>()>"
    "(95)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now()>"->"(164)<org.joda.time.DateMidnight: void <init>()>";
    "(108)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.DateTimeZone)>"
    "(108)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(178)<org.joda.time.DateMidnight: void <init>(org.joda.time.DateTimeZone)>"
    "(108)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.DateTimeZone)>"->"(178)<org.joda.time.DateMidnight: void <init>(org.joda.time.DateTimeZone)>";
    "(124)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.Chronology)>"
    "(124)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(193)<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>"
    "(124)<org.joda.time.DateMidnight: org.joda.time.DateMidnight now(org.joda.time.Chronology)>"->"(193)<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>";
    "(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>"
    "(141)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String)>"->"(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>";
    "(152)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(1553)<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>"
    "(152)<org.joda.time.DateMidnight: org.joda.time.DateMidnight parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(1553)<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>";
    "(164)<org.joda.time.DateMidnight: void <init>()>"->"(61)<org.joda.time.base.BaseDateTime: void <init>()>";
    "(178)<org.joda.time.DateMidnight: void <init>(org.joda.time.DateTimeZone)>"->"(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(193)<org.joda.time.DateMidnight: void <init>(org.joda.time.Chronology)>"->"(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>";
    "(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>"
    "(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>"
    "(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(350)<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>"
    "(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"
    "(350)<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>"->"(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(376)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>"
    "(376)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>"->"(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>";
    "(403)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withChronology(org.joda.time.Chronology)>"
    "(403)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withChronology(org.joda.time.Chronology)>"->"(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "(415)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>";
    "(465)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withField(org.joda.time.DateTimeFieldType,int)>"
    "(465)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(491)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(491)<org.joda.time.DateMidnight: org.joda.time.DateMidnight withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>"
    "(851)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property property(org.joda.time.DateTimeFieldType)>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(211)<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>"
    "(871)<org.joda.time.DateMidnight: org.joda.time.YearMonthDay toYearMonthDay()>"->"(211)<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>";
    "(882)<org.joda.time.DateMidnight: org.joda.time.LocalDate toLocalDate()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>"
    "(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(1097)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property era()>"
    "(1097)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property era()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1106)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property centuryOfEra()>"
    "(1106)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property centuryOfEra()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1115)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property yearOfCentury()>"
    "(1115)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property yearOfCentury()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1124)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property yearOfEra()>"
    "(1124)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property yearOfEra()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1133)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property year()>"
    "(1133)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property year()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1142)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property weekyear()>"
    "(1142)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property weekyear()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1151)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property monthOfYear()>"
    "(1151)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property monthOfYear()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1160)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property weekOfWeekyear()>"
    "(1160)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property weekOfWeekyear()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1169)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfYear()>"
    "(1169)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfYear()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1178)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfMonth()>"
    "(1178)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfMonth()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(1187)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfWeek()>"
    "(1187)<org.joda.time.DateMidnight: org.joda.time.DateMidnight$Property dayOfWeek()>"->"(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>";
    "(89)<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>"->"(105)<org.joda.time.convert.ConverterManager: void <init>()>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>"
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(105)<org.joda.time.convert.ConverterManager: void <init>()>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.Class: java.lang.String getName()>"
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.Class: java.lang.String getName()>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(176)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter[] getInstantConverters()>"
    "(118)<org.joda.time.convert.ConverterSet: int size()>"
    "(176)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter[] getInstantConverters()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(176)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter[] getInstantConverters()>"->"(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>";
    "(196)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter addInstantConverter(org.joda.time.convert.InstantConverter)>"
    "(196)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter addInstantConverter(org.joda.time.convert.InstantConverter)>"->"(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(215)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter removeInstantConverter(org.joda.time.convert.InstantConverter)>"
    "(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"
    "(215)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter removeInstantConverter(org.joda.time.convert.InstantConverter)>"->"(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(230)<org.joda.time.convert.ConverterManager: void checkAlterInstantConverters()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"<java.lang.Class: java.lang.String getName()>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(263)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter[] getPartialConverters()>"
    "(263)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter[] getPartialConverters()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(263)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter[] getPartialConverters()>"->"(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>";
    "(283)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter addPartialConverter(org.joda.time.convert.PartialConverter)>"
    "(283)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter addPartialConverter(org.joda.time.convert.PartialConverter)>"->"(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(302)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter removePartialConverter(org.joda.time.convert.PartialConverter)>"
    "(302)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter removePartialConverter(org.joda.time.convert.PartialConverter)>"->"(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(317)<org.joda.time.convert.ConverterManager: void checkAlterPartialConverters()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"<java.lang.Class: java.lang.String getName()>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(350)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter[] getDurationConverters()>"
    "(350)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter[] getDurationConverters()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(350)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter[] getDurationConverters()>"->"(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>";
    "(370)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter addDurationConverter(org.joda.time.convert.DurationConverter)>"
    "(370)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter addDurationConverter(org.joda.time.convert.DurationConverter)>"->"(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(389)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter removeDurationConverter(org.joda.time.convert.DurationConverter)>"
    "(389)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter removeDurationConverter(org.joda.time.convert.DurationConverter)>"->"(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(404)<org.joda.time.convert.ConverterManager: void checkAlterDurationConverters()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"<java.lang.Class: java.lang.String getName()>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(437)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter[] getPeriodConverters()>"
    "(437)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter[] getPeriodConverters()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(437)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter[] getPeriodConverters()>"->"(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>";
    "(457)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter addPeriodConverter(org.joda.time.convert.PeriodConverter)>"
    "(457)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter addPeriodConverter(org.joda.time.convert.PeriodConverter)>"->"(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(476)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter removePeriodConverter(org.joda.time.convert.PeriodConverter)>"
    "(476)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter removePeriodConverter(org.joda.time.convert.PeriodConverter)>"->"(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(491)<org.joda.time.convert.ConverterManager: void checkAlterPeriodConverters()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"<java.lang.Class: java.lang.String getName()>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(524)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter[] getIntervalConverters()>"
    "(524)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter[] getIntervalConverters()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(524)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter[] getIntervalConverters()>"->"(125)<org.joda.time.convert.ConverterSet: void copyInto(org.joda.time.convert.Converter[])>";
    "(544)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter addIntervalConverter(org.joda.time.convert.IntervalConverter)>"
    "(544)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter addIntervalConverter(org.joda.time.convert.IntervalConverter)>"->"(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(563)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter removeIntervalConverter(org.joda.time.convert.IntervalConverter)>"
    "(563)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter removeIntervalConverter(org.joda.time.convert.IntervalConverter)>"->"(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>";
    "(578)<org.joda.time.convert.ConverterManager: void checkAlterIntervalConverters()>"->"(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"(118)<org.joda.time.convert.ConverterSet: int size()>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(589)<org.joda.time.convert.ConverterManager: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(50)<org.joda.time.convert.StringConverter: void <init>()>"
    "(44)<org.joda.time.convert.StringConverter: void <clinit>()>"->"(50)<org.joda.time.convert.StringConverter: void <init>()>";
    "(38)<org.joda.time.convert.AbstractConverter: void <init>()>"
    "(50)<org.joda.time.convert.StringConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"
    "(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"
    "(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>";
    "(368)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>"
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(368)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(368)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone getZone()>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(223)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePartial,long)>"
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(223)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePartial,long)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: char charAt(int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: char charAt(int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: char charAt(int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: char charAt(int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: int length()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: int length()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: int length()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(41)<org.joda.time.convert.DateConverter: void <init>()>"
    "(35)<org.joda.time.convert.DateConverter: void <clinit>()>"->"(41)<org.joda.time.convert.DateConverter: void <init>()>";
    "(41)<org.joda.time.convert.DateConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"<java.util.Date: long getTime()>";
    "(42)<org.joda.time.convert.ReadableDurationConverter: void <init>()>"
    "(36)<org.joda.time.convert.ReadableDurationConverter: void <clinit>()>"->"(42)<org.joda.time.convert.ReadableDurationConverter: void <init>()>";
    "(42)<org.joda.time.convert.ReadableDurationConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>"
    "(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "(40)<org.joda.time.convert.LongConverter: void <init>()>"
    "(34)<org.joda.time.convert.LongConverter: void <clinit>()>"->"(40)<org.joda.time.convert.LongConverter: void <init>()>";
    "(40)<org.joda.time.convert.LongConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"<java.lang.Long: long longValue()>";
    "(42)<org.joda.time.convert.ReadableIntervalConverter: void <init>()>"
    "(36)<org.joda.time.convert.ReadableIntervalConverter: void <clinit>()>"->"(42)<org.joda.time.convert.ReadableIntervalConverter: void <init>()>";
    "(42)<org.joda.time.convert.ReadableIntervalConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>"
    "(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(42)<org.joda.time.convert.ReadablePeriodConverter: void <init>()>"
    "(36)<org.joda.time.convert.ReadablePeriodConverter: void <clinit>()>"->"(42)<org.joda.time.convert.ReadablePeriodConverter: void <init>()>";
    "(42)<org.joda.time.convert.ReadablePeriodConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(322)<org.joda.time.convert.ConverterSet$Entry: void <init>(java.lang.Class,org.joda.time.convert.Converter)>"
    "(322)<org.joda.time.convert.ConverterSet$Entry: void <init>(java.lang.Class,org.joda.time.convert.Converter)>"->"<java.lang.Object: void <init>()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(158)<org.joda.time.convert.AbstractConverter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(41)<org.joda.time.convert.ReadablePartialConverter: void <init>()>"
    "(35)<org.joda.time.convert.ReadablePartialConverter: void <clinit>()>"->"(41)<org.joda.time.convert.ReadablePartialConverter: void <init>()>";
    "(41)<org.joda.time.convert.ReadablePartialConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(87)<org.joda.time.convert.ReadablePartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>"
    "(87)<org.joda.time.convert.ReadablePartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(49)<org.joda.time.convert.CalendarConverter: void <init>()>"
    "(43)<org.joda.time.convert.CalendarConverter: void <clinit>()>"->"(49)<org.joda.time.convert.CalendarConverter: void <init>()>";
    "(49)<org.joda.time.convert.CalendarConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.lang.Class: java.lang.String getName()>";
    "(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"<java.util.Date: long getTime()>";
    "(45)<org.joda.time.convert.NullConverter: void <init>()>"
    "(39)<org.joda.time.convert.NullConverter: void <clinit>()>"->"(45)<org.joda.time.convert.NullConverter: void <init>()>";
    "(45)<org.joda.time.convert.NullConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(42)<org.joda.time.convert.ReadableInstantConverter: void <init>()>"
    "(36)<org.joda.time.convert.ReadableInstantConverter: void <clinit>()>"->"(42)<org.joda.time.convert.ReadableInstantConverter: void <init>()>";
    "(42)<org.joda.time.convert.ReadableInstantConverter: void <init>()>"->"(38)<org.joda.time.convert.AbstractConverter: void <init>()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(268)<org.joda.time.Instant: org.joda.time.Chronology getChronology()>";
    "(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>"->"<java.lang.Object: void <init>()>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.Object: int hashCode()>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"(322)<org.joda.time.convert.ConverterSet$Entry: void <init>(java.lang.Class,org.joda.time.convert.Converter)>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.lang.Enum: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<java.util.LinkedList: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "<java.text.DecimalFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<java.util.Calendar: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Calendar: java.lang.Object clone()>";
    "<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<java.util.ArrayDeque: java.util.ArrayDeque clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "<java.util.SimpleTimeZone: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<sun.text.CompactByteArray: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<java.text.SimpleDateFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<java.text.ChoiceFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<sun.net.www.MimeEntry: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<java.util.Date: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Date: java.lang.Object clone()>";
    "<sun.text.IntHashtable: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<java.text.NumberFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "<java.lang.ref.Reference: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "<sun.security.util.BitArray: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "<java.util.Locale: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Locale: java.lang.Object clone()>";
    "<sun.net.ProgressSource: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<java.util.jar.Manifest: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<java.util.TreeSet: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "<java.security.MessageDigestSpi: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "<java.security.Signature: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.Signature: java.lang.Object clone()>";
    "<java.util.Properties: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Properties: java.lang.Object clone()>";
    "<java.util.TreeMap: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<java.util.jar.Attributes: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<java.text.RuleBasedCollator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<java.util.HashSet: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<java.util.Hashtable: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<java.util.AbstractMap: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<java.text.MessageFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<java.text.DigitList: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<java.text.DateFormat: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "<java.security.MessageDigest: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "<java.util.Vector: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Vector: java.lang.Object clone()>";
    "<java.text.BreakIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "<java.security.Signature$Delegate: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<java.util.ArrayList: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<java.util.Hashtable$Entry: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<java.util.JapaneseImperialCalendar: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<java.text.Collator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.Collator: java.lang.Object clone()>";
    "<java.util.HashMap: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<java.text.StringCharacterIterator: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<java.text.Format: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.Format: java.lang.Object clone()>";
    "<java.util.TimeZone: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<java.util.EnumMap: java.util.EnumMap clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "<java.security.MessageDigest$Delegate: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<java.util.GregorianCalendar: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<java.util.zip.ZipEntry: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<java.text.DateFormatSymbols: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<java.util.EnumSet: java.util.EnumSet clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "<java.lang.Thread: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<java.util.JumboEnumSet: java.util.EnumSet clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "<java.security.SignatureSpi: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "<java.util.BitSet: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<java.text.DecimalFormatSymbols: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<java.util.IdentityHashMap: java.lang.Object clone()>"
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(49)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>"->"<java.lang.Object: int hashCode()>";
    "(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>"
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(139)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet add(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>"
    "(191)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(org.joda.time.convert.Converter,org.joda.time.convert.Converter[])>"->"(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>";
    "<java.lang.IndexOutOfBoundsException: void <init>()>"
    "(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>"->"<java.lang.IndexOutOfBoundsException: void <init>()>";
    "(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>"->"(32)<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>"
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(216)<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: void <init>()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Class: java.lang.String getName()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(66)<org.joda.time.convert.DateConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(81)<org.joda.time.convert.ReadablePeriodConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(77)<org.joda.time.convert.LongConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(113)<org.joda.time.convert.ReadableIntervalConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(132)<org.joda.time.convert.CalendarConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(88)<org.joda.time.convert.ReadableDurationConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(110)<org.joda.time.convert.ReadableInstantConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(247)<org.joda.time.convert.StringConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(104)<org.joda.time.convert.ReadablePartialConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"(95)<org.joda.time.convert.NullConverter: java.lang.Class getSupportedType()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Class: java.lang.String getName()>";
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.IllegalStateException: void <init>(java.lang.String)>"
    "(243)<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(105)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now()>"
    "(171)<org.joda.time.MutableDateTime: void <init>()>"
    "(105)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now()>"->"(171)<org.joda.time.MutableDateTime: void <init>()>";
    "(117)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone)>"
    "(117)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.MutableDateTime: void <init>(org.joda.time.DateTimeZone)>"
    "(117)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.DateTimeZone)>"->"(184)<org.joda.time.MutableDateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(132)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.Chronology)>"
    "(132)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(198)<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>"
    "(132)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime now(org.joda.time.Chronology)>"->"(198)<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>";
    "(149)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String)>"->"(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>";
    "(160)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>"
    "(160)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>";
    "(171)<org.joda.time.MutableDateTime: void <init>()>"->"(61)<org.joda.time.base.BaseDateTime: void <init>()>";
    "(184)<org.joda.time.MutableDateTime: void <init>(org.joda.time.DateTimeZone)>"->"(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(198)<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>"->"(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>";
    "(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"
    "(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(435)<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>"
    "(435)<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(435)<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(435)<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(435)<org.joda.time.MutableDateTime: void setRounding(org.joda.time.DateTimeField,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(327)<org.joda.time.base.BaseDateTime: void setMillis(long)>"
    "(453)<org.joda.time.MutableDateTime: void setMillis(long)>"->"(327)<org.joda.time.base.BaseDateTime: void setMillis(long)>";
    "(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"
    "(339)<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>"
    "(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>"->"(339)<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>"->"(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "(600)<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>"->"(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "(620)<org.joda.time.MutableDateTime: void set(org.joda.time.DateTimeFieldType,int)>"
    "(620)<org.joda.time.MutableDateTime: void set(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(635)<org.joda.time.MutableDateTime: void add(org.joda.time.DurationFieldType,int)>"
    "(635)<org.joda.time.MutableDateTime: void add(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(931)<org.joda.time.MutableDateTime: void setDate(org.joda.time.ReadableInstant)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(970)<org.joda.time.MutableDateTime: void setTime(long)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(982)<org.joda.time.MutableDateTime: void setTime(org.joda.time.ReadableInstant)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1062)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property era()>"
    "(1062)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property era()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1071)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property centuryOfEra()>"
    "(1071)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property centuryOfEra()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1080)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property yearOfCentury()>"
    "(1080)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property yearOfCentury()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1089)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property yearOfEra()>"
    "(1089)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property yearOfEra()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1098)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property year()>"
    "(1098)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property year()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1107)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property weekyear()>"
    "(1107)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property weekyear()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1116)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property monthOfYear()>"
    "(1116)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property monthOfYear()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1125)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property weekOfWeekyear()>"
    "(1125)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property weekOfWeekyear()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1134)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfYear()>"
    "(1134)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfYear()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1145)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfMonth()>"
    "(1145)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfMonth()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1156)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfWeek()>"
    "(1156)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property dayOfWeek()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1166)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property hourOfDay()>"
    "(1166)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property hourOfDay()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1178)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property minuteOfDay()>"
    "(1178)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property minuteOfDay()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1187)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property minuteOfHour()>"
    "(1187)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property minuteOfHour()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1199)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property secondOfDay()>"
    "(1199)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property secondOfDay()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1208)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property secondOfMinute()>"
    "(1208)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property secondOfMinute()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1220)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property millisOfDay()>"
    "(1220)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property millisOfDay()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1229)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property millisOfSecond()>"
    "(1229)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property millisOfSecond()>"->"(1293)<org.joda.time.MutableDateTime$Property: void <init>(org.joda.time.MutableDateTime,org.joda.time.DateTimeField)>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"
    "(79)<org.joda.time.MonthDay: void <clinit>()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(221)<org.joda.time.MonthDay: void <init>()>"
    "(103)<org.joda.time.MonthDay: org.joda.time.MonthDay now()>"->"(221)<org.joda.time.MonthDay: void <init>()>";
    "(116)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(116)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>";
    "(132)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(251)<org.joda.time.MonthDay: void <init>(org.joda.time.Chronology)>"
    "(132)<org.joda.time.MonthDay: org.joda.time.MonthDay now(org.joda.time.Chronology)>"->"(251)<org.joda.time.MonthDay: void <init>(org.joda.time.Chronology)>";
    "(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>"
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>";
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(1499)<org.joda.time.LocalDate: int getMonthOfYear()>";
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(1533)<org.joda.time.LocalDate: int getDayOfMonth()>";
    "(334)<org.joda.time.MonthDay: void <init>(int,int)>"
    "(160)<org.joda.time.MonthDay: org.joda.time.MonthDay parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(334)<org.joda.time.MonthDay: void <init>(int,int)>";
    "(182)<org.joda.time.MonthDay: org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(182)<org.joda.time.MonthDay: org.joda.time.MonthDay fromCalendarFields(java.util.Calendar)>"->"(334)<org.joda.time.MonthDay: void <init>(int,int)>";
    "(203)<org.joda.time.MonthDay: org.joda.time.MonthDay fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(203)<org.joda.time.MonthDay: org.joda.time.MonthDay fromDateFields(java.util.Date)>"->"(334)<org.joda.time.MonthDay: void <init>(int,int)>";
    "(221)<org.joda.time.MonthDay: void <init>()>"->"(65)<org.joda.time.base.BasePartial: void <init>()>";
    "(236)<org.joda.time.MonthDay: void <init>(org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>";
    "(251)<org.joda.time.MonthDay: void <init>(org.joda.time.Chronology)>"->"(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>";
    "(352)<org.joda.time.MonthDay: void <init>(int,int,org.joda.time.Chronology)>"
    "(334)<org.joda.time.MonthDay: void <init>(int,int)>"->"(352)<org.joda.time.MonthDay: void <init>(int,int,org.joda.time.Chronology)>";
    "(352)<org.joda.time.MonthDay: void <init>(int,int,org.joda.time.Chronology)>"->"(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "(196)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>"
    "(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>"->"(196)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>";
    "(372)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>"
    "(211)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>"
    "(372)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>"->"(211)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>";
    "(380)<org.joda.time.MonthDay: java.lang.Object readResolve()>"->"(372)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(408)<org.joda.time.MonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(437)<org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(372)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,org.joda.time.Chronology)>";
    "(456)<org.joda.time.MonthDay: org.joda.time.MonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(486)<org.joda.time.MonthDay: org.joda.time.MonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(514)<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(540)<org.joda.time.MonthDay: org.joda.time.MonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(686)<org.joda.time.MonthDay: org.joda.time.LocalDate toLocalDate(int)>"->"(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(721)<org.joda.time.MonthDay: org.joda.time.MonthDay withMonthOfYear(int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(738)<org.joda.time.MonthDay: org.joda.time.MonthDay withDayOfMonth(int)>"->"(362)<org.joda.time.MonthDay: void <init>(org.joda.time.MonthDay,int[])>";
    "(753)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property property(org.joda.time.DateTimeFieldType)>"
    "(753)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property property(org.joda.time.DateTimeFieldType)>"->"(842)<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>";
    "(763)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property monthOfYear()>"
    "(763)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property monthOfYear()>"->"(842)<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>";
    "(772)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property dayOfMonth()>"
    "(772)<org.joda.time.MonthDay: org.joda.time.MonthDay$Property dayOfMonth()>"->"(842)<org.joda.time.MonthDay$Property: void <init>(org.joda.time.MonthDay,int)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: void <init>()>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(783)<org.joda.time.MonthDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(796)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(810)<org.joda.time.MonthDay: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(213)<org.joda.time.YearMonth: void <init>()>"
    "(95)<org.joda.time.YearMonth: org.joda.time.YearMonth now()>"->"(213)<org.joda.time.YearMonth: void <init>()>";
    "(108)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(108)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.DateTimeZone)>"->"(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>";
    "(124)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(243)<org.joda.time.YearMonth: void <init>(org.joda.time.Chronology)>"
    "(124)<org.joda.time.YearMonth: org.joda.time.YearMonth now(org.joda.time.Chronology)>"->"(243)<org.joda.time.YearMonth: void <init>(org.joda.time.Chronology)>";
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(1475)<org.joda.time.LocalDate: int getYear()>";
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(1499)<org.joda.time.LocalDate: int getMonthOfYear()>";
    "(326)<org.joda.time.YearMonth: void <init>(int,int)>"
    "(152)<org.joda.time.YearMonth: org.joda.time.YearMonth parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(326)<org.joda.time.YearMonth: void <init>(int,int)>";
    "(174)<org.joda.time.YearMonth: org.joda.time.YearMonth fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(174)<org.joda.time.YearMonth: org.joda.time.YearMonth fromCalendarFields(java.util.Calendar)>"->"(326)<org.joda.time.YearMonth: void <init>(int,int)>";
    "(195)<org.joda.time.YearMonth: org.joda.time.YearMonth fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(195)<org.joda.time.YearMonth: org.joda.time.YearMonth fromDateFields(java.util.Date)>"->"(326)<org.joda.time.YearMonth: void <init>(int,int)>";
    "(213)<org.joda.time.YearMonth: void <init>()>"->"(65)<org.joda.time.base.BasePartial: void <init>()>";
    "(228)<org.joda.time.YearMonth: void <init>(org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>";
    "(243)<org.joda.time.YearMonth: void <init>(org.joda.time.Chronology)>"->"(79)<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>";
    "(344)<org.joda.time.YearMonth: void <init>(int,int,org.joda.time.Chronology)>"
    "(326)<org.joda.time.YearMonth: void <init>(int,int)>"->"(344)<org.joda.time.YearMonth: void <init>(int,int,org.joda.time.Chronology)>";
    "(344)<org.joda.time.YearMonth: void <init>(int,int,org.joda.time.Chronology)>"->"(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>"
    "(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>"->"(196)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>";
    "(364)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>"
    "(364)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>"->"(211)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>";
    "(372)<org.joda.time.YearMonth: java.lang.Object readResolve()>"->"(364)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(400)<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(429)<org.joda.time.YearMonth: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(364)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,org.joda.time.Chronology)>";
    "(448)<org.joda.time.YearMonth: org.joda.time.YearMonth withChronologyRetainFields(org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(478)<org.joda.time.YearMonth: org.joda.time.YearMonth withField(org.joda.time.DateTimeFieldType,int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(506)<org.joda.time.YearMonth: org.joda.time.YearMonth withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(532)<org.joda.time.YearMonth: org.joda.time.YearMonth withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(710)<org.joda.time.YearMonth: int getYear()>"
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"(710)<org.joda.time.YearMonth: int getYear()>";
    "(719)<org.joda.time.YearMonth: int getMonthOfYear()>"
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"(719)<org.joda.time.YearMonth: int getMonthOfYear()>";
    "(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>"
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"(249)<org.joda.time.base.BasePartial: org.joda.time.Chronology getChronology()>";
    "(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>"->"(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(669)<org.joda.time.YearMonth: org.joda.time.LocalDate toLocalDate(int)>";
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>";
    "(199)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"
    "(697)<org.joda.time.YearMonth: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "(225)<org.joda.time.base.BasePartial: int getValue(int)>"
    "(710)<org.joda.time.YearMonth: int getYear()>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(719)<org.joda.time.YearMonth: int getMonthOfYear()>"->"(225)<org.joda.time.base.BasePartial: int getValue(int)>";
    "(735)<org.joda.time.YearMonth: org.joda.time.YearMonth withYear(int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(752)<org.joda.time.YearMonth: org.joda.time.YearMonth withMonthOfYear(int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(767)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property property(org.joda.time.DateTimeFieldType)>"
    "(853)<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>"
    "(767)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property property(org.joda.time.DateTimeFieldType)>"->"(853)<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>";
    "(777)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property year()>"
    "(777)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property year()>"->"(853)<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>";
    "(786)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property monthOfYear()>"
    "(786)<org.joda.time.YearMonth: org.joda.time.YearMonth$Property monthOfYear()>"->"(853)<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>";
    "(797)<org.joda.time.YearMonth: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(807)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(821)<org.joda.time.YearMonth: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(210)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(278)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetHoursMinutes(int,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(312)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: int length()>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.String: char charAt(int)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(335)<org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.Collections$UnmodifiableCollection: int size()>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$UnmodifiableCollection: boolean contains(java.lang.Object)>";
    "<java.util.Collections$SingletonSet: int size()>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$SingletonSet: int size()>";
    "<java.util.Collections$SingletonSet: boolean contains(java.lang.Object)>"
    "(470)<org.joda.time.DateTimeZone: org.joda.time.tz.Provider validateProvider(org.joda.time.tz.Provider)>"->"<java.util.Collections$SingletonSet: boolean contains(java.lang.Object)>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(90)<org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(130)<org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(332)<org.joda.time.base.BaseSingleFieldPeriod: int compareTo(org.joda.time.base.BaseSingleFieldPeriod)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(187)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(219)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DurationFieldType)>"
    "(219)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DurationFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(219)<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DurationFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(240)<org.joda.time.base.AbstractPartial: org.joda.time.DateTime toDateTime(org.joda.time.ReadableInstant)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(428)<org.joda.time.chrono.GJChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(144)<org.joda.time.chrono.StrictChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(321)<org.joda.time.chrono.LimitChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(144)<org.joda.time.chrono.LenientChronology: int hashCode()>";
    "(280)<org.joda.time.base.AbstractPartial: int hashCode()>"->"(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>";
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(335)<org.joda.time.convert.ConverterManager: org.joda.time.convert.DurationConverter getDurationConverter(java.lang.Object)>";
    "(67)<org.joda.time.convert.LongConverter: long getDurationMillis(java.lang.Object)>"
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(67)<org.joda.time.convert.LongConverter: long getDurationMillis(java.lang.Object)>";
    "(52)<org.joda.time.convert.ReadableIntervalConverter: long getDurationMillis(java.lang.Object)>"
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(52)<org.joda.time.convert.ReadableIntervalConverter: long getDurationMillis(java.lang.Object)>";
    "(56)<org.joda.time.convert.ReadableDurationConverter: long getDurationMillis(java.lang.Object)>"
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(56)<org.joda.time.convert.ReadableDurationConverter: long getDurationMillis(java.lang.Object)>";
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(102)<org.joda.time.convert.StringConverter: long getDurationMillis(java.lang.Object)>";
    "(56)<org.joda.time.convert.NullConverter: long getDurationMillis(java.lang.Object)>"
    "(103)<org.joda.time.base.BaseDuration: void <init>(java.lang.Object)>"->"(56)<org.joda.time.convert.NullConverter: long getDurationMillis(java.lang.Object)>";
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"
    "(56)<org.joda.time.base.AbstractPeriod: int size()>"->"(617)<org.joda.time.PeriodType: int size()>";
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"
    "(628)<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>"
    "(68)<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>"->"(628)<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>";
    "(127)<org.joda.time.base.AbstractPeriod: boolean isSupported(org.joda.time.DurationFieldType)>"
    "(127)<org.joda.time.base.AbstractPeriod: boolean isSupported(org.joda.time.DurationFieldType)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"
    "(137)<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>"->"(648)<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>";
    "(228)<org.joda.time.base.AbstractPeriod: java.lang.String toString()>"->"(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(223)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePartial,long)>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(101)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>"
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(101)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(87)<org.joda.time.convert.ReadablePartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology)>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(131)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(158)<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(292)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(306)<org.joda.time.base.BasePartial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"
    "(325)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String)>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(340)<org.joda.time.base.AbstractDateTime: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(500)<org.joda.time.base.AbstractInterval: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"
    "(71)<org.joda.time.base.AbstractInstant: org.joda.time.DateTimeZone getZone()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(165)<org.joda.time.base.AbstractInstant: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(210)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"
    "(279)<org.joda.time.base.AbstractInstant: int hashCode()>"->"(196)<org.joda.time.chrono.ISOChronology: int hashCode()>";
    "(424)<org.joda.time.base.AbstractInstant: java.lang.String toString()>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(147)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(161)<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(55)<org.joda.time.convert.DateConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(54)<org.joda.time.convert.LongConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(121)<org.joda.time.convert.CalendarConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.convert.StringConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(100)<org.joda.time.convert.ReadableInstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(170)<org.joda.time.base.BaseDateTime: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(52)<org.joda.time.convert.AbstractConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>";
    "(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(509)<org.joda.time.convert.ConverterManager: org.joda.time.convert.IntervalConverter getIntervalConverter(java.lang.Object)>";
    "(86)<org.joda.time.convert.ReadableIntervalConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>"
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(86)<org.joda.time.convert.ReadableIntervalConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>";
    "(99)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>"
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(99)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(99)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(148)<org.joda.time.convert.AbstractConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>"
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(148)<org.joda.time.convert.AbstractConverter: boolean isReadableInterval(java.lang.Object,org.joda.time.Chronology)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(184)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritableInterval,java.lang.Object,org.joda.time.Chronology)>";
    "(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(122)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(155)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.PeriodType)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(194)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration,org.joda.time.PeriodType)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(212)<org.joda.time.base.BasePeriod: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant,org.joda.time.PeriodType)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(231)<org.joda.time.base.BasePeriod: void <init>(long)>"->"(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(422)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PeriodConverter getPeriodConverter(java.lang.Object)>";
    "(70)<org.joda.time.convert.ReadablePeriodConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>"
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(70)<org.joda.time.convert.ReadablePeriodConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>";
    "(58)<org.joda.time.convert.ReadablePeriodConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(58)<org.joda.time.convert.ReadablePeriodConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(134)<org.joda.time.convert.AbstractConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(64)<org.joda.time.convert.ReadableIntervalConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(72)<org.joda.time.convert.ReadableDurationConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>";
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(162)<org.joda.time.convert.StringConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>";
    "(69)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>"
    "(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(69)<org.joda.time.convert.NullConverter: void setInto(org.joda.time.ReadWritablePeriod,java.lang.Object,org.joda.time.Chronology)>";
    "(350)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationFrom(org.joda.time.ReadableInstant)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(374)<org.joda.time.base.BasePeriod: org.joda.time.Duration toDurationTo(org.joda.time.ReadableInstant)>"->"(303)<org.joda.time.chrono.BaseChronology: long add(org.joda.time.ReadablePeriod,long,int)>";
    "(390)<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>"
    "(390)<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(390)<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(486)<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>"
    "(486)<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(486)<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(517)<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(517)<org.joda.time.base.BasePeriod: void addFieldInto(int[],org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(578)<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(578)<org.joda.time.base.BasePeriod: int[] addPeriodInto(int[],org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1332)<org.joda.time.DateTimeZone$LazyInit: org.joda.time.format.DateTimeFormatter buildFormatter()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: void <init>()>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1355)<org.joda.time.DateTimeZone$LazyInit: java.util.Map buildMap()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>"
    "(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>"->"(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>";
    "(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>"
    "(1097)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addToCopy(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(1123)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addNoWrapToCopy(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(1147)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay addWrapFieldToCopy(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(1164)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(1181)<org.joda.time.TimeOfDay$Property: org.joda.time.TimeOfDay setCopy(java.lang.String,java.util.Locale)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(123)<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(153)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(54)<org.joda.time.base.AbstractPartial: void <init>()>"
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(54)<org.joda.time.base.AbstractPartial: void <init>()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.Object: java.lang.Object clone()>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>"->"<java.lang.Object: java.lang.Object clone()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(283)<org.joda.time.Partial: void <init>(org.joda.time.ReadablePartial)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>"->"(54)<org.joda.time.base.AbstractPartial: void <init>()>";
    "(321)<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>"
    "(321)<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>"->"(54)<org.joda.time.base.AbstractPartial: void <init>()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Date: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.Format: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(381)<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Date: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.Format: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(406)<org.joda.time.Partial: int[] getValues()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(321)<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>";
    "(425)<org.joda.time.Partial: org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"(194)<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(452)<org.joda.time.Partial: org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType,int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"(321)<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>";
    "(516)<org.joda.time.Partial: org.joda.time.Partial without(org.joda.time.DateTimeFieldType)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(547)<org.joda.time.Partial: org.joda.time.Partial withField(org.joda.time.DateTimeFieldType,int)>"
    "(547)<org.joda.time.Partial: org.joda.time.Partial withField(org.joda.time.DateTimeFieldType,int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(571)<org.joda.time.Partial: org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(571)<org.joda.time.Partial: org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(595)<org.joda.time.Partial: org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType,int)>"
    "(595)<org.joda.time.Partial: org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType,int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(620)<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(305)<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>";
    "(673)<org.joda.time.Partial: org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)>"
    "(673)<org.joda.time.Partial: org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)>"->"(864)<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>";
    "(711)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadablePartial)>"
    "(711)<org.joda.time.Partial: boolean isMatch(org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(736)<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>"->"<java.util.ArrayList: int size()>";
    "(769)<org.joda.time.Partial: java.lang.String toString()>"
    "(769)<org.joda.time.Partial: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(794)<org.joda.time.Partial: java.lang.String toStringList()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(817)<org.joda.time.Partial: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(832)<org.joda.time.Partial: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(216)<org.joda.time.Days: void <init>(int)>"
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(45)<org.joda.time.Days: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(80)<org.joda.time.Days: org.joda.time.Days days(int)>"->"(216)<org.joda.time.Days: void <init>(int)>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(135)<org.joda.time.Days: org.joda.time.Days daysBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(200)<org.joda.time.Days: org.joda.time.Days parseDays(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(216)<org.joda.time.Days: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(332)<org.joda.time.Days: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(488)<org.joda.time.Days: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(54)<org.joda.time.chrono.BaseChronology: void <init>()>"
    "(1332)<org.joda.time.DateTimeZone$LazyInit$1: void <init>()>"->"(54)<org.joda.time.chrono.BaseChronology: void <init>()>";
    "(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"
    "(1344)<org.joda.time.DateTimeZone$LazyInit$1: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "(85)<org.joda.time.MutablePeriod: org.joda.time.MutablePeriod parse(java.lang.String,org.joda.time.format.PeriodFormatter)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(200)<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>"
    "(200)<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>"->"(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(547)<org.joda.time.MutablePeriod: void setPeriod(long,long,org.joda.time.Chronology)>"->"(255)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long,long)>";
    "(610)<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>"->"(278)<org.joda.time.chrono.BaseChronology: int[] get(org.joda.time.ReadablePeriod,long)>";
    "(402)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType)>"
    "(690)<org.joda.time.MutablePeriod: void add(org.joda.time.ReadableDuration)>"->"(402)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType)>";
    "(707)<org.joda.time.MutablePeriod: void add(long)>"->"(402)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType)>";
    "(444)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"
    "(723)<org.joda.time.MutablePeriod: void add(long,org.joda.time.Chronology)>"->"(444)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>"
    "(821)<org.joda.time.MutablePeriod: void setYears(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(843)<org.joda.time.MutablePeriod: void setMonths(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(865)<org.joda.time.MutablePeriod: void setWeeks(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(887)<org.joda.time.MutablePeriod: void setDays(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(909)<org.joda.time.MutablePeriod: void setHours(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(931)<org.joda.time.MutablePeriod: void setMinutes(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(953)<org.joda.time.MutablePeriod: void setSeconds(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(975)<org.joda.time.MutablePeriod: void setMillis(int)>"->"(474)<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>"->"<java.lang.InternalError: void <init>(java.lang.String)>";
    "(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"
    "(75)<org.joda.time.TimeOfDay: void <clinit>()>"->"(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>";
    "(115)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(115)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromCalendarFields(java.util.Calendar)>"->"(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>";
    "(145)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(145)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromDateFields(java.util.Date)>"->"(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(257)<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>"
    "(183)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay fromMillisOfDay(long,org.joda.time.Chronology)>"->"(257)<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>";
    "(257)<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>";
    "(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"
    "(381)<org.joda.time.TimeOfDay: void <init>(int,int,int,int)>"->"(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "(399)<org.joda.time.TimeOfDay: void <init>(int,int,int,int,org.joda.time.Chronology)>"->"(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>"->"(196)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>";
    "(419)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology)>"
    "(419)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology)>"->"(211)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(442)<org.joda.time.TimeOfDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(475)<org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(419)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,org.joda.time.Chronology)>";
    "(494)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(524)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withField(org.joda.time.DateTimeFieldType,int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(553)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(580)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(805)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType)>"
    "(805)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property property(org.joda.time.DateTimeFieldType)>"->"(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>";
    "(816)<org.joda.time.TimeOfDay: org.joda.time.LocalTime toLocalTime()>"->"(504)<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>";
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(844)<org.joda.time.TimeOfDay: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(901)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withHourOfDay(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(919)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMinuteOfHour(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(937)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withSecondOfMinute(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(955)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay withMillisOfSecond(int)>"->"(409)<org.joda.time.TimeOfDay: void <init>(org.joda.time.TimeOfDay,int[])>";
    "(967)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property hourOfDay()>"
    "(967)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property hourOfDay()>"->"(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>";
    "(976)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property minuteOfHour()>"
    "(976)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property minuteOfHour()>"->"(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>";
    "(985)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property secondOfMinute()>"
    "(985)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property secondOfMinute()>"->"(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>";
    "(994)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property millisOfSecond()>"
    "(994)<org.joda.time.TimeOfDay: org.joda.time.TimeOfDay$Property millisOfSecond()>"->"(1035)<org.joda.time.TimeOfDay$Property: void <init>(org.joda.time.TimeOfDay,int)>";
    "(1004)<org.joda.time.TimeOfDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(198)<org.joda.time.Seconds: void <init>(int)>"
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(45)<org.joda.time.Seconds: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(72)<org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>"->"(198)<org.joda.time.Seconds: void <init>(int)>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(118)<org.joda.time.Seconds: org.joda.time.Seconds secondsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(182)<org.joda.time.Seconds: org.joda.time.Seconds parseSeconds(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(198)<org.joda.time.Seconds: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(312)<org.joda.time.Seconds: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Seconds: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1236)<org.joda.time.DateMidnight$Property: void <init>(org.joda.time.DateMidnight,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(853)<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>"->"(43)<org.joda.time.field.AbstractPartialFieldProperty: void <init>()>";
    "(913)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addToCopy(int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(937)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth addWrapFieldToCopy(int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(954)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(int)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(971)<org.joda.time.YearMonth$Property: org.joda.time.YearMonth setCopy(java.lang.String,java.util.Locale)>"->"(354)<org.joda.time.YearMonth: void <init>(org.joda.time.YearMonth,int[])>";
    "(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>"
    "(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(2281)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMaximumValue()>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(2310)<org.joda.time.DateTime$Property: org.joda.time.DateTime withMinimumValue()>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(106)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(272)<org.joda.time.YearMonthDay: void <init>(int,int,int)>"
    "(106)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)>"->"(272)<org.joda.time.YearMonthDay: void <init>(int,int,int)>";
    "(133)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(133)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay fromDateFields(java.util.Date)>"->"(272)<org.joda.time.YearMonthDay: void <init>(int,int,int)>";
    "(211)<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>"->"(108)<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>";
    "(288)<org.joda.time.YearMonthDay: void <init>(int,int,int,org.joda.time.Chronology)>"
    "(272)<org.joda.time.YearMonthDay: void <init>(int,int,int)>"->"(288)<org.joda.time.YearMonthDay: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(288)<org.joda.time.YearMonthDay: void <init>(int,int,int,org.joda.time.Chronology)>"->"(180)<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>";
    "(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>"->"(196)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>";
    "(308)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,org.joda.time.Chronology)>"
    "(308)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,org.joda.time.Chronology)>"->"(211)<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(331)<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(362)<org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] getFieldTypes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(308)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,org.joda.time.Chronology)>";
    "(381)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)>"->"(183)<org.joda.time.chrono.BaseChronology: void validate(org.joda.time.ReadablePartial,int[])>";
    "(411)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType,int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(439)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(465)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(648)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property property(org.joda.time.DateTimeFieldType)>"
    "(648)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property property(org.joda.time.DateTimeFieldType)>"->"(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>";
    "(659)<org.joda.time.YearMonthDay: org.joda.time.LocalDate toLocalDate()>"->"(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(684)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"
    "(684)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(712)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(735)<org.joda.time.YearMonthDay: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"
    "(735)<org.joda.time.YearMonthDay: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(350)<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(770)<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(797)<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(895)<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>";
    "(843)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withYear(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(861)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withMonthOfYear(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(879)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withDayOfMonth(int)>"->"(298)<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>";
    "(891)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property year()>"
    "(891)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property year()>"->"(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>";
    "(900)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property monthOfYear()>"
    "(900)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property monthOfYear()>"->"(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>";
    "(909)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property dayOfMonth()>"
    "(909)<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay$Property dayOfMonth()>"->"(950)<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>";
    "(919)<org.joda.time.YearMonthDay: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(219)<org.joda.time.Months: void <init>(int)>"
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(45)<org.joda.time.Months: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(90)<org.joda.time.Months: org.joda.time.Months months(int)>"->"(219)<org.joda.time.Months: void <init>(int)>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(163)<org.joda.time.Months: org.joda.time.Months monthsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(203)<org.joda.time.Months: org.joda.time.Months parseMonths(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(219)<org.joda.time.Months: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(402)<org.joda.time.Months: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(2163)<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(53)<org.joda.time.format.PeriodFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>";
    "(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
    "(203)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter wordBased(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"
    "(226)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(312)<org.joda.time.format.PeriodFormat: org.joda.time.format.PeriodFormatter buildNonRegExFormatter(java.util.ResourceBundle,java.util.Locale)>"->"(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>";
    "<sun.util.ResourceBundleEnumeration: java.lang.String nextElement()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: java.lang.String nextElement()>";
    "<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>"
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<sun.util.ResourceBundleEnumeration: boolean hasMoreElements()>";
    "(347)<org.joda.time.format.PeriodFormat: boolean containsKey(java.util.ResourceBundle,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"
    "(1871)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <clinit>()>"->"(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
    "(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"
    "(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>"
    "(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>"
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(69)<org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(291)<org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(423)<org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String concat(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(428)<org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1658)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"
    "(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>"->"<java.lang.Object: void <init>()>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>"
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1691)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>"
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1700)<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"
    "(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>"
    "(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: void <init>(int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: void <init>(int)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(222)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1046)<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>";
    "(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(293)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMinimumValueOverall()>";
    "(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(313)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumValueOverall()>";
    "(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(334)<org.joda.time.field.AbstractReadableInstantFieldProperty: int getMaximumTextLength(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1399)<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>";
    "(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(198)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>";
    "(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(167)<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Properties: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Properties: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Hashtable: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int intValue()>";
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "<java.lang.String: java.lang.CharSequence subSequence(int,int)>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "<java.nio.CharBuffer: java.lang.String toString()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "<java.lang.String: java.lang.String toString()>"
    "(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1355)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(1355)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.Object: void <init>()>";
    "(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: void <init>()>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>";
    "(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>"->"(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>";
    "(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "<java.lang.StringBuffer: int length()>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: int length()>";
    "<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>"
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>";
    "(1114)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>"
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1114)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>";
    "(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>"
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>";
    "(1048)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>"
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1048)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1114)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>";
    "(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1048)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: char charAt(int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: char charAt(int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>";
    "(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.String: char charAt(int)>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.String: char charAt(int)>";
    "(1681)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>"->"<java.lang.String: char charAt(int)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>"
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1794)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>";
    "(1712)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>"->"(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1803)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(821)<org.joda.time.MutablePeriod: void setYears(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(843)<org.joda.time.MutablePeriod: void setMonths(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(865)<org.joda.time.MutablePeriod: void setWeeks(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(887)<org.joda.time.MutablePeriod: void setDays(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(909)<org.joda.time.MutablePeriod: void setHours(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(931)<org.joda.time.MutablePeriod: void setMinutes(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(953)<org.joda.time.MutablePeriod: void setSeconds(int)>";
    "(1830)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>"->"(975)<org.joda.time.MutablePeriod: void setMillis(int)>";
    "(866)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"
    "(866)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "(790)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(797)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>"
    "(797)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>"->"<java.lang.Object: void <init>()>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(205)<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>";
    "(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"
    "(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(866)<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>";
    "(829)<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"
    "(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>"->"(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(366)<org.joda.time.format.PeriodFormat$DynamicWordBased: void <init>(org.joda.time.format.PeriodFormatter)>"->"<java.lang.Object: void <init>()>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>";
    "(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>"
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>"
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(387)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodPrinter getPrinter(java.util.Locale)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>";
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>"
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(400)<org.joda.time.format.PeriodFormat$DynamicWordBased: org.joda.time.format.PeriodParser getParser(java.util.Locale)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"
    "(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>"->"<java.lang.Object: void <init>()>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"
    "(37)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>"->"(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>";
    "(46)<org.joda.time.format.DateTimePrinterInternalPrinter: void <init>(org.joda.time.format.DateTimePrinter)>"->"<java.lang.Object: void <init>()>";
    "(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>"
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "<java.lang.StringBuffer: void <init>(int)>"
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>"->"<java.lang.Object: void <init>()>";
    "(44)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>"
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"(44)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.DateTimeParser getUnderlying()>";
    "(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"
    "(30)<org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>"->"(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>";
    "(42)<org.joda.time.format.InternalParserDateTimeParser: void <init>(org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"
    "(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>"
    "(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "<java.lang.Enum: boolean equals(java.lang.Object)>"
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>"->"(62)<org.joda.time.format.InternalParserDateTimeParser: boolean equals(java.lang.Object)>";
    "(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"
    "(29)<org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>"->"(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>";
    "(38)<org.joda.time.format.DateTimeParserInternalParser: void <init>(org.joda.time.format.DateTimeParser)>"->"<java.lang.Object: void <init>()>";
    "(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(56)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>";
    "(52)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.DateTimePrinter getUnderlying()>"
    "(37)<org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>"->"(52)<org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.DateTimePrinter getUnderlying()>";
    "(49)<org.joda.time.format.InternalPrinterDateTimePrinter: void <init>(org.joda.time.format.InternalPrinter)>"
    "(37)<org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>"->"(49)<org.joda.time.format.InternalPrinterDateTimePrinter: void <init>(org.joda.time.format.InternalPrinter)>";
    "(49)<org.joda.time.format.InternalPrinterDateTimePrinter: void <init>(org.joda.time.format.InternalPrinter)>"->"<java.lang.Object: void <init>()>";
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"
    "(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>"
    "(55)<org.joda.time.format.InternalPrinterDateTimePrinter: int estimatePrintedLength()>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(61)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(69)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(74)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(79)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(86)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(90)<org.joda.time.format.InternalPrinterDateTimePrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(96)<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>"
    "(96)<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(96)<org.joda.time.format.InternalPrinterDateTimePrinter: boolean equals(java.lang.Object)>"->"<java.lang.Enum: boolean equals(java.lang.Object)>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>";
    "(65)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(329)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder printZeroAlways()>"
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(329)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder printZeroAlways()>";
    "(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>"
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(97)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternate()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(329)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder printZeroAlways()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>"
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(124)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtended()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(329)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder printZeroAlways()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>"
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(155)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateWithWeeks()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(329)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder printZeroAlways()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(259)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder minimumPrintedDigits(int)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>";
    "(183)<org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter alternateExtendedWithWeeks()>"->"(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>";
    "(91)<org.joda.time.format.PeriodFormatterBuilder: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(110)<org.joda.time.format.PeriodFormatterBuilder: void <init>()>"->"(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1385)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void finish(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[])>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Date: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.Format: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(132)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(155)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodPrinter toPrinter()>"
    "(155)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodPrinter toPrinter()>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(174)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodParser toParser()>"
    "(174)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodParser toParser()>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.ArrayList: void clear()>"
    "(185)<org.joda.time.format.PeriodFormatterBuilder: void clear()>"->"<java.util.ArrayList: void clear()>";
    "(206)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodFormatter)>"
    "(206)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodFormatter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(226)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(226)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(242)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendLiteral(java.lang.String)>"->"(1874)<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>";
    "(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"
    "(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>"->"(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>";
    "(433)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(357)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String)>"->"(433)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(377)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String,java.lang.String)>"
    "(377)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"
    "(377)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String,java.lang.String)>"->"(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>";
    "(417)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(417)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(java.lang.String[],java.lang.String[])>"->"(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>";
    "(433)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(433)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendPrefix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"
    "(453)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendYears()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(466)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMonths()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(479)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendWeeks()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(492)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendDays()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(505)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendHours()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(518)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMinutes()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(531)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeconds()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(555)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSecondsWithOptionalMillis()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(568)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendMillis()>"->"(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"
    "(585)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>"->"(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"(1355)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(589)<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"
    "(607)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String)>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>";
    "(628)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String,java.lang.String)>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>";
    "(668)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(java.lang.String[],java.lang.String[])>"->"(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1369)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(org.joda.time.format.PeriodFormatterBuilder$FieldFormatter,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: int size()>";
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>";
    "(1861)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>"
    "(687)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSuffix(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1861)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int getFieldType()>";
    "(728)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String)>"->"(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "(748)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparatorIfFieldsAfter(java.lang.String)>"->"(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "(820)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[])>"->"(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "<java.util.ImmutableCollections$SubList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "<java.util.ImmutableCollections$SubList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "<java.util.ImmutableCollections$AbstractImmutableCollection: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: void clear()>";
    "<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Collections$SynchronizedList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Collections$SynchronizedRandomAccessList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedRandomAccessList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Collections$SynchronizedCollection: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: void clear()>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.AbstractList$SubList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: int size()>";
    "<java.util.AbstractList$SubList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: int size()>";
    "<java.util.AbstractList$RandomAccessSubList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$RandomAccessSubList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: int size()>";
    "<java.util.AbstractList: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: void clear()>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.util.Collections$CopiesList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Collections$CopiesList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Collections$CopiesList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Collections$SynchronizedList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: void clear()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<java.util.Collections$CheckedList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<java.util.Collections$CheckedList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<java.util.Collections$CheckedCollection: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: void clear()>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.ArrayList$SubList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.ArrayList$SubList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.ArrayList$SubList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void clear()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedRandomAccessList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$CheckedRandomAccessList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.Collections$UnmodifiableCollection: void clear()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: void clear()>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: int size()>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "<java.util.AbstractList$SubList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.AbstractList$SubList: java.util.List subList(int,int)>";
    "<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>"
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(826)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder appendSeparator(java.lang.String,java.lang.String,java.lang.String[],boolean,boolean)>"->"(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>";
    "(875)<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(882)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.IllegalStateException: void <init>(java.lang.String)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ImmutableCollections$SubList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$SynchronizedRandomAccessList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.AbstractList$SubList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.AbstractList$RandomAccessSubList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CopiesList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CopiesList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$SynchronizedList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CheckedList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.ArrayList$SubList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$CheckedRandomAccessList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$UnmodifiableRandomAccessList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.AbstractList$SubList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"<java.util.Collections$UnmodifiableList: java.util.List subList(int,int)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(2081)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(2081)<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodFormatterBuilder$Separator finish(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(891)<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>"->"(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(914)<org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>"->"(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.Object: void <init>()>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.util.TreeSet: void <init>(java.util.Comparator)>"
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: void <init>(java.util.Comparator)>";
    "<java.util.TreeSet: boolean add(java.lang.Object)>"
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.TreeSet: boolean add(java.lang.Object)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
    "(1923)<org.joda.time.format.PeriodFormatterBuilder$Separator: void <init>(java.lang.String,java.lang.String,java.lang.String[],org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,boolean,boolean)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: int length()>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "<java.util.ArrayList: boolean isEmpty()>"
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean contains(java.lang.Object)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "<java.lang.UnsupportedOperationException: void <init>()>"
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2534)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2553)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(132)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimePrinter toPrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"
    "(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>"->"(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>";
    "(198)<org.joda.time.format.DateTimeFormatterBuilder: void clear()>"
    "(198)<org.joda.time.format.DateTimeFormatterBuilder: void clear()>"->"<java.util.ArrayList: void clear()>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(207)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"
    "(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"
    "(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>"->"(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>"->"(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>";
    "(358)<org.joda.time.format.DateTimeFormatterBuilder: void checkParser(org.joda.time.format.DateTimeParser)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(369)<org.joda.time.format.DateTimeFormatterBuilder: void checkPrinter(org.joda.time.format.DateTimePrinter)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: int length()>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(1202)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"
    "(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"->"(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(517)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedSignedDecimal(org.joda.time.DateTimeFieldType,int)>"->"(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(1663)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void <init>(org.joda.time.DateTimeFieldType,boolean)>";
    "(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>";
    "(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>"->"(571)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>";
    "(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>"->"(435)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>"->"(487)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>";
    "(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>"->"(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>"->"(550)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendShortText(org.joda.time.DateTimeFieldType)>";
    "(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>"->"(535)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendText(org.joda.time.DateTimeFieldType)>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"
    "(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1032)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName(java.util.Map)>"
    "(1032)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName(java.util.Map)>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(1044)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>"
    "(1044)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>";
    "(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>"->"(384)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>";
    "(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>"->"(375)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: int size()>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(1139)<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>"->"(2426)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>";
    "(2522)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>"
    "(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>"->"(2522)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>";
    "(2526)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>"
    "(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>"->"(2526)<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"(1166)<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>";
    "(1186)<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>"->"(1176)<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1190)<org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.Appendable,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2647)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWith(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: int length()>";
    "(2660)<org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: void <init>()>";
    "(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1329)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1173)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"(1087)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String[] getAffixes()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.HashSet: int size()>";
    "<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>"
    "(1272)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void <init>(org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>"->"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1106)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>";
    "(1288)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int calculatePrintedLength(int)>"->"(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1293)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.lang.StringBuffer,int)>"->"(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1114)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1048)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1114)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>";
    "(1298)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: void printTo(java.io.Writer,int)>"->"(1048)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.io.Writer,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>"
    "(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1303)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>";
    "(1314)<org.joda.time.format.PeriodFormatterBuilder$CompositeAffix: int scan(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1452)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"(1416)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"
    "(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"
    "(392)<org.joda.time.DateTimeField: long setExtended(long,int)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(392)<org.joda.time.DateTimeField: long setExtended(long,int)>";
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>"
    "(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>"->"(93)<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>";
    "(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>"
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(123)<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>"
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(1)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"
    "(1)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(java.lang.Object)>"->"(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>"->"<java.lang.String: int length()>";
    "(1)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"
    "(1)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.Object,java.lang.Object)>"->"(1185)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: int compare(java.lang.String,java.lang.String)>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: int length()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.String: java.lang.String toString()>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(231)<org.joda.time.format.DateTimeParserBucket: int getOffset()>"
    "(231)<org.joda.time.format.DateTimeParserBucket: int getOffset()>"->"<java.lang.Integer: int intValue()>";
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>"
    "(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>"->"(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>"->"(553)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,int)>";
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>";
    "(560)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>"
    "(320)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>"->"(560)<org.joda.time.format.DateTimeParserBucket$SavedField: void init(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)>";
    "(324)<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField obtainSaveField()>"->"(549)<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>()>";
    "(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"
    "(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>"->"(516)<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>";
    "(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"
    "(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>"->"(524)<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>";
    "(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"
    "(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Object: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Date: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Locale: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.Signature: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Properties: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Vector: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.Collator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.Format: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(142)<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(567)<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.Integer: int intValue()>";
    "(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(895)<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>";
    "(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(57)<org.joda.time.tz.FixedDateTimeZone: int getOffsetFromLocal(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1560)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(49)<org.joda.time.tz.FixedDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(1219)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(103)<org.joda.time.tz.CachedDateTimeZone: int getOffset(long)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"
    "(425)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.CharSequence)>"->"(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>";
    "(497)<org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>"->"(584)<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(1)<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>"
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(1)<org.joda.time.field.BaseDurationField: int compareTo(java.lang.Object)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(1)<org.joda.time.field.UnsupportedDurationField: int compareTo(java.lang.Object)>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(596)<org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(1100)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void <init>(java.lang.String,java.lang.String)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(1110)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1118)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int parse(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1143)<org.joda.time.format.PeriodFormatterBuilder$PluralAffix: int scan(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1377)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"(1294)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1784)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>"->"<java.lang.Object: void <init>()>";
    "(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: int length()>";
    "(1814)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"<java.lang.String: char charAt(int)>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(1872)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(195)<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>"
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(195)<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(299)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(58)<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: void <init>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int indexOf(int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int,int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: java.lang.String substring(int)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.lang.String: int length()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: void <init>()>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "(2317)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <clinit>()>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.lang.Enum: void <init>(java.lang.String,int)>"
    "(2314)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractList$SubList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.Vector: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "<java.util.Vector: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$SubList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "<java.util.Collections$EmptyList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "<java.util.Collections$EmptyList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "<java.util.LinkedList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<java.util.LinkedList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedList: int size()>";
    "<java.util.Arrays$ArrayList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "<java.util.Arrays$ArrayList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList: int size()>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>"
    "(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: int size()>";
    "<java.util.ArrayList: boolean retainAll(java.util.Collection)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.ArrayList: boolean retainAll(java.util.Collection)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.HashSet: void <init>(java.util.Collection)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: void <init>(java.util.Collection)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "<java.util.HashSet: boolean remove(java.lang.Object)>"
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: int size()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(169)<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(156)<org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(219)<org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(287)<org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(324)<org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.util.HashSet: boolean remove(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"(666)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMillisOfSecond(int)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(396)<org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(461)<org.joda.time.format.ISODateTimeFormat: void checkNotStrictISO(java.util.Collection,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(475)<org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1326)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1339)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1346)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateElementParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1373)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1384)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localTimeParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(615)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfMinute(int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(258)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeParser)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(632)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfHour(int,int)>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1394)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeElementParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(306)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser[])>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1447)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(203)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1463)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(153)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeParser toParser()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(346)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendOptional(org.joda.time.format.DateTimeParser)>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1478)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter localDateOptionalTimeParser()>"->"(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1493)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter time()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1503)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter timeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1513)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1523)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter tTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1533)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1543)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1553)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1563)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1573)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter ordinalDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1583)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1593)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1604)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(1615)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(1629)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1641)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1651)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicTTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1661)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1671)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1681)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1691)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1701)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicOrdinalDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(465)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFixedDecimal(org.joda.time.DateTimeFieldType,int)>";
    "(1711)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDate()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1723)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTime()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1733)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter basicWeekDateTimeNoMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1744)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonth()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1754)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearMonthDay()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1765)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeek()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1775)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearWeekDay()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1786)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinute()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1796)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecond()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1807)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1820)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1832)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHour()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1843)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinute()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1854)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecond()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1865)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondMillis()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(218)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>";
    "(1876)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dateHourMinuteSecondFraction()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(1888)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter yearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(1897)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter monthElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(1907)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(1917)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekyearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(1926)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter weekElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(1936)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfWeekElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(1946)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter dayOfYearElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1956)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter literalTElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(1965)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter hourElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(1974)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter minuteElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(1984)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter secondElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(1994)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter fractionElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(1092)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>";
    "(2006)<org.joda.time.format.ISODateTimeFormat$Constants: org.joda.time.format.DateTimeFormatter offsetElement()>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.lang.Object: void <init>()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: void <init>()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2097)<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>"->"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1879)<org.joda.time.format.PeriodFormatterBuilder$Literal: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1955)<org.joda.time.format.PeriodFormatterBuilder$Separator: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(371)<org.joda.time.format.PeriodFormat$DynamicWordBased: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2119)<org.joda.time.format.PeriodFormatterBuilder$Composite: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>"->"(1404)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>"->"(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2168)<org.joda.time.format.PeriodFormatterBuilder$Composite: void decompose(java.util.List,java.util.List,java.util.List)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2191)<org.joda.time.format.PeriodFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"<java.lang.Object: void <init>()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1301)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2368)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2291)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1221)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1499)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2505)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(48)<org.joda.time.format.DateTimeParserInternalParser: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(820)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(48)<org.joda.time.format.InternalParserDateTimeParser: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1713)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(1908)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimateParsedLength()>";
    "(2569)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: void <init>(org.joda.time.format.InternalParser[])>"->"(2585)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int estimateParsedLength()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(353)<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(368)<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(87)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>"->"<java.lang.Object: void <init>()>";
    "(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>"->"<java.lang.Object: void <init>()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(177)<org.joda.time.format.PeriodFormatter: java.util.Locale getLocale()>";
    "(163)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withLocale(java.util.Locale)>"->"(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>"->"(105)<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>";
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(214)<org.joda.time.format.PeriodFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"->"(1891)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"->"(2010)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"->"(2145)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"->"(383)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(227)<org.joda.time.format.PeriodFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod)>"->"(1481)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(128)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1883)<org.joda.time.format.PeriodFormatterBuilder$Literal: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1887)<org.joda.time.format.PeriodFormatterBuilder$Literal: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1963)<org.joda.time.format.PeriodFormatterBuilder$Separator: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1988)<org.joda.time.format.PeriodFormatterBuilder$Separator: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(2128)<org.joda.time.format.PeriodFormatterBuilder$Composite: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(2137)<org.joda.time.format.PeriodFormatterBuilder$Composite: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(375)<org.joda.time.format.PeriodFormat$DynamicWordBased: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(379)<org.joda.time.format.PeriodFormat$DynamicWordBased: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1414)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"(1446)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>";
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: void <init>(int)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "(240)<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(255)<org.joda.time.format.PeriodFormatter: void checkPrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(339)<org.joda.time.format.PeriodFormatter: void checkParser()>"
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(339)<org.joda.time.format.PeriodFormatter: void checkParser()>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(266)<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(292)<org.joda.time.format.PeriodFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>"->"(339)<org.joda.time.format.PeriodFormatter: void checkParser()>";
    "(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>"->"(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>";
    "(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>"->"(147)<org.joda.time.base.AbstractPeriod: org.joda.time.Period toPeriod()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(339)<org.joda.time.format.PeriodFormatter: void checkParser()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(146)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(200)<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(1897)<org.joda.time.format.PeriodFormatterBuilder$Literal: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(2034)<org.joda.time.format.PeriodFormatterBuilder$Separator: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(2155)<org.joda.time.format.PeriodFormatterBuilder$Composite: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(396)<org.joda.time.format.PeriodFormat$DynamicWordBased: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"(1515)<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"<java.lang.String: int length()>";
    "(319)<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(339)<org.joda.time.format.PeriodFormatter: void checkParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>"->"<java.lang.Object: void <init>()>";
    "(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"
    "(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>"->"<java.lang.Object: void <init>()>";
    "(237)<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>"
    "(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>"->"(237)<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>";
    "(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>"->"(237)<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>";
    "(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"
    "(335)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZoneUTC()>"->"(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>";
    "(355)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(402)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>"
    "<java.lang.Integer: boolean equals(java.lang.Object)>"
    "(402)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>"->"<java.lang.Integer: boolean equals(java.lang.Object)>";
    "(402)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(472)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withDefaultYear(int)>"
    "(472)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withDefaultYear(int)>"->"(149)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>";
    "(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>"->"(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"
    "(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>"->"(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>";
    "(589)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>"->"(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1436)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2052)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2365)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2288)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1217)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1396)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(2488)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(76)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1684)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>"->"(1807)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(533)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(688)<org.joda.time.format.DateTimeFormatter: java.lang.String print(long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(651)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1421)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2354)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2264)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1207)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1602)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1381)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(2465)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(57)<org.joda.time.format.DateTimePrinterInternalPrinter: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.format.DateTimeFormat$StyleFormatter: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1669)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"(1795)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int estimatePrintedLength()>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: void <init>(int)>";
    "(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1428)<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2360)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1213)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1388)<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(2471)<org.joda.time.format.DateTimeFormatterBuilder$Composite: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(62)<org.joda.time.format.DateTimePrinterInternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(810)<org.joda.time.format.DateTimeFormat$StyleFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1676)<org.joda.time.format.DateTimeFormatterBuilder$TextField: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(717)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>"->"(1801)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(739)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(453)<org.joda.time.MutableDateTime: void setMillis(long)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(562)<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>"
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"<java.lang.Integer: int intValue()>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(781)<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(823)<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>"->"(179)<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>";
    "(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>"->"(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>";
    "(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>"->"(763)<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>";
    "(862)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>"->"(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>";
    "(862)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>"->"(772)<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(880)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"<java.lang.String: int length()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(634)<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>"
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"(634)<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>";
    "(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(126)<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1305)<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(2373)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1225)<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(2509)<org.joda.time.format.DateTimeFormatterBuilder$Composite: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(52)<org.joda.time.format.DateTimeParserInternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(824)<org.joda.time.format.DateTimeFormat$StyleFormatter: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(52)<org.joda.time.format.InternalParserDateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1718)<org.joda.time.format.DateTimeFormatterBuilder$TextField: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1912)<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1457)<org.joda.time.format.DateTimeFormatterBuilder$FixedNumber: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(2589)<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(411)<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(238)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(213)<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(236)<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"(581)<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>";
    "(966)<org.joda.time.format.DateTimeFormatter: org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(999)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(1014)<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(2258)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>"->"<java.lang.Object: void <init>()>";
    "(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>"
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(2274)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(2270)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.util.Set keySet()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.EnumMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.EnumMap$KeySet: java.util.Iterator iterator()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.IdentityHashMap$KeySet: java.util.Iterator iterator()>";
    "<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>";
    "<java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap$KeySet: java.util.Iterator iterator()>";
    "<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.Iterator iterator()>";
    "<java.util.HashMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap$KeySet: java.util.Iterator iterator()>";
    "<java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap$LinkedKeySet: java.util.Iterator iterator()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$SingletonSet: java.util.Iterator iterator()>";
    "<java.util.TreeMap$KeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$KeySet: java.util.Iterator iterator()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptySet: java.util.Iterator iterator()>";
    "<java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringKeySet: java.util.Iterator iterator()>";
    "<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>"
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2295)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(220)<org.joda.time.format.DateTimeParserBucket: void setZone(org.joda.time.DateTimeZone)>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.Object: void <init>()>";
    "(1965)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1994)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(2055)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimateParsedLength()>"->"(1981)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>"
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(255)<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2059)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: int length()>";
    "(2234)<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>"->"<java.lang.String: char charAt(int)>";
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"
    "(154)<org.joda.time.format.DateTimeFormat: void <clinit>()>"->"<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"(185)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>";
    "(219)<org.joda.time.format.DateTimeFormat: java.lang.String patternForStyle(java.lang.String,java.util.Locale)>"->"(843)<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: java.lang.String substring(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1008)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(946)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(910)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitWeekyear(int,boolean)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(870)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTwoDigitYear(int,boolean)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(808)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekyear(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(830)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(922)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYearOfEra(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(988)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(998)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYearShortText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(818)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(776)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(956)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(756)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(726)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(736)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(746)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(706)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(686)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(598)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(766)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(966)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(977)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(786)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(796)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1019)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneName()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1058)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName(java.util.Map)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1119)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,java.lang.String,boolean,int,int)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(1069)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneId()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(398)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(409)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>";
    "(171)<org.joda.time.DateTime: void <init>()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(171)<org.joda.time.DateTime: void <init>()>";
    "(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(131)<org.joda.time.base.AbstractDateTime: int getWeekyear()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(171)<org.joda.time.DateTime: void <init>()>";
    "(116)<org.joda.time.base.AbstractDateTime: int getYear()>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"(116)<org.joda.time.base.AbstractDateTime: int getYear()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: int length()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "<java.lang.String: void <init>(java.lang.String)>"
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.String: void <init>(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(407)<org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: void <init>()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: int length()>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.String: char charAt(int)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(581)<org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: int length()>";
    "(639)<org.joda.time.format.DateTimeFormat: boolean isNumericToken(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.String: int length()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(83)<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"(104)<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>";
    "<java.util.concurrent.ConcurrentHashMap: int size()>"
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: int size()>";
    "(681)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(711)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: int length()>"
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"<java.util.concurrent.atomic.AtomicReferenceArray: int length()>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>"
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>";
    "<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>"
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>";
    "(730)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyleIndex(int,int)>"->"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>";
    "(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>"->"(797)<org.joda.time.format.DateTimeFormat$StyleFormatter: void <init>(int,int,int)>";
    "(753)<org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createDateTimeFormatter(int,int)>"->"(130)<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>";
    "(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(770)<org.joda.time.format.DateTimeFormat: int selectStyle(char)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <clinit>()>"->"(1183)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Date: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Locale: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Properties: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Vector: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.Collator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.Format: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Date: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Locale: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Properties: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Vector: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.Collator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.Format: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(1196)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void <init>(java.lang.String[],java.lang.String[])>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<java.util.regex.Matcher: boolean matches()>"
    "(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>"->"<java.util.regex.Matcher: boolean matches()>";
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "(1222)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "(1226)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1230)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: void printTo(java.io.Writer,int)>"->"(1212)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1234)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int parse(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1245)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int scan(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(1007)<org.joda.time.MutablePeriod: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(408)<org.joda.time.MutableInterval: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Date: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"(1250)<org.joda.time.MutableDateTime: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.Format: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(1259)<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] getAffixes()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(973)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void finish(java.util.Set)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(1492)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>"->"<java.lang.Object: void <init>()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.CharSequence subSequence(int,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: char charAt(int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.nio.CharBuffer: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: java.lang.String toString()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>"
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(273)<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getPivotYear()>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"(309)<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>";
    "(1503)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.Integer: int intValue()>";
    "(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>"
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"(1619)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(long,org.joda.time.Chronology)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1608)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>"
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"(1640)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: int getTwoDigitYear(org.joda.time.ReadablePartial)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1630)<org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(1255)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(1260)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimatePrintedLength()>"->"<java.lang.String: int length()>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1266)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>";
    "(1270)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>";
    "(1274)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int estimateParsedLength()>"->"<java.lang.String: int length()>";
    "(1278)<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>"->"<java.lang.String: int length()>";
    "(1035)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void <init>(java.lang.String)>"->"(969)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>";
    "(1040)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int calculatePrintedLength(int)>"->"<java.lang.String: int length()>";
    "(1044)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: void printTo(java.lang.StringBuffer,int)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1052)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int parse(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"->"<java.lang.String: int length()>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"->"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"->"<java.lang.String: char charAt(int)>";
    "(1063)<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: int scan(java.lang.String,int)>"->"(1013)<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: boolean matchesOtherAffix(int,java.lang.String,int)>";
    "(562)<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>"->"<java.lang.Object: void <init>()>";
    "(175)<org.joda.time.Years: void <init>(int)>"
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(45)<org.joda.time.Years: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(72)<org.joda.time.Years: org.joda.time.Years years(int)>"->"(175)<org.joda.time.Years: void <init>(int)>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(119)<org.joda.time.Years: org.joda.time.Years yearsBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(159)<org.joda.time.Years: org.joda.time.Years parseYears(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(175)<org.joda.time.Years: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(358)<org.joda.time.Years: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(298)<org.joda.time.Period: void <init>()>"
    "(65)<org.joda.time.Period: void <clinit>()>"->"(298)<org.joda.time.Period: void <init>()>";
    "(92)<org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>"
    "(110)<org.joda.time.Period: org.joda.time.Period years(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(127)<org.joda.time.Period: org.joda.time.Period months(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(144)<org.joda.time.Period: org.joda.time.Period weeks(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(161)<org.joda.time.Period: org.joda.time.Period days(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(178)<org.joda.time.Period: org.joda.time.Period hours(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(195)<org.joda.time.Period: org.joda.time.Period minutes(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(212)<org.joda.time.Period: org.joda.time.Period seconds(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(226)<org.joda.time.Period: org.joda.time.Period millis(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(257)<org.joda.time.Period: org.joda.time.Period fieldDifference(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(298)<org.joda.time.Period: void <init>()>"->"(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(402)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType)>"->"(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(444)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(254)<org.joda.time.base.BasePeriod: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(490)<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>"->"(106)<org.joda.time.base.BasePeriod: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(691)<org.joda.time.Period: void <init>(java.lang.Object,org.joda.time.PeriodType)>"
    "(691)<org.joda.time.Period: void <init>(java.lang.Object,org.joda.time.PeriodType)>"->"(271)<org.joda.time.base.BasePeriod: void <init>(java.lang.Object,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(293)<org.joda.time.base.BasePeriod: void <init>(int[],org.joda.time.PeriodType)>"
    "(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>"->"(293)<org.joda.time.base.BasePeriod: void <init>(int[],org.joda.time.PeriodType)>";
    "(757)<org.joda.time.Period: int getYears()>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(766)<org.joda.time.Period: int getMonths()>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(835)<org.joda.time.PeriodType: boolean equals(java.lang.Object)>";
    "(836)<org.joda.time.Period: org.joda.time.Period withPeriodType(org.joda.time.PeriodType)>"->"(691)<org.joda.time.Period: void <init>(java.lang.Object,org.joda.time.PeriodType)>";
    "(854)<org.joda.time.Period: org.joda.time.Period withFields(org.joda.time.ReadablePeriod)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(874)<org.joda.time.Period: org.joda.time.Period withField(org.joda.time.DurationFieldType,int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(893)<org.joda.time.Period: org.joda.time.Period withFieldAdded(org.joda.time.DurationFieldType,int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(95)<org.joda.time.base.AbstractPeriod: int[] getValues()>"
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(95)<org.joda.time.base.AbstractPeriod: int[] getValues()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(95)<org.joda.time.base.AbstractPeriod: int[] getValues()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(318)<org.joda.time.base.BasePeriod: org.joda.time.PeriodType getPeriodType()>";
    "(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(945)<org.joda.time.Period: org.joda.time.Period withWeeks(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(960)<org.joda.time.Period: org.joda.time.Period withDays(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(975)<org.joda.time.Period: org.joda.time.Period withHours(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(990)<org.joda.time.Period: org.joda.time.Period withMinutes(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1005)<org.joda.time.Period: org.joda.time.Period withSeconds(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1020)<org.joda.time.Period: org.joda.time.Period withMillis(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1044)<org.joda.time.Period: org.joda.time.Period plus(org.joda.time.ReadablePeriod)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1070)<org.joda.time.Period: org.joda.time.Period plusYears(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1088)<org.joda.time.Period: org.joda.time.Period plusMonths(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1106)<org.joda.time.Period: org.joda.time.Period plusWeeks(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1124)<org.joda.time.Period: org.joda.time.Period plusDays(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1142)<org.joda.time.Period: org.joda.time.Period plusHours(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1160)<org.joda.time.Period: org.joda.time.Period plusMinutes(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1178)<org.joda.time.Period: org.joda.time.Period plusSeconds(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1196)<org.joda.time.Period: org.joda.time.Period plusMillis(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1223)<org.joda.time.Period: org.joda.time.Period minus(org.joda.time.ReadablePeriod)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1354)<org.joda.time.Period: org.joda.time.Period multipliedBy(int)>"->"(736)<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>";
    "(1549)<org.joda.time.Period: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1566)<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(444)<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(638)<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(915)<org.joda.time.Period: org.joda.time.Period withYears(int)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"(930)<org.joda.time.Period: org.joda.time.Period withMonths(int)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1637)<org.joda.time.Period: org.joda.time.Period normalizedStandard(org.joda.time.PeriodType)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>"
    "(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(198)<org.joda.time.Minutes: void <init>(int)>"
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(45)<org.joda.time.Minutes: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(72)<org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>"->"(198)<org.joda.time.Minutes: void <init>(int)>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(118)<org.joda.time.Minutes: org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(182)<org.joda.time.Minutes: org.joda.time.Minutes parseMinutes(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(198)<org.joda.time.Minutes: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(312)<org.joda.time.Minutes: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(468)<org.joda.time.Minutes: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(280)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField centuries()>";
    "(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(244)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weekyears()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(204)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField halfdays()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(180)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField minutes()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(168)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField seconds()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(156)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField millis()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(662)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(642)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField centuries()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(555)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weekyears()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(455)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField halfdays()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(397)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField minutes()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(368)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField seconds()>";
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"(339)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField millis()>";
    "<java.lang.InternalError: void <init>()>"
    "(282)<org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "(30)<org.joda.time.UTCDateTimeZone: void <init>()>"
    "(26)<org.joda.time.UTCDateTimeZone: void <clinit>()>"->"(30)<org.joda.time.UTCDateTimeZone: void <init>()>";
    "(30)<org.joda.time.UTCDateTimeZone: void <init>()>"->"(687)<org.joda.time.DateTimeZone: void <init>(java.lang.String)>";
    "(70)<org.joda.time.UTCDateTimeZone: java.util.TimeZone toTimeZone()>"->"<java.util.SimpleTimeZone: void <init>(int,java.lang.String)>";
    "(1373)<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>"->"(55)<org.joda.time.field.AbstractReadableInstantFieldProperty: void <init>()>";
    "(1473)<org.joda.time.LocalTime$Property: org.joda.time.LocalTime addNoWrapToCopy(int)>"
    "(1473)<org.joda.time.LocalTime$Property: org.joda.time.LocalTime addNoWrapToCopy(int)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1473)<org.joda.time.LocalTime$Property: org.joda.time.LocalTime addNoWrapToCopy(int)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(1473)<org.joda.time.LocalTime$Property: org.joda.time.LocalTime addNoWrapToCopy(int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: void <init>()>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(96)<org.joda.time.LocalDate: void <clinit>()>"->"<java.util.HashSet: boolean add(java.lang.Object)>";
    "(124)<org.joda.time.LocalDate: org.joda.time.LocalDate now()>"->"(267)<org.joda.time.LocalDate: void <init>()>";
    "(136)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(136)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.DateTimeZone)>"->"(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>";
    "(151)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(151)<org.joda.time.LocalDate: org.joda.time.LocalDate now(org.joda.time.Chronology)>"->"(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>";
    "(179)<org.joda.time.LocalDate: org.joda.time.LocalDate parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(844)<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"<java.util.Calendar: int get(int)>";
    "(207)<org.joda.time.LocalDate: org.joda.time.LocalDate fromCalendarFields(java.util.Calendar)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Date: long getTime()>";
    "<java.util.Date: int getYear()>"
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Date: int getYear()>";
    "<java.util.Date: int getMonth()>"
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Date: int getMonth()>";
    "<java.util.Date: int getDate()>"
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Date: int getDate()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.GregorianCalendar: void <init>()>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"<java.util.Calendar: void setTime(java.util.Date)>";
    "(241)<org.joda.time.LocalDate: org.joda.time.LocalDate fromDateFields(java.util.Date)>"->"(436)<org.joda.time.LocalDate: void <init>(int,int,int)>";
    "(267)<org.joda.time.LocalDate: void <init>()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(281)<org.joda.time.LocalDate: void <init>(org.joda.time.DateTimeZone)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(295)<org.joda.time.LocalDate: void <init>(org.joda.time.Chronology)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(67)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(94)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(58)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(53)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(384)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.DateTimeZone)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(248)<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(82)<org.joda.time.convert.AbstractConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(123)<org.joda.time.convert.AbstractConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(68)<org.joda.time.convert.CalendarConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(84)<org.joda.time.convert.StringConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(83)<org.joda.time.convert.ReadableInstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(67)<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(414)<org.joda.time.LocalDate: void <init>(java.lang.Object,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(436)<org.joda.time.LocalDate: void <init>(int,int,int)>"->"(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(48)<org.joda.time.base.BaseLocal: void <init>()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(455)<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(1335)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.DateTimeZone getZone()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(1338)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(151)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withUTC()>";
    "(467)<org.joda.time.LocalDate: java.lang.Object readResolve()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(499)<org.joda.time.LocalDate: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(524)<org.joda.time.LocalDate: int getValue(int)>"->"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(552)<org.joda.time.LocalDate: int get(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(570)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DateTimeFieldType)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"->"<java.util.HashSet: boolean contains(java.lang.Object)>";
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(590)<org.joda.time.LocalDate: boolean isSupported(org.joda.time.DurationFieldType)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>"->"(255)<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>";
    "(676)<org.joda.time.LocalDate: int compareTo(org.joda.time.ReadablePartial)>"->"(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>";
    "(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>"
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(610)<org.joda.time.LocalDate: long getLocalMillis()>"
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>"
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(993)<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(776)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(815)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(865)<org.joda.time.LocalDate: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>"->"(350)<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>";
    "(888)<org.joda.time.LocalDate: org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)>"
    "(888)<org.joda.time.LocalDate: org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(888)<org.joda.time.LocalDate: org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(888)<org.joda.time.LocalDate: org.joda.time.LocalDateTime toLocalDateTime(org.joda.time.LocalTime)>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(1341)<org.joda.time.DateTimeZone$LazyInit$1: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(951)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTime(org.joda.time.LocalTime,org.joda.time.DateTimeZone)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>";
    "(992)<org.joda.time.LocalDate: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>"->"(199)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "<java.util.Date: void <init>(int,int,int)>"
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void <init>(int,int,int)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(372)<org.joda.time.base.AbstractPartial: boolean isBefore(org.joda.time.ReadablePartial)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"(632)<org.joda.time.LocalDate: boolean equals(java.lang.Object)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: long getTime()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void setTime(long)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: long getTime()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void setTime(long)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: int getDate()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: long getTime()>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void setTime(long)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: long getTime()>";
    "<java.util.Date: void <init>(long)>"
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: void <init>(long)>";
    "(1016)<org.joda.time.LocalDate: java.util.Date toDate()>"->"<java.util.Date: int getDate()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(1073)<org.joda.time.LocalDate: org.joda.time.LocalDate withFields(org.joda.time.ReadablePartial)>"
    "(1073)<org.joda.time.LocalDate: org.joda.time.LocalDate withFields(org.joda.time.ReadablePartial)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1098)<org.joda.time.LocalDate: org.joda.time.LocalDate withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1127)<org.joda.time.LocalDate: org.joda.time.LocalDate withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1215)<org.joda.time.LocalDate: org.joda.time.LocalDate plusYears(int)>"
    "(1215)<org.joda.time.LocalDate: org.joda.time.LocalDate plusYears(int)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(1215)<org.joda.time.LocalDate: org.joda.time.LocalDate plusYears(int)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(1241)<org.joda.time.LocalDate: org.joda.time.LocalDate plusMonths(int)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(1264)<org.joda.time.LocalDate: org.joda.time.LocalDate plusWeeks(int)>"
    "(1264)<org.joda.time.LocalDate: org.joda.time.LocalDate plusWeeks(int)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(1264)<org.joda.time.LocalDate: org.joda.time.LocalDate plusWeeks(int)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(1054)<org.joda.time.LocalDate: org.joda.time.LocalDate withLocalMillis(long)>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(1287)<org.joda.time.LocalDate: org.joda.time.LocalDate plusDays(int)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(1334)<org.joda.time.LocalDate: org.joda.time.LocalDate minusYears(int)>"
    "(1334)<org.joda.time.LocalDate: org.joda.time.LocalDate minusYears(int)>"->"(264)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField years()>";
    "(1334)<org.joda.time.LocalDate: org.joda.time.LocalDate minusYears(int)>"->"(604)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField years()>";
    "(1360)<org.joda.time.LocalDate: org.joda.time.LocalDate minusMonths(int)>"
    "(1360)<org.joda.time.LocalDate: org.joda.time.LocalDate minusMonths(int)>"->"(256)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField months()>";
    "(1360)<org.joda.time.LocalDate: org.joda.time.LocalDate minusMonths(int)>"->"(584)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField months()>";
    "(1383)<org.joda.time.LocalDate: org.joda.time.LocalDate minusWeeks(int)>"
    "(1383)<org.joda.time.LocalDate: org.joda.time.LocalDate minusWeeks(int)>"->"(236)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField weeks()>";
    "(1383)<org.joda.time.LocalDate: org.joda.time.LocalDate minusWeeks(int)>"->"(535)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField weeks()>";
    "(1406)<org.joda.time.LocalDate: org.joda.time.LocalDate minusDays(int)>"
    "(1406)<org.joda.time.LocalDate: org.joda.time.LocalDate minusDays(int)>"->"(220)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField days()>";
    "(1406)<org.joda.time.LocalDate: org.joda.time.LocalDate minusDays(int)>"->"(493)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField days()>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1423)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property property(org.joda.time.DateTimeFieldType)>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1439)<org.joda.time.LocalDate: int getEra()>"
    "(1439)<org.joda.time.LocalDate: int getEra()>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1439)<org.joda.time.LocalDate: int getEra()>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1448)<org.joda.time.LocalDate: int getCenturyOfEra()>"
    "(1448)<org.joda.time.LocalDate: int getCenturyOfEra()>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1448)<org.joda.time.LocalDate: int getCenturyOfEra()>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1457)<org.joda.time.LocalDate: int getYearOfEra()>"
    "(1457)<org.joda.time.LocalDate: int getYearOfEra()>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1457)<org.joda.time.LocalDate: int getYearOfEra()>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1466)<org.joda.time.LocalDate: int getYearOfCentury()>"
    "(1466)<org.joda.time.LocalDate: int getYearOfCentury()>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1466)<org.joda.time.LocalDate: int getYearOfCentury()>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1475)<org.joda.time.LocalDate: int getYear()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1490)<org.joda.time.LocalDate: int getWeekyear()>"
    "(1490)<org.joda.time.LocalDate: int getWeekyear()>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1490)<org.joda.time.LocalDate: int getWeekyear()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1499)<org.joda.time.LocalDate: int getMonthOfYear()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1513)<org.joda.time.LocalDate: int getWeekOfWeekyear()>"
    "(1513)<org.joda.time.LocalDate: int getWeekOfWeekyear()>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1513)<org.joda.time.LocalDate: int getWeekOfWeekyear()>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1522)<org.joda.time.LocalDate: int getDayOfYear()>"
    "(1522)<org.joda.time.LocalDate: int getDayOfYear()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1522)<org.joda.time.LocalDate: int getDayOfYear()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(619)<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(610)<org.joda.time.LocalDate: long getLocalMillis()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1533)<org.joda.time.LocalDate: int getDayOfMonth()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1544)<org.joda.time.LocalDate: int getDayOfWeek()>"
    "(1544)<org.joda.time.LocalDate: int getDayOfWeek()>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1544)<org.joda.time.LocalDate: int getDayOfWeek()>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1560)<org.joda.time.LocalDate: org.joda.time.LocalDate withEra(int)>"
    "(1560)<org.joda.time.LocalDate: org.joda.time.LocalDate withEra(int)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1560)<org.joda.time.LocalDate: org.joda.time.LocalDate withEra(int)>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1575)<org.joda.time.LocalDate: org.joda.time.LocalDate withCenturyOfEra(int)>"
    "(1575)<org.joda.time.LocalDate: org.joda.time.LocalDate withCenturyOfEra(int)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1575)<org.joda.time.LocalDate: org.joda.time.LocalDate withCenturyOfEra(int)>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1590)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfEra(int)>"
    "(1590)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfEra(int)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1590)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfEra(int)>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1605)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfCentury(int)>"
    "(1605)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfCentury(int)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1605)<org.joda.time.LocalDate: org.joda.time.LocalDate withYearOfCentury(int)>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1620)<org.joda.time.LocalDate: org.joda.time.LocalDate withYear(int)>"
    "(1620)<org.joda.time.LocalDate: org.joda.time.LocalDate withYear(int)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1620)<org.joda.time.LocalDate: org.joda.time.LocalDate withYear(int)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1641)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekyear(int)>"
    "(1641)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekyear(int)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1641)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekyear(int)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1656)<org.joda.time.LocalDate: org.joda.time.LocalDate withMonthOfYear(int)>"
    "(1656)<org.joda.time.LocalDate: org.joda.time.LocalDate withMonthOfYear(int)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1656)<org.joda.time.LocalDate: org.joda.time.LocalDate withMonthOfYear(int)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1676)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekOfWeekyear(int)>"
    "(1676)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekOfWeekyear(int)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1676)<org.joda.time.LocalDate: org.joda.time.LocalDate withWeekOfWeekyear(int)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1691)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfYear(int)>"
    "(1691)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfYear(int)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1691)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfYear(int)>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1706)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfMonth(int)>"
    "(1706)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfMonth(int)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1706)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfMonth(int)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1721)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfWeek(int)>"
    "(1721)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfWeek(int)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1721)<org.joda.time.LocalDate: org.joda.time.LocalDate withDayOfWeek(int)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1731)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property era()>"
    "(1731)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property era()>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(1731)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property era()>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(1731)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property era()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1740)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property centuryOfEra()>"
    "(1740)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property centuryOfEra()>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1740)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property centuryOfEra()>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(1740)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property centuryOfEra()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1749)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfCentury()>"
    "(1749)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfCentury()>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1749)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfCentury()>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(1749)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfCentury()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1758)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfEra()>"
    "(1758)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfEra()>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1758)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfEra()>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(1758)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property yearOfEra()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1767)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property year()>"
    "(1767)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property year()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(1767)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property year()>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(1767)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property year()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1776)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekyear()>"
    "(1776)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekyear()>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(1776)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekyear()>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(1776)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekyear()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1785)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property monthOfYear()>"
    "(1785)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property monthOfYear()>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1785)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property monthOfYear()>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(1785)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property monthOfYear()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1794)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekOfWeekyear()>"
    "(1794)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekOfWeekyear()>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1794)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekOfWeekyear()>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(1794)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property weekOfWeekyear()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1803)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfYear()>"
    "(1803)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfYear()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1803)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfYear()>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(1803)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfYear()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1812)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfMonth()>"
    "(1812)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfMonth()>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1812)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfMonth()>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(1812)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfMonth()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1821)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfWeek()>"
    "(1821)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfWeek()>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1821)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfWeek()>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(1821)<org.joda.time.LocalDate: org.joda.time.LocalDate$Property dayOfWeek()>"->"(1907)<org.joda.time.LocalDate$Property: void <init>(org.joda.time.LocalDate,org.joda.time.DateTimeField)>";
    "(1832)<org.joda.time.LocalDate: java.lang.String toString()>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(1842)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(223)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>";
    "(1856)<org.joda.time.LocalDate: java.lang.String toString(java.lang.String,java.util.Locale)>"->"(707)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(41)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuffer: void <init>()>"
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: void <init>()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(74)<org.joda.time.IllegalFieldValueException: java.lang.String createMessage(java.lang.String,java.lang.String)>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(171)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(171)<org.joda.time.IllegalFieldValueException: void <init>(java.lang.String,java.lang.Number,java.lang.Number,java.lang.Number)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(323)<org.joda.time.IllegalFieldValueException: void prependMessage(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(218)<org.joda.time.Hours: void <init>(int)>"
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(45)<org.joda.time.Hours: void <clinit>()>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(82)<org.joda.time.Hours: org.joda.time.Hours hours(int)>"->"(218)<org.joda.time.Hours: void <init>(int)>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(192)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField hours()>";
    "(138)<org.joda.time.Hours: org.joda.time.Hours hoursBetween(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial)>"->"(426)<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField hours()>";
    "(202)<org.joda.time.Hours: org.joda.time.Hours parseHours(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(218)<org.joda.time.Hours: void <init>(int)>"->"(157)<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>";
    "(331)<org.joda.time.Hours: org.joda.time.Duration toStandardDuration()>"->"(178)<org.joda.time.Duration: void <init>(long)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(487)<org.joda.time.Hours: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(53)<org.joda.time.IllegalInstantException: void <init>(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"(669)<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(67)<org.joda.time.IllegalInstantException: java.lang.String createMessage(long,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.Throwable: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.Throwable: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.Throwable: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.Throwable: java.lang.Throwable getCause()>";
    "<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()>";
    "<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>";
    "<java.io.UncheckedIOException: java.io.IOException getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.UncheckedIOException: java.io.IOException getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.UncheckedIOException: java.io.IOException getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.UncheckedIOException: java.io.IOException getCause()>";
    "<java.io.WriteAbortedException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.WriteAbortedException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.WriteAbortedException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.io.WriteAbortedException: java.lang.Throwable getCause()>";
    "<jdk.internal.org.xml.sax.SAXException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<jdk.internal.org.xml.sax.SAXException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<jdk.internal.org.xml.sax.SAXException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<jdk.internal.org.xml.sax.SAXException: java.lang.Throwable getCause()>";
    "<java.security.PrivilegedActionException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.security.PrivilegedActionException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.security.PrivilegedActionException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.security.PrivilegedActionException: java.lang.Throwable getCause()>";
    "<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>";
    "<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>";
    "<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>"
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>";
    "(80)<org.joda.time.IllegalInstantException: boolean isIllegalInstant(java.lang.Throwable)>"->"<java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()>";
    "(89)<org.joda.time.DateTime: org.joda.time.DateTime now()>"
    "(89)<org.joda.time.DateTime: org.joda.time.DateTime now()>"->"(171)<org.joda.time.DateTime: void <init>()>";
    "(101)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.DateTimeZone)>"
    "(101)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.DateTimeZone)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(184)<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>"
    "(101)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.DateTimeZone)>"->"(184)<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(116)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.Chronology)>"
    "(116)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.Chronology)>"->"<java.lang.NullPointerException: void <init>(java.lang.String)>";
    "(198)<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>"
    "(116)<org.joda.time.DateTime: org.joda.time.DateTime now(org.joda.time.Chronology)>"->"(198)<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>";
    "(149)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String)>"->"(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>";
    "(160)<org.joda.time.DateTime: org.joda.time.DateTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(171)<org.joda.time.DateTime: void <init>()>"->"(61)<org.joda.time.base.BaseDateTime: void <init>()>";
    "(184)<org.joda.time.DateTime: void <init>(org.joda.time.DateTimeZone)>"->"(73)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.DateTimeZone)>";
    "(198)<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>"->"(86)<org.joda.time.base.BaseDateTime: void <init>(org.joda.time.Chronology)>";
    "(222)<org.joda.time.DateTime: void <init>(long,org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.DateTimeZone)>";
    "(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>"->"(124)<org.joda.time.base.BaseDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>"->"(255)<org.joda.time.base.BaseDateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(598)<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>"
    "(598)<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(634)<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(634)<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>"->"(611)<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(1045)<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>";
    "(655)<org.joda.time.DateTime: org.joda.time.DateTime withZoneRetainFields(org.joda.time.DateTimeZone)>"->"(236)<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>";
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"->"(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>";
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"->"(118)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int)>";
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"->"(154)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int)>";
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"->"(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>";
    "(727)<org.joda.time.DateTime: org.joda.time.DateTime withDate(int,int,int)>"->"(102)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int)>";
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"->"(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"->"(131)<org.joda.time.chrono.AssembledChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"->"(169)<org.joda.time.chrono.BasicChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"->"(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(771)<org.joda.time.DateTime: org.joda.time.DateTime withTime(int,int,int,int)>"->"(132)<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>";
    "(807)<org.joda.time.DateTime: org.joda.time.DateTime withTimeAtStartOfDay()>"
    "(807)<org.joda.time.DateTime: org.joda.time.DateTime withTimeAtStartOfDay()>"->"(728)<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtStartOfDay(org.joda.time.DateTimeZone)>";
    "(850)<org.joda.time.DateTime: org.joda.time.DateTime withField(org.joda.time.DateTimeFieldType,int)>"
    "(850)<org.joda.time.DateTime: org.joda.time.DateTime withField(org.joda.time.DateTimeFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(876)<org.joda.time.DateTime: org.joda.time.DateTime withFieldAdded(org.joda.time.DurationFieldType,int)>"
    "(876)<org.joda.time.DateTime: org.joda.time.DateTime withFieldAdded(org.joda.time.DurationFieldType,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(1533)<org.joda.time.DateTime: org.joda.time.DateTime$Property property(org.joda.time.DateTimeFieldType)>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1553)<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(1553)<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>"->"(314)<org.joda.time.base.BaseDateTime: org.joda.time.Chronology getChronology()>";
    "(1553)<org.joda.time.DateTime: org.joda.time.DateMidnight toDateMidnight()>"->"(234)<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>";
    "(1565)<org.joda.time.DateTime: org.joda.time.YearMonthDay toYearMonthDay()>"->"(211)<org.joda.time.YearMonthDay: void <init>(long,org.joda.time.Chronology)>";
    "(1577)<org.joda.time.DateTime: org.joda.time.TimeOfDay toTimeOfDay()>"->"(257)<org.joda.time.TimeOfDay: void <init>(long,org.joda.time.Chronology)>";
    "(1588)<org.joda.time.DateTime: org.joda.time.LocalDateTime toLocalDateTime()>"
    "(1588)<org.joda.time.DateTime: org.joda.time.LocalDateTime toLocalDateTime()>"->"(332)<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>";
    "(1599)<org.joda.time.DateTime: org.joda.time.LocalDate toLocalDate()>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(1610)<org.joda.time.DateTime: org.joda.time.LocalTime toLocalTime()>"->"(356)<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>";
    "(1890)<org.joda.time.DateTime: org.joda.time.DateTime$Property era()>"
    "(1890)<org.joda.time.DateTime: org.joda.time.DateTime$Property era()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1899)<org.joda.time.DateTime: org.joda.time.DateTime$Property centuryOfEra()>"
    "(1899)<org.joda.time.DateTime: org.joda.time.DateTime$Property centuryOfEra()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1908)<org.joda.time.DateTime: org.joda.time.DateTime$Property yearOfCentury()>"
    "(1908)<org.joda.time.DateTime: org.joda.time.DateTime$Property yearOfCentury()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1917)<org.joda.time.DateTime: org.joda.time.DateTime$Property yearOfEra()>"
    "(1917)<org.joda.time.DateTime: org.joda.time.DateTime$Property yearOfEra()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1926)<org.joda.time.DateTime: org.joda.time.DateTime$Property year()>"
    "(1926)<org.joda.time.DateTime: org.joda.time.DateTime$Property year()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1935)<org.joda.time.DateTime: org.joda.time.DateTime$Property weekyear()>"
    "(1935)<org.joda.time.DateTime: org.joda.time.DateTime$Property weekyear()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1944)<org.joda.time.DateTime: org.joda.time.DateTime$Property monthOfYear()>"
    "(1944)<org.joda.time.DateTime: org.joda.time.DateTime$Property monthOfYear()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1953)<org.joda.time.DateTime: org.joda.time.DateTime$Property weekOfWeekyear()>"
    "(1953)<org.joda.time.DateTime: org.joda.time.DateTime$Property weekOfWeekyear()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1962)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfYear()>"
    "(1962)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfYear()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1971)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfMonth()>"
    "(1971)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfMonth()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1980)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfWeek()>"
    "(1980)<org.joda.time.DateTime: org.joda.time.DateTime$Property dayOfWeek()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(1991)<org.joda.time.DateTime: org.joda.time.DateTime$Property hourOfDay()>"
    "(1991)<org.joda.time.DateTime: org.joda.time.DateTime$Property hourOfDay()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2000)<org.joda.time.DateTime: org.joda.time.DateTime$Property minuteOfDay()>"
    "(2000)<org.joda.time.DateTime: org.joda.time.DateTime$Property minuteOfDay()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2009)<org.joda.time.DateTime: org.joda.time.DateTime$Property minuteOfHour()>"
    "(2009)<org.joda.time.DateTime: org.joda.time.DateTime$Property minuteOfHour()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2018)<org.joda.time.DateTime: org.joda.time.DateTime$Property secondOfDay()>"
    "(2018)<org.joda.time.DateTime: org.joda.time.DateTime$Property secondOfDay()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2027)<org.joda.time.DateTime: org.joda.time.DateTime$Property secondOfMinute()>"
    "(2027)<org.joda.time.DateTime: org.joda.time.DateTime$Property secondOfMinute()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2036)<org.joda.time.DateTime: org.joda.time.DateTime$Property millisOfDay()>"
    "(2036)<org.joda.time.DateTime: org.joda.time.DateTime$Property millisOfDay()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(2045)<org.joda.time.DateTime: org.joda.time.DateTime$Property millisOfSecond()>"
    "(2045)<org.joda.time.DateTime: org.joda.time.DateTime$Property millisOfSecond()>"->"(2095)<org.joda.time.DateTime$Property: void <init>(org.joda.time.DateTime,org.joda.time.DateTimeField)>";
    "(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"
    "(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>"->"<java.lang.Object: void <init>()>";
    "(185)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>"
    "(43)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(185)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>";
    "(189)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>"
    "(48)<org.joda.time.chrono.GJMonthOfYearDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(189)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>";
    "(53)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>";
    "(201)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>"
    "(58)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(201)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>";
    "(205)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxShortTextLength()>"
    "(63)<org.joda.time.chrono.GJMonthOfYearDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(205)<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxShortTextLength()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"(47)<org.joda.time.field.BaseDurationField: void <init>(org.joda.time.DurationFieldType)>";
    "(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(73)<org.joda.time.field.DecoratedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>";
    "(306)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean isPrecise()>"->"(101)<org.joda.time.field.UnsupportedDurationField: boolean isPrecise()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(376)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>"
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(376)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(128)<org.joda.time.field.UnsupportedDurationField: int getValue(long,long)>";
    "(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>"->"(111)<org.joda.time.field.BaseDurationField: int getValue(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(376)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>";
    "(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>"->"(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(376)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(164)<org.joda.time.field.UnsupportedDurationField: long getMillis(int,long)>";
    "(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(376)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long addOffset(long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>";
    "(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>"->"(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(356)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(366)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetFromLocalToSubtract(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(147)<org.joda.time.field.ScaledDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(393)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int hashCode()>"->"(256)<org.joda.time.field.UnsupportedDurationField: int hashCode()>";
    "(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"
    "(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>"
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"(355)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String getMessage()>";
    "(382)<org.joda.time.chrono.LimitChronology$LimitException: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>"
    "(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"<java.lang.String: int length()>";
    "(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"
    "(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(702)<org.joda.time.chrono.GJChronology$CutoverField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>"
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>"
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(340)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(535)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(162)<org.joda.time.field.OffsetDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(716)<org.joda.time.field.BaseDateTimeField: int getLeapAmount(long)>";
    "(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>"->"(370)<org.joda.time.field.UnsupportedDateTimeField: int getLeapAmount(long)>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(239)<org.joda.time.chrono.BaseChronology: long set(org.joda.time.ReadablePartial,long)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(850)<org.joda.time.field.BaseDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(600)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>"->"(469)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"
    "(45)<org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>"->"(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>";
    "(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "(59)<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(74)<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.LenientChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(144)<org.joda.time.chrono.LenientChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(153)<org.joda.time.chrono.LenientChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(169)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>"
    "(69)<org.joda.time.chrono.GJEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(169)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String eraValueToText(int)>";
    "(93)<org.joda.time.chrono.GJEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>";
    "(181)<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>"
    "(144)<org.joda.time.chrono.GJEraDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(181)<org.joda.time.chrono.GJLocaleSymbols: int getEraMaxTextLength()>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"(532)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: void <init>(int,int)>";
    "(77)<org.joda.time.chrono.IslamicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(191)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(234)<org.joda.time.chrono.IslamicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,org.joda.time.chrono.IslamicChronology$LeapYearPatternType)>"->"(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(274)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>"
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(216)<org.joda.time.chrono.BasicChronology: boolean equals(java.lang.Object)>";
    "(292)<org.joda.time.chrono.IslamicChronology: boolean equals(java.lang.Object)>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(234)<org.joda.time.chrono.BasicChronology: int hashCode()>";
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(253)<org.joda.time.chrono.IslamicChronology: org.joda.time.chrono.IslamicChronology$LeapYearPatternType getLeapYearPatternType()>";
    "(576)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>"
    "(310)<org.joda.time.chrono.IslamicChronology: int hashCode()>"->"(576)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: int hashCode()>";
    "(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"
    "(543)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>"
    "(385)<org.joda.time.chrono.IslamicChronology: boolean isLeapYear(int)>"->"(543)<org.joda.time.chrono.IslamicChronology$LeapYearPatternType: boolean isLeapYear(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(450)<org.joda.time.chrono.IslamicChronology: long calculateFirstDayOfYearMillis(int)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(491)<org.joda.time.chrono.IslamicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(62)<org.joda.time.chrono.EthiopicChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(167)<org.joda.time.chrono.EthiopicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(198)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(258)<org.joda.time.chrono.EthiopicChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(209)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>"
    "(68)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(209)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToText(int)>";
    "(213)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>"
    "(79)<org.joda.time.chrono.GJDayOfWeekDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(213)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String dayOfWeekValueToShortText(int)>";
    "(91)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int convertText(java.lang.String,java.util.Locale)>"->"(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>";
    "(225)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>"
    "(123)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(225)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxTextLength()>";
    "(229)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxShortTextLength()>"
    "(133)<org.joda.time.chrono.GJDayOfWeekDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(229)<org.joda.time.chrono.GJLocaleSymbols: int getDayOfWeekMaxShortTextLength()>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(62)<org.joda.time.chrono.CopticChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(118)<org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(166)<org.joda.time.chrono.CopticChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(59)<org.joda.time.chrono.BasicFixedMonthChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(199)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(259)<org.joda.time.chrono.CopticChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"(51)<org.joda.time.chrono.BasicSingleEraDateTimeField: void <init>(java.lang.String)>";
    "(66)<org.joda.time.chrono.BuddhistChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(533)<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(105)<org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(132)<org.joda.time.chrono.BuddhistChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(161)<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.BuddhistChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "<java.lang.String: int hashCode()>"
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(196)<org.joda.time.chrono.BuddhistChronology: int hashCode()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(207)<org.joda.time.chrono.BuddhistChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(75)<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(53)<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(47)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(72)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(98)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(82)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType,int)>";
    "(216)<org.joda.time.chrono.BuddhistChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(59)<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "(57)<org.joda.time.chrono.ISOChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>";
    "(89)<org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(110)<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(131)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(148)<org.joda.time.chrono.ISOChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(58)<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(109)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DateTimeFieldType)>";
    "(157)<org.joda.time.chrono.ISOChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(122)<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField,org.joda.time.DurationField,org.joda.time.DateTimeFieldType)>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(179)<org.joda.time.chrono.ISOChronology: boolean equals(java.lang.Object)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(196)<org.joda.time.chrono.ISOChronology: int hashCode()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(205)<org.joda.time.chrono.ISOChronology: java.lang.Object writeReplace()>"
    "(213)<org.joda.time.chrono.ISOChronology$Stub: void <init>(org.joda.time.DateTimeZone)>"
    "(205)<org.joda.time.chrono.ISOChronology: java.lang.Object writeReplace()>"->"(213)<org.joda.time.chrono.ISOChronology$Stub: void <init>(org.joda.time.DateTimeZone)>";
    "(70)<org.joda.time.chrono.JulianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(77)<org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>"->"(108)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(124)<org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(167)<org.joda.time.chrono.JulianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(200)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(270)<org.joda.time.chrono.JulianChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(54)<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(176)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(264)<org.joda.time.chrono.IslamicChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(188)<org.joda.time.chrono.EthiopicChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(121)<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(190)<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(189)<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology withUTC()>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"
    "(59)<org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(109)<org.joda.time.field.ScaledDurationField: long getUnitMillis()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(310)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getUnitMillis()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(101)<org.joda.time.field.DecoratedDurationField: long getUnitMillis()>";
    "(75)<org.joda.time.chrono.ZonedChronology: boolean useTimeArithmetic(org.joda.time.DurationField)>"->"(218)<org.joda.time.field.UnsupportedDurationField: long getUnitMillis()>";
    "(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>"
    "(89)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(93)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(315)<org.joda.time.chrono.AssembledChronology: java.lang.Object getParam()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(97)<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(85)<org.joda.time.chrono.ZonedChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeZone)>";
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"
    "(142)<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>"->"(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(165)<org.joda.time.chrono.ZonedChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(212)<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(296)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(224)<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(277)<org.joda.time.chrono.ZonedChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(131)<org.joda.time.chrono.BasicChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(234)<org.joda.time.chrono.BasicChronology: int hashCode()>"->"<java.lang.Class: java.lang.String getName()>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.Class: java.lang.String getName()>";
    "<java.lang.String: int lastIndexOf(int)>"
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.String: int lastIndexOf(int)>";
    "(245)<org.joda.time.chrono.BasicChronology: java.lang.String toString()>"->"<java.lang.String: java.lang.String substring(int)>";
    "(233)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>"
    "(799)<org.joda.time.chrono.BasicChronology$HalfdayField: java.lang.String getAsText(int,java.util.Locale)>"->"(233)<org.joda.time.chrono.GJLocaleSymbols: java.lang.String halfdayValueToText(int)>";
    "(803)<org.joda.time.chrono.BasicChronology$HalfdayField: long set(long,java.lang.String,java.util.Locale)>"->"(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>";
    "(247)<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>"
    "(807)<org.joda.time.chrono.BasicChronology$HalfdayField: int getMaximumTextLength(java.util.Locale)>"->"(247)<org.joda.time.chrono.GJLocaleSymbols: int getHalfdayMaxTextLength()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(543)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>"
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(543)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(543)<org.joda.time.DateTime: org.joda.time.DateTime toDateTime()>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(378)<org.joda.time.base.AbstractInstant: boolean isBefore(org.joda.time.ReadableInstant)>";
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"
    "(67)<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>"->"(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>";
    "(97)<org.joda.time.chrono.LimitChronology: void <init>(org.joda.time.Chronology,org.joda.time.DateTime,org.joda.time.DateTime)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(127)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withUTC()>"->"(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>";
    "(136)<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(191)<org.joda.time.base.AbstractInstant: org.joda.time.MutableDateTime toMutableDateTime()>";
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"
    "(175)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(185)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(197)<org.joda.time.chrono.LimitChronology: long getDateTimeMillis(long,int,int,int,int)>"->"(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>";
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(207)<org.joda.time.chrono.LimitChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.util.HashMap: void <init>()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(66)<org.joda.time.field.BaseDurationField: boolean isSupported()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(92)<org.joda.time.field.UnsupportedDurationField: boolean isSupported()>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"
    "(254)<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>"->"(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(326)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(345)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(210)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(225)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(526)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(540)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(784)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(804)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(91)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(166)<org.joda.time.field.OffsetDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(533)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(547)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(180)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(726)<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(352)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(379)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getLeapDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(128)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(111)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"
    "(266)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>"->"(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(305)<org.joda.time.base.BaseDateTime: long getMillis()>";
    "(283)<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>"->"(349)<org.joda.time.chrono.LimitChronology$LimitException: void <init>(org.joda.time.chrono.LimitChronology,java.lang.String,boolean)>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(301)<org.joda.time.chrono.LimitChronology: boolean equals(java.lang.Object)>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(109)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getLowerLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(118)<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime getUpperLimit()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(321)<org.joda.time.chrono.LimitChronology: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>"
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"(314)<org.joda.time.base.AbstractDateTime: java.lang.String toString()>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(334)<org.joda.time.chrono.LimitChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>"
    "(52)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,int)>"->"(56)<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(585)<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(217)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>"->"(298)<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>";
    "(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(340)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getLeapAmount(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"
    "(45)<org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>"->"(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>";
    "(59)<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(63)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withUTC()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(107)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeZone getZone()>";
    "(74)<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(127)<org.joda.time.chrono.StrictChronology: boolean equals(java.lang.Object)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(144)<org.joda.time.chrono.StrictChronology: int hashCode()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(153)<org.joda.time.chrono.StrictChronology: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(67)<org.joda.time.chrono.GregorianChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(110)<org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>"->"(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(153)<org.joda.time.chrono.GregorianChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>"->"(75)<org.joda.time.chrono.BasicGJChronology: void <init>(org.joda.time.Chronology,java.lang.Object,int)>";
    "(186)<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(143)<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(104)<org.joda.time.chrono.GJChronology: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(144)<org.joda.time.Instant: org.joda.time.Instant toInstant()>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(144)<org.joda.time.Instant: org.joda.time.Instant toInstant()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(335)<org.joda.time.LocalDate: void <init>(long,org.joda.time.Chronology)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(1475)<org.joda.time.LocalDate: int getYear()>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>";
    "(188)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(238)<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>"->"(118)<org.joda.time.Instant: void <init>(long)>";
    "(262)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(272)<org.joda.time.chrono.GJChronology: void <init>(org.joda.time.Chronology,org.joda.time.chrono.JulianChronology,org.joda.time.chrono.GregorianChronology,org.joda.time.Instant)>"->"(99)<org.joda.time.chrono.AssembledChronology: void <init>(org.joda.time.Chronology,java.lang.Object)>";
    "(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>"->"(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>";
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>"
    "(308)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(322)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"(308)<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology getBase()>";
    "(347)<org.joda.time.chrono.GJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(409)<org.joda.time.chrono.GJChronology: boolean equals(java.lang.Object)>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"<java.lang.String: int hashCode()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(428)<org.joda.time.chrono.GJChronology: int hashCode()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: void <init>(int)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>";
    "<java.lang.StringBuffer: java.lang.StringBuffer append(int)>"
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(284)<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(298)<org.joda.time.chrono.GJChronology: org.joda.time.Chronology withUTC()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(397)<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(256)<org.joda.time.Instant: long getMillis()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(291)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>";
    "(440)<org.joda.time.chrono.GJChronology: java.lang.String toString()>"->"(548)<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(138)<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(206)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(522)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(780)<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(87)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(529)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(173)<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(343)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(211)<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(106)<org.joda.time.chrono.BasicSingleEraDateTimeField: org.joda.time.DurationField getDurationField()>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(637)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(466)<org.joda.time.chrono.GJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>"->"(615)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>";
    "(213)<org.joda.time.chrono.ISOChronology$Stub: void <init>(org.joda.time.DateTimeZone)>"->"<java.lang.Object: void <init>()>";
    "(29)<org.joda.time.chrono.GJCacheKey: void <init>(org.joda.time.DateTimeZone,org.joda.time.Instant,int)>"->"<java.lang.Object: void <init>()>";
    "(37)<org.joda.time.chrono.GJCacheKey: int hashCode()>"
    "(37)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(279)<org.joda.time.base.AbstractInstant: int hashCode()>";
    "(37)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(1267)<org.joda.time.DateTimeZone: int hashCode()>";
    "(37)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(102)<org.joda.time.tz.FixedDateTimeZone: int hashCode()>";
    "(37)<org.joda.time.chrono.GJCacheKey: int hashCode()>"->"(123)<org.joda.time.tz.CachedDateTimeZone: int hashCode()>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(259)<org.joda.time.base.AbstractInstant: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(1651)<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(88)<org.joda.time.tz.FixedDateTimeZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(1315)<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>";
    "(47)<org.joda.time.chrono.GJCacheKey: boolean equals(java.lang.Object)>"->"(127)<org.joda.time.tz.CachedDateTimeZone: boolean equals(java.lang.Object)>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(69)<org.joda.time.field.BaseDateTimeField: boolean isSupported()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(102)<org.joda.time.field.DelegatedDateTimeField: boolean isSupported()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(108)<org.joda.time.field.UnsupportedDateTimeField: boolean isSupported()>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(50)<org.joda.time.field.BaseDateTimeField: void <init>(org.joda.time.DateTimeFieldType)>";
    "(419)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"<java.lang.IllegalArgumentException: void <init>()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(60)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(106)<org.joda.time.field.DelegatedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(75)<org.joda.time.field.DecoratedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(656)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(62)<org.joda.time.field.LenientDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(58)<org.joda.time.field.StrictDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(117)<org.joda.time.field.UnsupportedDateTimeField: boolean isLenient()>";
    "(432)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLenient()>"->"(57)<org.joda.time.chrono.BasicSingleEraDateTimeField: boolean isLenient()>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(73)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(80)<org.joda.time.field.SkipDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(660)<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(110)<org.joda.time.field.DelegatedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(101)<org.joda.time.field.OffsetDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(136)<org.joda.time.field.RemainderDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(126)<org.joda.time.field.UnsupportedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(141)<org.joda.time.field.DividedDateTimeField: int get(long)>";
    "(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>"->"(62)<org.joda.time.chrono.BasicSingleEraDateTimeField: int get(long)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(94)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(114)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(668)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(441)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(135)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(168)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(134)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(680)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(446)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(180)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(153)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(130)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(676)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(171)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(451)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsText(int,java.util.Locale)>"->"(126)<org.joda.time.chrono.BasicSingleEraDateTimeField: java.lang.String getAsText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(227)<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(150)<org.joda.time.field.DelegatedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(688)<org.joda.time.chrono.GJChronology$CutoverField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(455)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>"->"(216)<org.joda.time.field.UnsupportedDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(489)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(461)<org.joda.time.field.BaseDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(261)<org.joda.time.field.UnsupportedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(249)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(170)<org.joda.time.field.DelegatedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(489)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(461)<org.joda.time.field.BaseDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(141)<org.joda.time.field.OffsetDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(154)<org.joda.time.field.RemainderDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(261)<org.joda.time.field.UnsupportedDateTimeField: long addWrapField(long,int)>";
    "(483)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long addWrapField(long,int)>"->"(182)<org.joda.time.field.DividedDateTimeField: long addWrapField(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(309)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(88)<org.joda.time.field.SkipDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(726)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(72)<org.joda.time.field.LenientDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(153)<org.joda.time.field.OffsetDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(166)<org.joda.time.field.RemainderDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(186)<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(68)<org.joda.time.field.StrictDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(297)<org.joda.time.field.UnsupportedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(202)<org.joda.time.field.DividedDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(67)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,int)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(436)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(63)<org.joda.time.IllegalInstantException: void <init>(long,java.lang.String)>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"(129)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.String)>";
    "<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
    "(495)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,int)>"->"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(618)<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(190)<org.joda.time.field.DelegatedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(757)<org.joda.time.chrono.GJChronology$CutoverField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(315)<org.joda.time.field.UnsupportedDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(509)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(73)<org.joda.time.chrono.BasicSingleEraDateTimeField: long set(long,java.lang.String,java.util.Locale)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(331)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(217)<org.joda.time.field.DelegatedDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(788)<org.joda.time.chrono.GJChronology$CutoverField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(158)<org.joda.time.field.OffsetDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(704)<org.joda.time.field.BaseDateTimeField: boolean isLeap(long)>";
    "(537)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean isLeap(long)>"->"(361)<org.joda.time.field.UnsupportedDateTimeField: boolean isLeap(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(340)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(221)<org.joda.time.field.DelegatedDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(535)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(796)<org.joda.time.chrono.GJChronology$CutoverField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(162)<org.joda.time.field.OffsetDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(716)<org.joda.time.field.BaseDateTimeField: int getLeapAmount(long)>";
    "(542)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getLeapAmount(long)>"->"(370)<org.joda.time.field.UnsupportedDateTimeField: int getLeapAmount(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(360)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(269)<org.joda.time.field.DelegatedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(880)<org.joda.time.chrono.GJChronology$CutoverField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(188)<org.joda.time.field.OffsetDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(203)<org.joda.time.field.RemainderDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(478)<org.joda.time.field.UnsupportedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(233)<org.joda.time.field.DividedDateTimeField: long roundFloor(long)>";
    "(551)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundFloor(long)>"->"(81)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundFloor(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(886)<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(273)<org.joda.time.field.DelegatedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(895)<org.joda.time.chrono.GJChronology$CutoverField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(192)<org.joda.time.field.OffsetDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(207)<org.joda.time.field.RemainderDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(487)<org.joda.time.field.UnsupportedDateTimeField: long roundCeiling(long)>";
    "(563)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long roundCeiling(long)>"->"(86)<org.joda.time.chrono.BasicSingleEraDateTimeField: long roundCeiling(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(367)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(289)<org.joda.time.field.DelegatedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(994)<org.joda.time.field.BaseDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(208)<org.joda.time.field.OffsetDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(223)<org.joda.time.field.RemainderDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(523)<org.joda.time.field.UnsupportedDateTimeField: long remainder(long)>";
    "(575)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long remainder(long)>"->"(238)<org.joda.time.field.DividedDateTimeField: long remainder(long)>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(350)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(100)<org.joda.time.field.SkipDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(95)<org.joda.time.field.DecoratedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(811)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(229)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(175)<org.joda.time.field.OffsetDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(189)<org.joda.time.field.RemainderDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(388)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(220)<org.joda.time.field.DividedDateTimeField: int getMinimumValue()>";
    "(580)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue()>"->"(116)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMinimumValue()>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(758)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(237)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(815)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(589)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>"->"(406)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(772)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(241)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(819)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(593)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>"->"(415)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(355)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(245)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(99)<org.joda.time.field.DecoratedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(842)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(184)<org.joda.time.field.OffsetDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(199)<org.joda.time.field.RemainderDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(424)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(229)<org.joda.time.field.DividedDateTimeField: int getMaximumValue()>";
    "(597)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue()>"->"(121)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumValue()>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(804)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(253)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(863)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(606)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>"->"(442)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(818)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(257)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(868)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(610)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>"->"(451)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(829)<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(261)<org.joda.time.field.DelegatedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(910)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(460)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(614)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(131)<org.joda.time.chrono.BasicSingleEraDateTimeField: int getMaximumTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(850)<org.joda.time.field.BaseDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(265)<org.joda.time.field.DelegatedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(600)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(915)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(618)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(469)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumShortTextLength(java.util.Locale)>";
    "(622)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>"->"<java.lang.ArithmeticException: void <init>(java.lang.String)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(130)<org.joda.time.field.ScaledDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(381)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"<java.lang.Object: boolean equals(java.lang.Object)>";
    "(633)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean equals(java.lang.Object)>"->"(238)<org.joda.time.field.UnsupportedDurationField: boolean equals(java.lang.Object)>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"<java.lang.Object: int hashCode()>";
    "(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>"->"(647)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int hashCode()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(55)<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType getType()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(79)<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType getType()>";
    "(389)<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>"->"(52)<org.joda.time.field.DecoratedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DurationFieldType)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(63)<org.joda.time.field.ScaledDurationField: int getValue(long,long)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(314)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getValue(long,long)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(128)<org.joda.time.field.UnsupportedDurationField: int getValue(long,long)>";
    "(394)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getValue(long,long)>"->"(111)<org.joda.time.field.BaseDurationField: int getValue(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(67)<org.joda.time.field.ScaledDurationField: long getValueAsLong(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(318)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getValueAsLong(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(137)<org.joda.time.field.UnsupportedDurationField: long getValueAsLong(long,long)>";
    "(399)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getValueAsLong(long,long)>"->"(77)<org.joda.time.field.DecoratedDurationField: long getValueAsLong(long,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.ScaledDurationField: long getMillis(int,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(322)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(int,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(164)<org.joda.time.field.UnsupportedDurationField: long getMillis(int,long)>";
    "(404)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(int,long)>"->"(81)<org.joda.time.field.DecoratedDurationField: long getMillis(int,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(86)<org.joda.time.field.ScaledDurationField: long getMillis(long,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(326)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getMillis(long,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(173)<org.joda.time.field.UnsupportedDurationField: long getMillis(long,long)>";
    "(409)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getMillis(long,long)>"->"(85)<org.joda.time.field.DecoratedDurationField: long getMillis(long,long)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(91)<org.joda.time.field.ScaledDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(330)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(182)<org.joda.time.field.UnsupportedDurationField: long add(long,int)>";
    "(414)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,int)>"->"(1141)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,int)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(96)<org.joda.time.field.ScaledDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(336)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(191)<org.joda.time.field.UnsupportedDurationField: long add(long,long)>";
    "(421)<org.joda.time.chrono.LimitChronology$LimitDurationField: long add(long,long)>"->"(1145)<org.joda.time.chrono.GJChronology$LinkedDurationField: long add(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(101)<org.joda.time.field.ScaledDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(342)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(200)<org.joda.time.field.UnsupportedDurationField: int getDifference(long,long)>";
    "(428)<org.joda.time.chrono.LimitChronology$LimitDurationField: int getDifference(long,long)>"->"(1149)<org.joda.time.chrono.GJChronology$LinkedDurationField: int getDifference(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(69)<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField getWrappedField()>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(105)<org.joda.time.field.ScaledDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(349)<org.joda.time.chrono.ZonedChronology$ZonedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(209)<org.joda.time.field.UnsupportedDurationField: long getDifferenceAsLong(long,long)>";
    "(434)<org.joda.time.chrono.LimitChronology$LimitDurationField: long getDifferenceAsLong(long,long)>"->"(1153)<org.joda.time.chrono.GJChronology$LinkedDurationField: long getDifferenceAsLong(long,long)>";
    "(36)<org.joda.time.chrono.GJLocaleSymbols: void <clinit>()>"->"<java.util.concurrent.ConcurrentHashMap: void <init>()>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>";
    "(45)<org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>";
    "(76)<org.joda.time.chrono.GJLocaleSymbols: void addSymbols(java.util.TreeMap,java.lang.String[],java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.lang.String: java.lang.String intern()>";
    "(85)<org.joda.time.chrono.GJLocaleSymbols: void addNumerals(java.util.TreeMap,int,int,java.lang.Integer[])>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(91)<org.joda.time.chrono.GJLocaleSymbols: int maxLength(java.lang.String[])>"->"<java.lang.String: int length()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.Object: void <init>()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getEras()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getEras()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getMonths()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>";
    "<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>"
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "(125)<org.joda.time.chrono.GJLocaleSymbols: void <init>(java.util.Locale)>"->"<java.util.TreeMap: void <init>(java.util.Comparator)>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(173)<org.joda.time.chrono.GJLocaleSymbols: int eraTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(193)<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"<java.lang.Integer: int intValue()>";
    "(217)<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(237)<org.joda.time.chrono.GJLocaleSymbols: int halfdayTextToValue(java.lang.String)>"->"(189)<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>";
    "(42)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <clinit>()>"->"(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(48)<org.joda.time.chrono.ISOYearOfEraDateTimeField: void <init>()>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(53)<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DurationField getRangeDurationField()>"->"(288)<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField eras()>";
    "(98)<org.joda.time.chrono.ISOYearOfEraDateTimeField: int getMaximumValue()>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(58)<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(94)<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(95)<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType getType()>";
    "(452)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>"->"(55)<org.joda.time.field.DecoratedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>";
    "(460)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int get(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(465)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsText(long,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(470)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(489)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long addWrapField(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(508)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,int)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(515)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long set(long,java.lang.String,java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(530)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: boolean isLeap(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(535)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getLeapAmount(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(544)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(551)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(558)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfFloor(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(565)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfCeiling(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(572)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long roundHalfEven(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(579)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long remainder(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(596)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumTextLength(java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(600)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumShortTextLength(java.util.Locale)>"->"(71)<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField getWrappedField()>";
    "(951)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(962)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(973)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,long)>"->"(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(626)<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>";
    "(985)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>"->"(1136)<org.joda.time.chrono.GJChronology$LinkedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.chrono.GJChronology$ImpreciseCutoverField)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(93)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(154)<org.joda.time.field.DelegatedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(475)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(692)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(113)<org.joda.time.field.OffsetDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(459)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(253)<org.joda.time.field.BaseDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(225)<org.joda.time.field.UnsupportedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(158)<org.joda.time.field.DividedDateTimeField: long add(long,int)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(994)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,int)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(162)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(158)<org.joda.time.field.DelegatedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(482)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(696)<org.joda.time.chrono.GJChronology$CutoverField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(127)<org.joda.time.field.OffsetDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(471)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(267)<org.joda.time.field.BaseDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(234)<org.joda.time.field.UnsupportedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(170)<org.joda.time.field.DividedDateTimeField: long add(long,long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(1027)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long add(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(92)<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(178)<org.joda.time.field.DelegatedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(496)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(718)<org.joda.time.chrono.GJChronology$CutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(522)<org.joda.time.field.BaseDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(515)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(279)<org.joda.time.field.UnsupportedDateTimeField: int getDifference(long,long)>";
    "(1060)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getDifference(long,long)>"->"(186)<org.joda.time.field.DividedDateTimeField: int getDifference(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(928)<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(920)<org.joda.time.chrono.GJChronology$CutoverField: long julianToGregorian(long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(254)<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(182)<org.joda.time.field.DelegatedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(502)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(722)<org.joda.time.chrono.GJChronology$CutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(545)<org.joda.time.field.BaseDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(522)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(288)<org.joda.time.field.UnsupportedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1080)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long getDifferenceAsLong(long,long)>"->"(190)<org.joda.time.field.DividedDateTimeField: long getDifferenceAsLong(long,long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(746)<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(233)<org.joda.time.field.DelegatedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(586)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(823)<org.joda.time.chrono.GJChronology$CutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(584)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>";
    "(1110)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMinimumValue(long)>"->"(397)<org.joda.time.field.UnsupportedDateTimeField: int getMinimumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(792)<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(249)<org.joda.time.field.DelegatedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(591)<org.joda.time.chrono.LimitChronology$LimitDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(846)<org.joda.time.chrono.GJChronology$CutoverField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(601)<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>";
    "(1118)<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: int getMaximumValue(long)>"->"(433)<org.joda.time.field.UnsupportedDateTimeField: int getMaximumValue(long)>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(292)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField era()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(272)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(284)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(276)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(268)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField year()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(232)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(260)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(228)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(252)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(248)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(240)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(224)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(216)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(208)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(212)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(200)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(196)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(188)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(184)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>"
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(176)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(172)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(164)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(160)<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(671)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField era()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(622)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(651)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField centuryOfEra()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(631)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField yearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(613)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(524)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(593)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(515)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(573)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyearOfCentury()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(564)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(544)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField weekOfWeekyear()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(506)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfWeek()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(482)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField halfdayOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(464)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(473)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfHalfday()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(444)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField clockhourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(435)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(415)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(406)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(386)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(377)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(357)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfDay()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"(348)<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>";
    "(492)<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>"->"<java.lang.InternalError: void <init>()>";
    "<java.security.BasicPermission: void <init>(java.lang.String)>"
    "(57)<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>"->"<java.security.BasicPermission: void <init>(java.lang.String)>";
    "(75)<org.joda.time.Interval: org.joda.time.Interval parse(java.lang.String)>"
    "(270)<org.joda.time.Interval: void <init>(java.lang.Object)>"
    "(75)<org.joda.time.Interval: org.joda.time.Interval parse(java.lang.String)>"->"(270)<org.joda.time.Interval: void <init>(java.lang.Object)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.String: int length()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.String: int length()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.String: char charAt(int)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(256)<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withOffsetParsed()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(191)<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(921)<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(306)<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>";
    "(238)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(238)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>";
    "(253)<org.joda.time.Interval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(253)<org.joda.time.Interval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>";
    "(105)<org.joda.time.Interval: org.joda.time.Interval parseWithOffset(java.lang.String)>"->"(199)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "(159)<org.joda.time.Interval: void <init>(long,long)>"->"(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>";
    "(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>"->"(71)<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>";
    "(199)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>"->"(86)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>";
    "(238)<org.joda.time.Interval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>"->"(144)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>";
    "(253)<org.joda.time.Interval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>"->"(168)<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>";
    "(270)<org.joda.time.Interval: void <init>(java.lang.Object)>"->"(189)<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>";
    "(225)<org.joda.time.base.BaseInterval: long getStartMillis()>"
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(235)<org.joda.time.base.BaseInterval: long getEndMillis()>"
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(328)<org.joda.time.Interval: org.joda.time.Interval overlap(org.joda.time.ReadableInterval)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(225)<org.joda.time.base.BaseInterval: long getStartMillis()>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(235)<org.joda.time.base.BaseInterval: long getEndMillis()>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(363)<org.joda.time.Interval: org.joda.time.Interval gap(org.joda.time.ReadableInterval)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(432)<org.joda.time.Interval: org.joda.time.Interval withChronology(org.joda.time.Chronology)>"
    "(432)<org.joda.time.Interval: org.joda.time.Interval withChronology(org.joda.time.Chronology)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(446)<org.joda.time.Interval: org.joda.time.Interval withStartMillis(long)>"
    "(446)<org.joda.time.Interval: org.joda.time.Interval withStartMillis(long)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(472)<org.joda.time.Interval: org.joda.time.Interval withEndMillis(long)>"
    "(472)<org.joda.time.Interval: org.joda.time.Interval withEndMillis(long)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(499)<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(517)<org.joda.time.Interval: org.joda.time.Interval withDurationBeforeEnd(org.joda.time.ReadableDuration)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(536)<org.joda.time.Interval: org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod)>"
    "(536)<org.joda.time.Interval: org.joda.time.Interval withPeriodAfterStart(org.joda.time.ReadablePeriod)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
    "(553)<org.joda.time.Interval: org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod)>"
    "(553)<org.joda.time.Interval: org.joda.time.Interval withPeriodBeforeEnd(org.joda.time.ReadablePeriod)>"->"(186)<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>";
}
