digraph "call-graph" {
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"
    "(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>"
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"->"(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>";
    "(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>"
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"->"(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"
    "<java.lang.Math: void <clinit>()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.Math: void <clinit>()>";
    "(20)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult ordered()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"(20)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult ordered()>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>";
    "<java.lang.Math: int min(int,int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.Math: int min(int,int)>";
    "<java.lang.Object: void <clinit>()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.Object: void <clinit>()>";
    "(70)<sortpom.wrapper.ElementWrapperCreator: boolean isDependencyElement(org.jdom.Element)>"
    "(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>"
    "(70)<sortpom.wrapper.ElementWrapperCreator: boolean isDependencyElement(org.jdom.Element)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>"
    "(70)<sortpom.wrapper.ElementWrapperCreator: boolean isDependencyElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(77)<sortpom.wrapper.ElementWrapperCreator: boolean isExclusionElement(org.jdom.Element)>"
    "(77)<sortpom.wrapper.ElementWrapperCreator: boolean isExclusionElement(org.jdom.Element)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(77)<sortpom.wrapper.ElementWrapperCreator: boolean isExclusionElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>"
    "(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(94)<sortpom.wrapper.ElementWrapperCreator: boolean isModuleElement(org.jdom.Element)>"
    "(94)<sortpom.wrapper.ElementWrapperCreator: boolean isModuleElement(org.jdom.Element)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(94)<sortpom.wrapper.ElementWrapperCreator: boolean isModuleElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(101)<sortpom.wrapper.ElementWrapperCreator: boolean isExecutionElement(org.jdom.Element)>"
    "(101)<sortpom.wrapper.ElementWrapperCreator: boolean isExecutionElement(org.jdom.Element)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(101)<sortpom.wrapper.ElementWrapperCreator: boolean isExecutionElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>"
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"
    "(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>"->"(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>";
    "(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>"->"(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>";
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"
    "(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>";
    "<sortpom.wrapper.operation.SortAttributesOperation$detach__1: java.util.function.Consumer bootstrap$()>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<sortpom.wrapper.operation.SortAttributesOperation$detach__1: java.util.function.Consumer bootstrap$()>";
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.lang.Object: void <clinit>()>";
    "(38)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>"
    "<java.util.ArrayList: void <clinit>()>"
    "(38)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>"->"<java.util.ArrayList: void <clinit>()>";
    "(38)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>"->"<java.lang.Object: void <clinit>()>";
    "(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>"->"(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>";
    "<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>"
    "(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>"->"<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>";
    "<sortpom.wrapper.operation.SortAttributesOperation$getName__2: java.util.function.Function bootstrap$()>"
    "(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>"->"<sortpom.wrapper.operation.SortAttributesOperation$getName__2: java.util.function.Function bootstrap$()>";
    "(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"
    "(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>"
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"->"(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>";
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"->"<java.lang.Object: void <clinit>()>";
    "(68)<sortpom.wrapper.operation.ToStringOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"
    "(68)<sortpom.wrapper.operation.ToStringOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"->"(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>";
    "(68)<sortpom.wrapper.operation.ToStringOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"->"<java.lang.Object: void <clinit>()>";
    "(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>"->"(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>";
    "(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void <clinit>()>";
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void <clinit>()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"<java.lang.Object: void <clinit>()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: java.util.function.Consumer bootstrap$(sortpom.wrapper.operation.HierarchyWrapperOperation)>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: java.util.function.Consumer bootstrap$(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"->"(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>";
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"->"<java.lang.Object: void <clinit>()>";
    "(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>"
    "(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>"->"(19)<sortpom.wrapper.operation.SortAttributesOperation: void <clinit>()>";
    "(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>"->"<java.lang.Object: void <clinit>()>";
    "(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>"
    "(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>"->"(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>";
    "(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"->"(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"->"(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>";
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(24)<sortpom.wrapper.content.DependencySortedWrapper: void <init>(org.jdom.Element,int)>"
    "(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>"
    "(24)<sortpom.wrapper.content.DependencySortedWrapper: void <init>(org.jdom.Element,int)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(24)<sortpom.wrapper.content.DependencySortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.lang.Object: void <clinit>()>";
    "(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"
    "(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"<java.lang.Object: void <clinit>()>";
    "(24)<sortpom.wrapper.content.PluginSortedWrapper: void <init>(org.jdom.Element,int)>"
    "(24)<sortpom.wrapper.content.PluginSortedWrapper: void <init>(org.jdom.Element,int)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(24)<sortpom.wrapper.content.PluginSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.lang.Object: void <clinit>()>";
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"<java.lang.Object: void <clinit>()>";
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>";
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope valueOf(java.lang.String)>"
    "<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>";
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>";
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>";
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>";
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"
    "<java.lang.Integer: void <clinit>()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.Integer: java.lang.Integer valueOf(int)>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: java.util.function.Predicate bootstrap$()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: java.util.function.Predicate bootstrap$()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter)>";
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Object: void <clinit>()>";
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"->"(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>";
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"->"(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>";
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"->"(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>";
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(62)<sortpom.wrapper.content.ChildElementSorter: void emptyGroupIdIsFilledWithDefaultMavenGroupId()>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.util.function.BiFunction bootstrap$()>"
    "(62)<sortpom.wrapper.content.ChildElementSorter: void emptyGroupIdIsFilledWithDefaultMavenGroupId()>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.util.function.BiFunction bootstrap$()>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.Integer: void <clinit>()>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.Object: void <clinit>()>";
    "(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: java.util.function.Predicate bootstrap$()>"
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: java.util.function.Predicate bootstrap$()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: java.util.function.Function bootstrap$()>"
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: java.util.function.Function bootstrap$()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: java.util.function.Predicate bootstrap$()>"
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: java.util.function.Predicate bootstrap$()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.util.function.Function bootstrap$()>"
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.util.function.Function bootstrap$()>";
    "(57)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)>"
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"
    "(57)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)>"->"(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>";
    "(37)<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase lambda$new$1(org.jdom.Element)>"
    "(37)<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase lambda$new$1(org.jdom.Element)>"->"(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase valueOf(java.lang.String)>"
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "<java.util.Optional: void <clinit>()>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.Optional: void <clinit>()>";
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.util.function.Function bootstrap$(java.lang.Class)>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.util.function.Function bootstrap$(java.lang.Class)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: java.util.function.Predicate bootstrap$(java.lang.String)>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: java.util.function.Predicate bootstrap$(java.lang.String)>";
    "<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>";
    "<java.util.Optional: java.util.Optional empty()>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.Optional: java.util.Optional empty()>";
    "<java.util.Arrays: void <clinit>()>"
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.Arrays: void <clinit>()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(24)<sortpom.wrapper.content.ExclusionSortedWrapper: void <init>(org.jdom.Element,int)>"
    "(24)<sortpom.wrapper.content.ExclusionSortedWrapper: void <init>(org.jdom.Element,int)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(24)<sortpom.wrapper.content.ExclusionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.lang.Object: void <clinit>()>";
    "(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"
    "(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"<java.lang.Object: void <clinit>()>";
    "(115)<sortpom.wrapper.WrapperFactoryImpl: java.util.List castToChildElementList(org.jdom.Element)>"
    "(115)<sortpom.wrapper.WrapperFactoryImpl: java.util.List castToChildElementList(org.jdom.Element)>"->"<java.util.ArrayList: void <clinit>()>";
    "(115)<sortpom.wrapper.WrapperFactoryImpl: java.util.List castToChildElementList(org.jdom.Element)>"->"<java.lang.Object: void <clinit>()>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>";
    "(26)<sortpom.wrapper.ElementUtil: boolean isElementParentName(org.jdom.Element,java.lang.String)>"->"(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>";
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>";
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"<java.lang.Object: void <clinit>()>";
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>";
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.lang.Object: void <clinit>()>";
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>";
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Arrays: void fill(char[],char)>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.util.Arrays: void fill(char[],char)>";
    "<java.lang.String: void <clinit>()>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.String: void <clinit>()>";
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.Object: void <clinit>()>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"
    "<java.nio.charset.Charset: void <clinit>()>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.nio.charset.Charset: void <clinit>()>";
    "<java.util.Arrays: java.lang.String toString(byte[])>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.util.Arrays: java.lang.String toString(byte[])>";
    "<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.util.Arrays: void <clinit>()>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"->"(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"->"(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>";
    "(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>"
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(160)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setVerifyFail(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType valueOf(java.lang.String)>"
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType valueOf(java.lang.String)>"
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.util.function.Supplier bootstrap$(java.lang.String)>"
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.util.function.Supplier bootstrap$(java.lang.String)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: java.util.function.Predicate bootstrap$(java.lang.String)>"
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: java.util.function.Predicate bootstrap$(java.lang.String)>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.util.Arrays: void <clinit>()>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"<java.util.Arrays: void <clinit>()>";
    "<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>";
    "<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"<java.util.Arrays: java.util.List asList(java.lang.Object[])>";
    "<java.util.Collections: void <clinit>()>"
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"<java.util.Collections: void <clinit>()>";
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"<java.lang.Object: void <clinit>()>";
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"->"<java.lang.String: void <clinit>()>";
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"->"<java.lang.Object: void <clinit>()>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.lang.Object: void <clinit>()>";
    "<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.lang.String: void <clinit>()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"
    "<java.io.BufferedReader: void <clinit>()>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void <clinit>()>";
    "(48)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineSeparatorCharactersDiffer()>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"(48)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineSeparatorCharactersDiffer()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"(20)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult ordered()>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Object: void <clinit>()>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"
    "<java.io.File: void <clinit>()>"
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.io.File: void <clinit>()>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.lang.Object: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(103)<sortpom.SortPomImpl$1: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(11)<sortpom.parameter.VerifyFailType: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(103)<sortpom.SortPomImpl$1: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"(103)<sortpom.SortPomImpl$1: void <clinit>()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.lang.Object: void <clinit>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(103)<sortpom.SortPomImpl$1: void <clinit>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: void <clinit>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: void <clinit>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.String: void <clinit>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.Object: void <clinit>()>";
    "(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>"
    "(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>"->"<java.util.ArrayList: void <clinit>()>";
    "(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>"->"<java.lang.Object: void <clinit>()>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.Integer: void <clinit>()>";
    "<java.lang.AbstractStringBuilder: void <clinit>()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "<java.lang.StringBuffer: void <clinit>()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "<java.lang.Integer: int parseInt(java.lang.String)>"
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.Integer: int parseInt(java.lang.String)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.Integer: void <clinit>()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.AbstractStringBuilder: void <clinit>()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: void <clinit>()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.Object: void <clinit>()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType valueOf(java.lang.String)>"
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType valueOf(java.lang.String)>"->"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>";
    "(21)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>"
    "(21)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(21)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>"->"<java.lang.Object: void <clinit>()>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>";
    "<java.util.regex.Pattern: void <clinit>()>"
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.util.regex.Pattern: void <clinit>()>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.Object: void <clinit>()>";
    "(21)<sortpom.processinstruction.SortpomPiScanner: void <init>(sortpom.logger.SortPomLogger)>"
    "(21)<sortpom.processinstruction.SortpomPiScanner: void <init>(sortpom.logger.SortPomLogger)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(21)<sortpom.processinstruction.SortpomPiScanner: void <init>(sortpom.logger.SortPomLogger)>"->"<java.lang.Object: void <clinit>()>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(13)<sortpom.processinstruction.InstructionType: void <clinit>()>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(61)<sortpom.XmlOutputGenerator: org.jdom.output.Format createPrettyFormat()>"
    "<org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>"
    "(61)<sortpom.XmlOutputGenerator: org.jdom.output.Format createPrettyFormat()>"->"<org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>";
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"
    "<java.nio.file.LinkOption: void <clinit>()>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.nio.file.LinkOption: void <clinit>()>";
    "<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>";
    "<java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>";
    "<java.nio.file.Files: void <clinit>()>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.nio.file.Files: void <clinit>()>";
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.lang.Object: void <clinit>()>";
    "(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.Object: void <clinit>()>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.String: void <clinit>()>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"<java.lang.Integer: void <clinit>()>";
    "(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"<java.lang.Integer: java.lang.Integer valueOf(int)>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"<java.lang.Integer: void <clinit>()>";
    "(23)<sortpom.util.UrlWrapper: boolean isUrl()>"
    "<java.net.URL: void <clinit>()>"
    "(23)<sortpom.util.UrlWrapper: boolean isUrl()>"->"<java.net.URL: void <clinit>()>";
    "(23)<sortpom.util.UrlWrapper: boolean isUrl()>"->"<java.lang.Object: void <clinit>()>";
    "(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>"
    "(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>"->"<java.net.URL: void <clinit>()>";
    "(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>"->"<java.lang.Object: void <clinit>()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.io.File: void <clinit>()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.lang.Object: void <clinit>()>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.nio.file.Files: void <clinit>()>";
    "<java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>"
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.lang.Object: void <clinit>()>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.nio.file.Files: void <clinit>()>";
    "<java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>"
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.lang.Object: void <clinit>()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"
    "<java.io.FileInputStream: void <clinit>()>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void <clinit>()>";
    "<org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.Object: void <clinit>()>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.io.File: void <clinit>()>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.nio.file.Files: void <clinit>()>";
    "<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>"
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>";
    "<java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>"
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"
    "<java.nio.charset.StandardCharsets: void <clinit>()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.nio.charset.StandardCharsets: void <clinit>()>";
    "<org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream,java.nio.charset.Charset)>";
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: sortpom.util.CheckedSupplier bootstrap$(sortpom.util.FileUtil)>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: sortpom.util.CheckedSupplier bootstrap$(sortpom.util.FileUtil)>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.Object: void <clinit>()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.FileInputStream: void <clinit>()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.String: void <clinit>()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.File: void <clinit>()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.Object: void <clinit>()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.Object: void <clinit>()>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.util.Optional: void <clinit>()>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: java.util.function.Supplier bootstrap$(java.lang.String)>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: java.util.function.Supplier bootstrap$(java.lang.String)>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.util.function.Function bootstrap$(java.lang.String)>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.util.function.Function bootstrap$(java.lang.String)>";
    "<sortpom.util.FileUtil$getClassLoader__19: java.util.function.Function bootstrap$()>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<sortpom.util.FileUtil$getClassLoader__19: java.util.function.Function bootstrap$()>";
    "<java.util.Optional: java.util.Optional of(java.lang.Object)>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.util.Optional: java.util.Optional of(java.lang.Object)>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.Object: void <clinit>()>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.String: void <clinit>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.lang.Object apply(java.lang.Object)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.lang.Object apply(java.lang.Object)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.lang.Object apply(java.lang.Object)>"->"(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.lang.Object apply(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: boolean test(java.lang.Object)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: boolean test(java.lang.Object)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(43)<sortpom.wrapper.content.ChildElementSorter: boolean lambda$compareTo$4(java.lang.Integer)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: boolean test(java.lang.Object)>"->"(43)<sortpom.wrapper.content.ChildElementSorter: boolean lambda$compareTo$4(java.lang.Integer)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: boolean test(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.lang.Object apply(java.lang.Object,java.lang.Object)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.lang.Object apply(java.lang.Object,java.lang.Object)>"->"(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>";
    "(62)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$emptyGroupIdIsFilledWithDefaultMavenGroupId$5(java.lang.String,java.lang.String)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.lang.Object apply(java.lang.Object,java.lang.Object)>"->"(62)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$emptyGroupIdIsFilledWithDefaultMavenGroupId$5(java.lang.String,java.lang.String)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.lang.Object apply(java.lang.Object,java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: boolean test(java.lang.Object)>"
    "(35)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$0(org.jdom.Element)>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: boolean test(java.lang.Object)>"->"(35)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$0(org.jdom.Element)>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.lang.Object apply(java.lang.Object)>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.lang.Object apply(java.lang.Object)>"->"(37)<sortpom.wrapper.content.ExecutionSortedWrapper: sortpom.wrapper.content.Phase lambda$new$1(org.jdom.Element)>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: boolean test(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$2(org.jdom.Element)>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: boolean test(java.lang.Object)>"->"(41)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$2(org.jdom.Element)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: boolean test(java.lang.Object)>"
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: boolean test(java.lang.Object)>"->"(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>";
    "(102)<sortpom.wrapper.content.Phase$StandardPhase: boolean lambda$getPhase$0(java.lang.String,sortpom.wrapper.content.Phase$StandardPhase)>"
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: boolean test(java.lang.Object)>"->"(102)<sortpom.wrapper.content.Phase$StandardPhase: boolean lambda$getPhase$0(java.lang.String,sortpom.wrapper.content.Phase$StandardPhase)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: boolean test(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: boolean test(java.lang.Object)>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: boolean test(java.lang.Object)>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(16)<sortpom.parameter.VerifyFailOnType: boolean lambda$fromString$0(java.lang.String,sortpom.parameter.VerifyFailOnType)>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: boolean test(java.lang.Object)>"->"(16)<sortpom.parameter.VerifyFailOnType: boolean lambda$fromString$0(java.lang.String,sortpom.parameter.VerifyFailOnType)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: boolean test(java.lang.Object)>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.lang.Object get()>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.lang.Object get()>"->"(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.lang.Object get()>"->"(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.lang.Object get()>"->"<java.lang.Object: void <clinit>()>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.lang.Object apply(java.lang.Object)>"
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.lang.Object apply(java.lang.Object)>"->"(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: java.lang.Object get()>"
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: java.lang.Object get()>"->"(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>";
    "(16)<sortpom.verify.ElementComparator: void <init>(org.jdom.Element,org.jdom.Element)>"
    "<java.lang.Object: void <init>()>"
    "(16)<sortpom.verify.ElementComparator: void <init>(org.jdom.Element,org.jdom.Element)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.String: boolean equals(java.lang.Object)>"
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(33)<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>"
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"->"(33)<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>";
    "(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>"->"(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>";
    "<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>"
    "(33)<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>"->"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
    "(33)<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>"->"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
    "(33)<sortpom.verify.ElementComparator: boolean isEqualsIgnoringWhitespace()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<sun.security.jca.ProviderList$ServiceList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "<java.util.Collections$EmptyList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "<sun.security.jca.ProviderList$3: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "<java.util.Collections$CopiesList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "<java.util.ImmutableCollections$SubList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "<java.util.Vector: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "<java.util.Collections$SynchronizedCollection: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "<java.util.Arrays$ArrayList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "<java.util.ArrayList$SubList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "<java.util.ImmutableCollections$ListN: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "<java.util.LinkedList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "<java.util.Collections$UnmodifiableCollection: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "<java.util.AbstractList$SubList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "<java.util.ImmutableCollections$List12: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "<java.util.ArrayList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "<java.util.Collections$CheckedCollection: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "<java.util.Collections$SingletonList: int size()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "<java.util.Vector: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "<java.util.Collections$EmptyList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "<java.util.AbstractSequentialList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$3: java.security.Provider get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "<java.util.ArrayList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "<java.util.ImmutableCollections$List12: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "<java.util.Collections$SingletonList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "<java.util.LinkedList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "<java.util.AbstractList$SubList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "<java.util.ArrayList$SubList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "<java.util.Collections$CopiesList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "<java.util.Arrays$ArrayList: java.lang.Object get(int)>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Vector: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"(16)<sortpom.verify.ElementComparator: void <init>(org.jdom.Element,org.jdom.Element)>";
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>";
    "(53)<sortpom.util.XmlOrderedResult: boolean isOrdered()>"
    "(37)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isChildrenOrdered(java.lang.String,java.util.List,java.util.List)>"->"(53)<sortpom.util.XmlOrderedResult: boolean isOrdered()>";
    "(24)<sortpom.wrapper.ElementWrapperCreator: void <init>(sortpom.wrapper.ElementSortOrderMap)>"
    "(24)<sortpom.wrapper.ElementWrapperCreator: void <init>(sortpom.wrapper.ElementSortOrderMap)>"->"<java.lang.Object: void <init>()>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(70)<sortpom.wrapper.ElementWrapperCreator: boolean isDependencyElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(77)<sortpom.wrapper.ElementWrapperCreator: boolean isExclusionElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(94)<sortpom.wrapper.ElementWrapperCreator: boolean isModuleElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(101)<sortpom.wrapper.ElementWrapperCreator: boolean isExecutionElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(24)<sortpom.wrapper.content.DependencySortedWrapper: void <init>(org.jdom.Element,int)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(24)<sortpom.wrapper.content.ExclusionSortedWrapper: void <init>(org.jdom.Element,int)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(24)<sortpom.wrapper.content.PluginSortedWrapper: void <init>(org.jdom.Element,int)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(21)<sortpom.wrapper.content.ModuleSortedWrapper: void <init>(org.jdom.Element,int)>"
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(21)<sortpom.wrapper.content.ModuleSortedWrapper: void <init>(org.jdom.Element,int)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>";
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>";
    "(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>"
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(14)<sortpom.wrapper.content.AlphabeticalSortedWrapper: void <init>(org.jdom.Element)>"
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(14)<sortpom.wrapper.content.AlphabeticalSortedWrapper: void <init>(org.jdom.Element)>";
    "(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>"
    "(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>"->"(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"
    "(70)<sortpom.wrapper.ElementWrapperCreator: boolean isDependencyElement(org.jdom.Element)>"->"(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>";
    "(77)<sortpom.wrapper.ElementWrapperCreator: boolean isExclusionElement(org.jdom.Element)>"->"(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>";
    "(84)<sortpom.wrapper.ElementWrapperCreator: boolean isPluginElement(org.jdom.Element)>"->"(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>";
    "<java.lang.String: boolean startsWith(java.lang.String)>"
    "(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(108)<sortpom.wrapper.ElementWrapperCreator: boolean isPropertyElement(org.jdom.Element)>"->"<java.lang.String: boolean startsWith(java.lang.String)>";
    "(17)<sortpom.wrapper.operation.SortAttributesOperation: void <init>()>"
    "(17)<sortpom.wrapper.operation.SortAttributesOperation: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"
    "(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>"
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>"
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>"
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>"
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>";
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"(38)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>";
    "<java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>";
    "<java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>";
    "<java.lang.Iterable: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.lang.Iterable: void forEach(java.util.function.Consumer)>";
    "<java.util.ArrayList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.ArrayList: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>";
    "<java.util.Vector: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Vector: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$CheckedCollection: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$CheckedCollection: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$SynchronizedList: void sort(java.util.Comparator)>";
    "<java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>";
    "<java.util.Arrays$ArrayList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Arrays$ArrayList: void sort(java.util.Comparator)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void sort(java.util.Comparator)>";
    "<java.util.Collections$EmptyList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$EmptyList: void sort(java.util.Comparator)>";
    "<java.util.ImmutableCollections$AbstractImmutableList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.ImmutableCollections$AbstractImmutableList: void sort(java.util.Comparator)>";
    "<java.util.Collections$SingletonList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$SingletonList: void sort(java.util.Comparator)>";
    "<java.util.Vector: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Vector: void sort(java.util.Comparator)>";
    "<java.util.Collections$CheckedList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$CheckedList: void sort(java.util.Comparator)>";
    "<java.util.List: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.List: void sort(java.util.Comparator)>";
    "<java.util.ArrayList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.ArrayList: void sort(java.util.Comparator)>";
    "<java.util.Collections$UnmodifiableList: void sort(java.util.Comparator)>"
    "(28)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getSortedAttributes(org.jdom.Element)>"->"<java.util.Collections$UnmodifiableList: void sort(java.util.Comparator)>";
    "<java.util.ArrayList: void <init>(java.util.Collection)>"
    "(38)<sortpom.wrapper.operation.SortAttributesOperation: java.util.List getAttributeList(org.jdom.Element)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(18)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>()>"
    "(18)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(22)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>(org.jdom.Element)>"
    "(22)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>(org.jdom.Element)>"->"<java.lang.Object: void <init>()>";
    "(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"
    "(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>"
    "(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(47)<sortpom.wrapper.operation.GetContentStructureOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"
    "(47)<sortpom.wrapper.operation.GetContentStructureOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"->"(22)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>(org.jdom.Element)>";
    "(23)<sortpom.wrapper.operation.ToStringOperation: void <init>()>"
    "(23)<sortpom.wrapper.operation.ToStringOperation: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.lang.StringBuilder: void <init>()>"
    "(23)<sortpom.wrapper.operation.ToStringOperation: void <init>()>"->"<java.lang.StringBuilder: void <init>()>";
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.String toString()>"
    "(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: java.lang.String substring(int)>"
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"->"<java.lang.String: java.lang.String substring(int)>";
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>";
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>"
    "(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
    "(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"
    "<java.util.AbstractCollection: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.AbstractCollection: boolean isEmpty()>";
    "<java.util.ArrayList: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<java.util.Collections$SynchronizedCollection: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$SynchronizedCollection: boolean isEmpty()>";
    "<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>";
    "<sun.security.jca.ProviderList$ServiceList: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: boolean isEmpty()>";
    "<java.util.ImmutableCollections$ListN: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$ListN: boolean isEmpty()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean isEmpty()>";
    "<java.util.Collections$EmptyList: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$EmptyList: boolean isEmpty()>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>";
    "<java.util.Collections$CheckedCollection: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$CheckedCollection: boolean isEmpty()>";
    "<java.util.Vector: boolean isEmpty()>"
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Vector: boolean isEmpty()>";
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(68)<sortpom.wrapper.operation.ToStringOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"->"(28)<sortpom.wrapper.operation.ToStringOperation: void <init>(java.lang.StringBuilder,java.lang.String)>";
    "(74)<sortpom.wrapper.operation.ToStringOperation: void endOfProcess()>"
    "(74)<sortpom.wrapper.operation.ToStringOperation: void endOfProcess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
    "(74)<sortpom.wrapper.operation.ToStringOperation: void endOfProcess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(74)<sortpom.wrapper.operation.ToStringOperation: void endOfProcess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(79)<sortpom.wrapper.operation.ToStringOperation: java.lang.String toString()>"
    "(79)<sortpom.wrapper.operation.ToStringOperation: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.String: int length()>"
    "(18)<sortpom.wrapper.operation.ToStringOperation: void <clinit>()>"->"<java.lang.String: int length()>";
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"<java.lang.Object: void <init>()>";
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>";
    "<java.util.ArrayList: void <init>()>"
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void <init>()>";
    "(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void <init>()>";
    "(30)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isContentElement()>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"(30)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isContentElement()>";
    "(41)<sortpom.wrapper.content.UnsortedWrapper: boolean isContentElement()>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"(41)<sortpom.wrapper.content.UnsortedWrapper: boolean isContentElement()>";
    "(34)<sortpom.wrapper.content.Wrapper: boolean isContentElement()>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"(34)<sortpom.wrapper.content.Wrapper: boolean isContentElement()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "<java.util.ArrayList: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "<java.util.Vector: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "<java.util.LinkedList: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "<java.util.AbstractList: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
    "(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>";
    "<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "<java.util.AbstractList$SubList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList$SubList: java.util.Iterator iterator()>";
    "<java.util.Collections$SingletonList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$SingletonList: java.util.Iterator iterator()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>";
    "<java.lang.invoke.AbstractConstantGroup$AsList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.util.Iterator iterator()>";
    "<java.util.Vector: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Vector: java.util.Iterator iterator()>";
    "<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "<java.util.Arrays$ArrayList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Arrays$ArrayList: java.util.Iterator iterator()>";
    "<java.util.AbstractSequentialList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "<java.util.ImmutableCollections$SubList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$SubList: java.util.Iterator iterator()>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>";
    "<java.util.ImmutableCollections$AbstractImmutableList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$AbstractImmutableList: java.util.Iterator iterator()>";
    "<java.util.Collections$EmptyList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$EmptyList: java.util.Iterator iterator()>";
    "<java.util.AbstractList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList: java.util.Iterator iterator()>";
    "<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>";
    "<java.util.ArrayList$SubList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList$SubList: java.util.Iterator iterator()>";
    "<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>";
    "<java.util.ArrayList: java.util.Iterator iterator()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "<java.nio.charset.Charset$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.charset.Charset$1: boolean hasNext()>";
    "<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "<java.util.ArrayList$SubList$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList$SubList$1: boolean hasNext()>";
    "<java.util.Arrays$ArrayItr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "<java.lang.CharSequence$1CodePointIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.CharSequence$1CodePointIterator: boolean hasNext()>";
    "<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "<java.util.Collections$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$1: boolean hasNext()>";
    "<java.util.LinkedList$ListItr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedList$ListItr: boolean hasNext()>";
    "<sun.util.PreHashedMap$2$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "<java.util.ServiceLoader$ModuleServicesLookupIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: boolean hasNext()>";
    "<java.util.Spliterators$2Adapter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Spliterators$2Adapter: boolean hasNext()>";
    "<java.util.ServiceLoader$3: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$3: boolean hasNext()>";
    "<java.util.regex.Matcher$1MatchResultIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.regex.Matcher$1MatchResultIterator: boolean hasNext()>";
    "<java.util.Collections$EmptyIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "<java.util.AbstractList$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList$Itr: boolean hasNext()>";
    "<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "<java.util.HashMap$HashIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "<java.util.ArrayDeque$DeqIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "<java.util.AbstractList$SubList$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList$SubList$1: boolean hasNext()>";
    "<java.util.Spliterators$4Adapter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Spliterators$4Adapter: boolean hasNext()>";
    "<sun.text.normalizer.Trie2$Trie2Iterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: boolean hasNext()>";
    "<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "<java.util.ArrayList$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "<sun.util.PreHashedMap$1$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>";
    "<java.nio.file.Files$2: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.Files$2: boolean hasNext()>";
    "<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "<sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "<java.util.ServiceLoader$2: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$2: boolean hasNext()>";
    "<java.util.ServiceLoader$LazyClassPathLookupIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: boolean hasNext()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "<java.util.AbstractMap$2$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "<java.util.AbstractMap$1$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "<java.util.Enumeration$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Enumeration$1: boolean hasNext()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "<java.nio.file.Path$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.Path$1: boolean hasNext()>";
    "<java.lang.CharSequence$1CharIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.CharSequence$1CharIterator: boolean hasNext()>";
    "<java.util.zip.ZipFile$ZipEntryIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.zip.ZipFile$ZipEntryIterator: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableList$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableList$1: boolean hasNext()>";
    "<java.util.Collections$CheckedCollection$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "<sun.nio.cs.StandardCharsets$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.cs.StandardCharsets$1: boolean hasNext()>";
    "<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "<java.nio.file.FileTreeIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.FileTreeIterator: boolean hasNext()>";
    "<java.util.WeakHashMap$HashIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "<java.util.ServiceLoader$LayerLookupIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$LayerLookupIterator: boolean hasNext()>";
    "<java.util.Collections$CheckedList$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedList$1: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "<jdk.internal.module.ModuleBootstrap$2: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<jdk.internal.module.ModuleBootstrap$2: boolean hasNext()>";
    "<java.util.Vector$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "<java.util.ImmutableCollections$ListItr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "<java.util.Scanner: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Scanner: boolean hasNext()>";
    "<java.util.Spliterators$1Adapter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Spliterators$1Adapter: boolean hasNext()>";
    "<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "<java.util.ImmutableCollections$Set12$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "<java.util.Hashtable$Enumerator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "<java.io.BufferedReader$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.io.BufferedReader$1: boolean hasNext()>";
    "<java.util.regex.Pattern$1MatcherIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.regex.Pattern$1MatcherIterator: boolean hasNext()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "<java.net.URL$1: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.net.URL$1: boolean hasNext()>";
    "<java.util.Spliterators$3Adapter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Spliterators$3Adapter: boolean hasNext()>";
    "<java.util.LinkedList$DescendingIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedList$DescendingIterator: boolean hasNext()>";
    "<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "<java.util.EnumMap$EnumMapIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "<java.util.HashMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "<java.nio.file.Files$2: java.nio.file.Path next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.Files$2: java.nio.file.Path next()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>";
    "<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "<java.nio.charset.Charset$1: java.nio.charset.spi.CharsetProvider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.charset.Charset$1: java.nio.charset.spi.CharsetProvider next()>";
    "<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.EnumMap$KeyIterator: java.lang.Enum next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "<java.util.TreeMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "<java.util.TreeMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "<java.util.LinkedList$ListItr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedList$ListItr: java.lang.Object next()>";
    "<java.util.Vector$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>";
    "<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "<java.util.Hashtable$Enumerator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "<java.util.ServiceLoader$LazyClassPathLookupIterator: java.util.ServiceLoader$Provider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: java.util.ServiceLoader$Provider next()>";
    "<java.nio.file.Path$1: java.nio.file.Path next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.Path$1: java.nio.file.Path next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.Collections$CheckedCollection$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$LayerLookupIterator: java.util.ServiceLoader$Provider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$LayerLookupIterator: java.util.ServiceLoader$Provider next()>";
    "<sun.nio.cs.StandardCharsets$1: java.nio.charset.Charset next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.cs.StandardCharsets$1: java.nio.charset.Charset next()>";
    "<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "<java.util.AbstractList$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList$Itr: java.lang.Object next()>";
    "<java.util.Scanner: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Scanner: java.lang.String next()>";
    "<java.util.Collections$EmptyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "<sun.text.normalizer.Trie2$Trie2Iterator: sun.text.normalizer.Trie2$Range next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: sun.text.normalizer.Trie2$Range next()>";
    "<java.util.TreeMap$DescendingKeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$DescendingKeyIterator: java.lang.Object next()>";
    "<jdk.internal.module.ModuleBootstrap$2: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<jdk.internal.module.ModuleBootstrap$2: java.lang.Object next()>";
    "<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>";
    "<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "<java.util.regex.Pattern$1MatcherIterator: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.regex.Pattern$1MatcherIterator: java.lang.String next()>";
    "<java.util.HashMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.EnumMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "<java.util.LinkedList$DescendingIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedList$DescendingIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "<sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>";
    "<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "<java.util.Collections$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "<java.util.ServiceLoader$2: java.util.ServiceLoader$Provider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$2: java.util.ServiceLoader$Provider next()>";
    "<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "<sun.util.PreHashedMap$1$1: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "<java.util.AbstractList$SubList$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList$SubList$1: java.lang.Object next()>";
    "<java.util.Collections$CheckedList$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedList$1: java.lang.Object next()>";
    "<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>";
    "<java.util.ServiceLoader$3: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$3: java.lang.Object next()>";
    "<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "<java.io.BufferedReader$1: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.io.BufferedReader$1: java.lang.String next()>";
    "<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "<java.util.ImmutableCollections$ListItr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "<java.util.Spliterators$1Adapter: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Spliterators$1Adapter: java.lang.Object next()>";
    "<java.util.ArrayList$Itr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>";
    "<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "<java.util.AbstractMap$2$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "<java.nio.file.FileTreeIterator: java.nio.file.FileTreeWalker$Event next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.nio.file.FileTreeIterator: java.nio.file.FileTreeWalker$Event next()>";
    "<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "<java.util.ArrayList$SubList$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList$SubList$1: java.lang.Object next()>";
    "<java.net.URL$1: java.net.spi.URLStreamHandlerProvider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.net.URL$1: java.net.spi.URLStreamHandlerProvider next()>";
    "<java.util.AbstractMap$1$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>";
    "<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.Enumeration$1: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Enumeration$1: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "<java.util.ArrayDeque$DescendingIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayDeque$DescendingIterator: java.lang.Object next()>";
    "<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "<java.util.Arrays$ArrayItr: java.lang.Object next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "<java.util.ServiceLoader$ModuleServicesLookupIterator: java.util.ServiceLoader$Provider next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: java.util.ServiceLoader$Provider next()>";
    "<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "<java.util.regex.Matcher$1MatchResultIterator: java.util.regex.MatchResult next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.regex.Matcher$1MatchResultIterator: java.util.regex.MatchResult next()>";
    "<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(27)<sortpom.wrapper.operation.HierarchyWrapper: void addContent(sortpom.wrapper.content.Wrapper)>";
    "(62)<sortpom.wrapper.operation.HierarchyWrapper: boolean containsElement()>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(62)<sortpom.wrapper.operation.HierarchyWrapper: boolean containsElement()>";
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>";
    "(17)<sortpom.wrapper.operation.HierarchyRootWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"
    "(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(17)<sortpom.wrapper.operation.HierarchyRootWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(58)<sortpom.wrapper.operation.HierarchyWrapper: java.util.List castToContentList(sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(18)<sortpom.wrapper.operation.HierarchyWrapperOperation: void startOfProcess()>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(18)<sortpom.wrapper.operation.HierarchyWrapperOperation: void startOfProcess()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(36)<sortpom.wrapper.operation.ToStringOperation: void startOfProcess()>";
    "<java.lang.Object: java.lang.Class getClass()>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(23)<sortpom.wrapper.operation.SortAttributesOperation: void processElement(sortpom.wrapper.content.Wrapper)>";
    "(29)<sortpom.wrapper.operation.HierarchyWrapperOperation: void processElement(sortpom.wrapper.content.Wrapper)>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(29)<sortpom.wrapper.operation.HierarchyWrapperOperation: void processElement(sortpom.wrapper.content.Wrapper)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(37)<sortpom.wrapper.operation.GetContentStructureOperation: void processElement(sortpom.wrapper.content.Wrapper)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(54)<sortpom.wrapper.operation.ToStringOperation: void processElement(sortpom.wrapper.content.Wrapper)>";
    "(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>";
    "(33)<sortpom.wrapper.operation.HierarchyWrapperOperation: void manipulateChildElements(java.util.List)>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(33)<sortpom.wrapper.operation.HierarchyWrapperOperation: void manipulateChildElements(java.util.List)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(60)<sortpom.wrapper.operation.ToStringOperation: void manipulateChildElements(java.util.List)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(47)<sortpom.wrapper.operation.GetContentStructureOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>";
    "(40)<sortpom.wrapper.operation.HierarchyWrapperOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(40)<sortpom.wrapper.operation.HierarchyWrapperOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(68)<sortpom.wrapper.operation.ToStringOperation: sortpom.wrapper.operation.HierarchyWrapperOperation createSubOperation()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(74)<sortpom.wrapper.operation.ToStringOperation: void endOfProcess()>";
    "(45)<sortpom.wrapper.operation.HierarchyWrapperOperation: void endOfProcess()>"
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(45)<sortpom.wrapper.operation.HierarchyWrapperOperation: void endOfProcess()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.Iterable: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Vector: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedCollection: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(30)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isContentElement()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(41)<sortpom.wrapper.content.UnsortedWrapper: boolean isContentElement()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(34)<sortpom.wrapper.content.Wrapper: boolean isContentElement()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList$SubList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$SingletonList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Vector: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Arrays$ArrayList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$SubList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$AbstractImmutableList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$EmptyList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList$SubList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.charset.Charset$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList$SubList$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.CharSequence$1CodePointIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedList$ListItr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Spliterators$2Adapter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$3: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.regex.Matcher$1MatchResultIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList$SubList$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Spliterators$4Adapter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.Files$2: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$2: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Enumeration$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.Path$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.CharSequence$1CharIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.zip.ZipFile$ZipEntryIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableList$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.cs.StandardCharsets$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.FileTreeIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$LayerLookupIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedList$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<jdk.internal.module.ModuleBootstrap$2: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Scanner: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Spliterators$1Adapter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.io.BufferedReader$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.regex.Pattern$1MatcherIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.net.URL$1: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Spliterators$3Adapter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedList$DescendingIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.Files$2: java.nio.file.Path next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.charset.Charset$1: java.nio.charset.spi.CharsetProvider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedList$ListItr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.Path$1: java.nio.file.Path next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$LayerLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.cs.StandardCharsets$1: java.nio.charset.Charset next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Scanner: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: sun.text.normalizer.Trie2$Range next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$DescendingKeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<jdk.internal.module.ModuleBootstrap$2: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.regex.Pattern$1MatcherIterator: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedList$DescendingIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$2: java.util.ServiceLoader$Provider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractList$SubList$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$CheckedList$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$3: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.io.BufferedReader$1: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Spliterators$1Adapter: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.nio.file.FileTreeIterator: java.nio.file.FileTreeWalker$Event next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayList$SubList$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.net.URL$1: java.net.spi.URLStreamHandlerProvider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Enumeration$1: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ArrayDeque$DescendingIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.util.regex.Matcher$1MatchResultIterator: java.util.regex.MatchResult next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"->"(23)<sortpom.wrapper.operation.ToStringOperation: void <init>()>";
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>"->"(79)<sortpom.wrapper.operation.ToStringOperation: java.lang.String toString()>";
    "(12)<sortpom.wrapper.operation.HierarchyRootWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"
    "(12)<sortpom.wrapper.operation.HierarchyRootWrapper: void <init>(sortpom.wrapper.content.Wrapper)>"->"(21)<sortpom.wrapper.operation.HierarchyWrapper: void <init>(sortpom.wrapper.content.Wrapper)>";
    "(17)<sortpom.wrapper.operation.HierarchyRootWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>"->"(37)<sortpom.wrapper.operation.HierarchyWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>";
    "(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>"->"(17)<sortpom.wrapper.operation.SortAttributesOperation: void <init>()>";
    "(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(27)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureElements()>"
    "(14)<sortpom.wrapper.operation.SortChildrenOperation: void <init>()>"
    "(27)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureElements()>"->"(14)<sortpom.wrapper.operation.SortChildrenOperation: void <init>()>";
    "(27)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureElements()>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(32)<sortpom.wrapper.operation.HierarchyRootWrapper: void connectXmlStructure()>"
    "(32)<sortpom.wrapper.operation.HierarchyRootWrapper: void connectXmlStructure()>"->"(18)<sortpom.wrapper.operation.GetContentStructureOperation: void <init>()>";
    "(32)<sortpom.wrapper.operation.HierarchyRootWrapper: void connectXmlStructure()>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(37)<sortpom.wrapper.operation.HierarchyRootWrapper: void detachStructure()>"
    "(14)<sortpom.wrapper.operation.DetachOperation: void <init>()>"
    "(37)<sortpom.wrapper.operation.HierarchyRootWrapper: void detachStructure()>"->"(14)<sortpom.wrapper.operation.DetachOperation: void <init>()>";
    "(37)<sortpom.wrapper.operation.HierarchyRootWrapper: void detachStructure()>"->"(73)<sortpom.wrapper.operation.HierarchyWrapper: void processOperation(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "(42)<sortpom.wrapper.operation.HierarchyRootWrapper: sortpom.wrapper.content.Wrapper getElementContent()>"
    "(67)<sortpom.wrapper.operation.HierarchyWrapper: sortpom.wrapper.content.Wrapper getElementContent()>"
    "(42)<sortpom.wrapper.operation.HierarchyRootWrapper: sortpom.wrapper.content.Wrapper getElementContent()>"->"(67)<sortpom.wrapper.operation.HierarchyWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(10)<sortpom.wrapper.operation.HierarchyRootWrapper: java.lang.String toString()>"
    "(10)<sortpom.wrapper.operation.HierarchyRootWrapper: java.lang.String toString()>"->"(100)<sortpom.wrapper.operation.HierarchyWrapper: java.lang.String toString()>";
    "(14)<sortpom.wrapper.operation.DetachOperation: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"
    "(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(24)<sortpom.wrapper.operation.DetachOperation: void processElement(sortpom.wrapper.content.Wrapper)>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(14)<sortpom.wrapper.operation.SortChildrenOperation: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$EmptyList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$CopiesList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Vector: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ArrayList$SubList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.LinkedList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.AbstractList$SubList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ArrayList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$SingletonList: int size()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(42)<sortpom.wrapper.operation.HierarchyRootWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(67)<sortpom.wrapper.operation.HierarchyWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(43)<sortpom.wrapper.content.Wrapper: boolean isSortable()>"
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(43)<sortpom.wrapper.content.Wrapper: boolean isSortable()>";
    "(47)<sortpom.wrapper.content.UnsortedWrapper: boolean isSortable()>"
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(47)<sortpom.wrapper.content.UnsortedWrapper: boolean isSortable()>";
    "(35)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isSortable()>"
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(35)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isSortable()>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"
    "(19)<sortpom.wrapper.operation.SortChildrenOperation: void manipulateChildElements(java.util.List)>"->"(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "<java.util.Collections$CheckedList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$CheckedList: java.lang.Object remove(int)>";
    "<java.util.AbstractSequentialList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractSequentialList: java.lang.Object remove(int)>";
    "<java.util.AbstractList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList: java.lang.Object remove(int)>";
    "<java.util.ArrayList$SubList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList$SubList: java.lang.Object remove(int)>";
    "<java.util.ImmutableCollections$AbstractImmutableList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$AbstractImmutableList: java.lang.Object remove(int)>";
    "<java.util.AbstractList$SubList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList$SubList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>";
    "<java.util.Vector: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Vector: java.lang.Object remove(int)>";
    "<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object remove(int)>";
    "<java.util.ArrayList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: java.lang.Object remove(int)>";
    "<java.util.LinkedList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.LinkedList: java.lang.Object remove(int)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object remove(int)>";
    "<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$SynchronizedList: java.lang.Object remove(int)>";
    "<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$SynchronizedList: void add(int,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$UnmodifiableList: void add(int,java.lang.Object)>";
    "<java.util.Collections$CheckedList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Collections$CheckedList: void add(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void add(int,java.lang.Object)>";
    "<java.util.ArrayList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList: void add(int,java.lang.Object)>";
    "<java.util.AbstractList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList: void add(int,java.lang.Object)>";
    "<java.util.LinkedList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.LinkedList: void add(int,java.lang.Object)>";
    "<java.util.ImmutableCollections$AbstractImmutableList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ImmutableCollections$AbstractImmutableList: void add(int,java.lang.Object)>";
    "<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>";
    "<java.util.AbstractList$SubList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractList$SubList: void add(int,java.lang.Object)>";
    "<java.util.Vector: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.Vector: void add(int,java.lang.Object)>";
    "<java.util.AbstractSequentialList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.AbstractSequentialList: void add(int,java.lang.Object)>";
    "<java.util.ArrayList$SubList: void add(int,java.lang.Object)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"<java.util.ArrayList$SubList: void add(int,java.lang.Object)>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(42)<sortpom.wrapper.operation.HierarchyRootWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(67)<sortpom.wrapper.operation.HierarchyWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(25)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(25)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(25)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(25)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(50)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(50)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(28)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(28)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(35)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(35)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(35)<sortpom.wrapper.content.UnsortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(35)<sortpom.wrapper.content.UnsortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(35)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(35)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(36)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(36)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"
    "(31)<sortpom.wrapper.operation.SortChildrenOperation: void insertChildInSortedOrder(java.util.List,int,sortpom.wrapper.operation.HierarchyWrapper,sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(15)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <init>()>"
    "(15)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(20)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Text getContent()>"
    "<java.lang.UnsupportedOperationException: void <init>()>"
    "(20)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Text getContent()>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(25)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(30)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isContentElement()>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(35)<sortpom.wrapper.content.SingleNewlineInTextWrapper: boolean isSortable()>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>"->"(20)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Text getContent()>";
    "(13)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <clinit>()>"->"(15)<sortpom.wrapper.content.SingleNewlineInTextWrapper: void <init>()>";
    "(108)<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String getText()>"
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"(108)<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String getText()>";
    "(48)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String getText()>"
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"(48)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String getText()>";
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"(108)<sortpom.wrapper.content.Phase$StandardPhase: java.lang.String getText()>";
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"(48)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String getText()>";
    "<java.lang.String: int compareTo(java.lang.String)>"
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "<java.lang.Enum: int compareTo(java.lang.Enum)>"
    "(11)<sortpom.wrapper.content.Phase: int compareTo(sortpom.wrapper.content.Phase,sortpom.wrapper.content.Phase)>"->"<java.lang.Enum: int compareTo(java.lang.Enum)>";
    "(42)<sortpom.wrapper.content.Phase$NonStandardPhase: void <init>(java.lang.String)>"
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"->"(42)<sortpom.wrapper.content.Phase$NonStandardPhase: void <init>(java.lang.String)>";
    "<java.util.Optional: java.lang.Object orElse(java.lang.Object)>"
    "(35)<sortpom.wrapper.content.Phase: sortpom.wrapper.content.Phase getPhase(java.lang.String)>"->"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>";
    "(21)<sortpom.wrapper.content.ModuleSortedWrapper: void <init>(org.jdom.Element,int)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(39)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBeforeAlphabeticalTextSortedWrapper(sortpom.wrapper.content.ModuleSortedWrapper)>"
    "(28)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(39)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBeforeAlphabeticalTextSortedWrapper(sortpom.wrapper.content.ModuleSortedWrapper)>";
    "(28)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(39)<sortpom.wrapper.content.ModuleSortedWrapper: boolean isBeforeAlphabeticalTextSortedWrapper(sortpom.wrapper.content.ModuleSortedWrapper)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>"
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
    "(35)<sortpom.wrapper.content.UnsortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>";
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(24)<sortpom.wrapper.content.DependencySortedWrapper: void <init>(org.jdom.Element,int)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(29)<sortpom.wrapper.content.DependencySortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>";
    "(46)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBeforeDependencySortedWrapper(sortpom.wrapper.content.DependencySortedWrapper)>"
    "(35)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(46)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBeforeDependencySortedWrapper(sortpom.wrapper.content.DependencySortedWrapper)>";
    "(35)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(46)<sortpom.wrapper.content.DependencySortedWrapper: boolean isBeforeDependencySortedWrapper(sortpom.wrapper.content.DependencySortedWrapper)>"->"(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>";
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.lang.Object: void <init>()>";
    "(35)<sortpom.wrapper.content.SortedWrapper: boolean isBeforeSortedWrapper(sortpom.wrapper.content.SortedWrapper)>"
    "(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(35)<sortpom.wrapper.content.SortedWrapper: boolean isBeforeSortedWrapper(sortpom.wrapper.content.SortedWrapper)>";
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(24)<sortpom.wrapper.content.PluginSortedWrapper: void <init>(org.jdom.Element,int)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>";
    "(29)<sortpom.wrapper.content.PluginSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(62)<sortpom.wrapper.content.ChildElementSorter: void emptyGroupIdIsFilledWithDefaultMavenGroupId()>";
    "(47)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBeforePluginSortedWrapper(sortpom.wrapper.content.PluginSortedWrapper)>"
    "(36)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(47)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBeforePluginSortedWrapper(sortpom.wrapper.content.PluginSortedWrapper)>";
    "(36)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(47)<sortpom.wrapper.content.PluginSortedWrapper: boolean isBeforePluginSortedWrapper(sortpom.wrapper.content.PluginSortedWrapper)>"->"(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>";
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.util.Locale: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "<java.security.SignatureSpi: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "<java.util.JumboEnumSet: java.util.EnumSet clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "<java.util.ArrayList: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "<sun.text.CompactByteArray: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "<java.text.DateFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "<sun.security.util.BitArray: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "<java.util.Calendar: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "<java.util.Vector: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "<java.util.Hashtable$Entry: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "<java.text.Format: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.Format: java.lang.Object clone()>";
    "<java.util.IdentityHashMap: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "<java.lang.Thread: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "<java.util.HashMap: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "<sun.net.ProgressSource: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "<sun.util.calendar.CalendarDate: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "<java.util.EnumSet: java.util.EnumSet clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "<java.text.RuleBasedCollator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "<java.text.NumberFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "<java.util.HashSet: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "<java.util.BitSet: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "<java.util.LinkedList: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "<java.text.MessageFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "<java.util.Properties: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Properties: java.lang.Object clone()>";
    "<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "<java.security.MessageDigestSpi: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "<java.text.DateFormatSymbols: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "<java.security.MessageDigest: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "<java.util.zip.ZipEntry: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "<java.text.BreakIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "<java.lang.Enum: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "<java.util.TreeMap: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "<java.util.Date: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "<java.util.Hashtable: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "<java.text.ChoiceFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "<java.util.jar.Manifest: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "<java.text.DecimalFormatSymbols: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "<java.text.StringCharacterIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "<java.util.jar.Attributes: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "<java.util.GregorianCalendar: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "<sun.text.IntHashtable: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "<java.text.Collator: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.Collator: java.lang.Object clone()>";
    "<java.util.AbstractMap: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "<java.text.DecimalFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "<sun.net.www.MimeEntry: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "<java.util.ArrayDeque: java.util.ArrayDeque clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "<java.security.Signature: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.Signature: java.lang.Object clone()>";
    "<java.text.SimpleDateFormat: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "<java.util.SimpleTimeZone: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "<java.text.DigitList: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "<java.security.Signature$Delegate: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "<java.util.TreeSet: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "<java.util.TimeZone: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "<java.net.HttpCookie: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "<java.lang.ref.Reference: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "<java.util.JapaneseImperialCalendar: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "<java.lang.Object: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "<java.util.EnumMap: java.util.EnumMap clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "<java.security.MessageDigest$Delegate: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "<sun.util.calendar.ZoneInfo: java.lang.Object clone()>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>"
    "<java.lang.Enum: void <init>(java.lang.String,int)>"
    "(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "<java.lang.String: boolean isEmpty()>"
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"<java.lang.String: boolean isEmpty()>";
    "<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "<java.lang.Enum: java.lang.String name()>"
    "(76)<sortpom.wrapper.content.ChildElementSorter$Scope: sortpom.wrapper.content.ChildElementSorter$Scope getScope(java.lang.String)>"->"<java.lang.Enum: java.lang.String name()>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(74)<sortpom.wrapper.content.ChildElementSorter$Scope: void <clinit>()>"->"(72)<sortpom.wrapper.content.ChildElementSorter$Scope: void <init>(java.lang.String,int)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.lang.Object: void <init>()>";
    "<java.util.LinkedHashMap: void <init>()>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.LinkedHashMap: void <init>()>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>";
    "<java.util.concurrent.LinkedBlockingQueue: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.LinkedBlockingQueue: void forEach(java.util.function.Consumer)>";
    "<java.util.LinkedHashMap$LinkedEntrySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.LinkedHashMap$LinkedEntrySet: void forEach(java.util.function.Consumer)>";
    "<java.util.ArrayDeque: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.ArrayDeque: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.ConcurrentHashMap$KeySetView: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.ConcurrentHashMap$KeySetView: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$CheckedCollection: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>";
    "<java.util.HashMap$KeySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.HashMap$KeySet: void forEach(java.util.function.Consumer)>";
    "<java.util.LinkedHashMap$LinkedKeySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.LinkedHashMap$LinkedKeySet: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Vector: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SetFromMap: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.LinkedBlockingDeque: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.LinkedBlockingDeque: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$AsLIFOQueue: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$AsLIFOQueue: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$EmptySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$EmptySet: void forEach(java.util.function.Consumer)>";
    "<java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.LinkedHashMap$LinkedValues: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.lang.Iterable: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.ArrayList: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.ArrayBlockingQueue: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.ArrayBlockingQueue: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.ConcurrentHashMap$EntrySetView: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.ConcurrentHashMap$EntrySetView: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$SingletonSet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SingletonSet: void forEach(java.util.function.Consumer)>";
    "<java.util.HashMap$EntrySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.HashMap$EntrySet: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>";
    "<java.util.concurrent.ConcurrentHashMap$ValuesView: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.ConcurrentHashMap$ValuesView: void forEach(java.util.function.Consumer)>";
    "<java.util.HashMap$Values: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.HashMap$Values: void forEach(java.util.function.Consumer)>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>"
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SingletonList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$SynchronizedCollection: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Arrays$ArrayList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.lang.Iterable: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.ArrayList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$UnmodifiableCollection: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$EmptyList: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Vector: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.Collections$CheckedCollection: void forEach(java.util.function.Consumer)>";
    "(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>"->"<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>";
    "(33)<sortpom.wrapper.content.ChildElementSorter: void <init>()>"
    "(33)<sortpom.wrapper.content.ChildElementSorter: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(33)<sortpom.wrapper.content.ChildElementSorter: void <init>()>"->"<java.util.LinkedHashMap: void <init>()>";
    "<java.util.LinkedHashMap: java.util.Set entrySet()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.LinkedHashMap: java.util.Set entrySet()>";
    "<java.util.Collections$CheckedCollection: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collections$CheckedCollection: java.util.stream.Stream stream()>";
    "<java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>";
    "<java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet: java.util.stream.Stream stream()>";
    "<java.util.Collection: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collection: java.util.stream.Stream stream()>";
    "<java.util.Collections$SetFromMap: java.util.stream.Stream stream()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Collections$SetFromMap: java.util.stream.Stream stream()>";
    "<java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>";
    "<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>";
    "<java.util.stream.ReferencePipeline: java.util.Optional findFirst()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.stream.ReferencePipeline: java.util.Optional findFirst()>";
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>";
    "<java.lang.Integer: int intValue()>"
    "(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Integer: int intValue()>";
    "(50)<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>"
    "(50)<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(50)<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>"->"(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>";
    "<java.lang.String: int compareToIgnoreCase(java.lang.String)>"
    "(50)<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>"->"<java.lang.String: int compareToIgnoreCase(java.lang.String)>";
    "(58)<sortpom.wrapper.content.ChildElementSorter: int compareScope(java.lang.String,java.lang.String)>"->"<java.lang.Enum: int compareTo(java.lang.Enum)>";
    "<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
    "(62)<sortpom.wrapper.content.ChildElementSorter: void emptyGroupIdIsFilledWithDefaultMavenGroupId()>"->"<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>";
    "<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
    "(62)<sortpom.wrapper.content.ChildElementSorter: void emptyGroupIdIsFilledWithDefaultMavenGroupId()>"->"<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>";
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.util.LinkedHashMap: java.util.Collection values()>"
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.util.LinkedHashMap: java.util.Collection values()>";
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(67)<sortpom.wrapper.content.ChildElementSorter: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(62)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$emptyGroupIdIsFilledWithDefaultMavenGroupId$5(java.lang.String,java.lang.String)>"->"<java.lang.String: boolean isEmpty()>";
    "(43)<sortpom.wrapper.content.ChildElementSorter: boolean lambda$compareTo$4(java.lang.Integer)>"->"<java.lang.Integer: int intValue()>";
    "<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>";
    "<java.util.KeyValueHolder: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.KeyValueHolder: java.lang.Object getKey()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>";
    "<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object getKey()>";
    "<java.util.HashMap$Node: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.HashMap$Node: java.lang.Object getKey()>";
    "<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>";
    "<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>";
    "<java.util.WeakHashMap$Entry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.WeakHashMap$Entry: java.lang.Object getKey()>";
    "<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>";
    "<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>";
    "<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>";
    "<java.util.TreeMap$Entry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>";
    "<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>";
    "<java.util.Hashtable$Entry: java.lang.Object getKey()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Hashtable$Entry: java.lang.Object getKey()>";
    "<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getValue()>";
    "<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>";
    "<java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Object getValue()>";
    "<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Value getValue()>";
    "<java.util.Hashtable$Entry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Hashtable$Entry: java.lang.Object getValue()>";
    "<java.util.TreeMap$Entry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.TreeMap$Entry: java.lang.Object getValue()>";
    "<java.text.AttributeEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.text.AttributeEntry: java.lang.Object getValue()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getValue()>";
    "<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object getValue()>";
    "<java.util.KeyValueHolder: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.KeyValueHolder: java.lang.Object getValue()>";
    "<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>";
    "<sun.util.PreHashedMap$2$1$1: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.Object getValue()>";
    "<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getValue()>";
    "<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getValue()>";
    "<java.util.HashMap$Node: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.HashMap$Node: java.lang.Object getValue()>";
    "<java.util.WeakHashMap$Entry: java.lang.Object getValue()>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.WeakHashMap$Entry: java.lang.Object getValue()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$2: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$2: java.lang.Object apply(java.lang.Object)>";
    "<sortpom.util.FileUtil$getClassLoader__19: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.util.FileUtil$getClassLoader__19: java.lang.Object apply(java.lang.Object)>";
    "<java.util.jar.JarFile$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.util.jar.JarFile$1: java.lang.Object apply(java.lang.Object)>";
    "<jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<jdk.internal.module.ModuleLoaderMap$Mapper: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.StringConcatFactory$MethodHandleStringBuilderStrategy$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.StringConcatFactory$MethodHandleStringBuilderStrategy$1: java.lang.Object apply(java.lang.Object)>";
    "<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<jdk.internal.logger.BootstrapLogger$RedirectedLoggers: java.lang.Object apply(java.lang.Object)>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$1: java.lang.Object apply(java.lang.Object)>";
    "<sortpom.wrapper.operation.SortAttributesOperation$getName__2: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.operation.SortAttributesOperation$getName__2: java.lang.Object apply(java.lang.Object)>";
    "<java.security.Permissions$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.security.Permissions$1: java.lang.Object apply(java.lang.Object)>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.MethodHandleImpl$Makers$2: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.MethodHandleImpl$Makers$2: java.lang.Object apply(java.lang.Object)>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.VarHandle$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.VarHandle$1: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$3: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy$3: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.ref.Cleaner$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.ref.Cleaner$1: java.lang.Object apply(java.lang.Object)>";
    "<jdk.internal.jimage.ImageReaderFactory$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<jdk.internal.jimage.ImageReaderFactory$1: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.MethodHandleImpl$Makers$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.MethodHandleImpl$Makers$1: java.lang.Object apply(java.lang.Object)>";
    "<jdk.internal.loader.BuiltinClassLoader$5: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<jdk.internal.loader.BuiltinClassLoader$5: java.lang.Object apply(java.lang.Object)>";
    "<java.lang.invoke.ClassSpecializer$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.lang.invoke.ClassSpecializer$1: java.lang.Object apply(java.lang.Object)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.lang.Object apply(java.lang.Object)>";
    "<java.security.SecureClassLoader$1: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<java.security.SecureClassLoader$1: java.lang.Object apply(java.lang.Object)>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: java.lang.Object apply(java.lang.Object)>"
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: java.lang.Object apply(java.lang.Object)>";
    "(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>"->"(50)<sortpom.wrapper.content.ChildElementSorter: int compareTexts(java.lang.String,java.lang.String,java.lang.String)>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.KeyValueHolder: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.HashMap$Node: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntry: java.lang.String getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.WeakHashMap$Entry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.text.AttributeEntry: java.text.AttributedCharacterIterator$Attribute getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.EnumMap$EntryIterator$Entry: java.lang.Enum getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<sun.util.PreHashedMap$2$1$1: java.lang.String getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.TreeMap$Entry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.IdentityHashMap$EntryIterator$Entry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.lang.ProcessEnvironment$StringEntrySet$2: java.lang.ProcessEnvironment$Variable getKey()>";
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.Hashtable$Entry: java.lang.Object getKey()>";
    "<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
    "(39)<sortpom.wrapper.content.ChildElementSorter: java.lang.String lambda$compareTo$2(sortpom.wrapper.content.ChildElementSorter,java.util.Map$Entry)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "(30)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$1(org.jdom.Element)>"
    "<java.lang.String: java.lang.String toUpperCase()>"
    "(30)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$1(org.jdom.Element)>"->"<java.lang.String: java.lang.String toUpperCase()>";
    "<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
    "(30)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$1(org.jdom.Element)>"->"<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>";
    "<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
    "(30)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$1(org.jdom.Element)>"->"<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>";
    "(27)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$0(java.lang.String)>"
    "(27)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$0(java.lang.String)>"->"<java.lang.String: java.lang.String toUpperCase()>";
    "<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(27)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$0(java.lang.String)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(17)<sortpom.wrapper.content.ChildElementSorter: void <clinit>()>"->"(33)<sortpom.wrapper.content.ChildElementSorter: void <init>()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(40)<sortpom.wrapper.content.SingleNewlineInTextWrapper: java.lang.String toString()>"
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(40)<sortpom.wrapper.content.SingleNewlineInTextWrapper: java.lang.String toString()>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(52)<sortpom.wrapper.content.PluginSortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(52)<sortpom.wrapper.content.UnsortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(44)<sortpom.wrapper.content.ModuleSortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(40)<sortpom.wrapper.content.SortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"(51)<sortpom.wrapper.content.DependencySortedWrapper: java.lang.String toString()>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(53)<sortpom.wrapper.content.Wrapper: java.lang.String toString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$CheckedCollection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>";
    "<java.util.Collections$CopiesList: java.util.stream.Stream stream()>"
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$CopiesList: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$CheckedCollection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$SynchronizedCollection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collections$CopiesList: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Collection: java.util.stream.Stream stream()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.Optional findFirst()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.stream.ReferencePipeline: java.util.Optional findFirst()>";
    "(30)<sortpom.wrapper.content.ExecutionSortedWrapper: void <init>(org.jdom.Element,int)>"->"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>";
    "(50)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(57)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)>";
    "(50)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(57)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean isBeforeWrapper(sortpom.wrapper.content.ExecutionSortedWrapper)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(66)<sortpom.wrapper.content.ExecutionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(41)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$2(org.jdom.Element)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(35)<sortpom.wrapper.content.ExecutionSortedWrapper: boolean lambda$new$0(org.jdom.Element)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.Format: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(59)<sortpom.wrapper.content.Phase$StandardPhase: sortpom.wrapper.content.Phase$StandardPhase[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>"
    "(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.lang.String: boolean isEmpty()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream map(java.util.function.Function)>";
    "(98)<sortpom.wrapper.content.Phase$StandardPhase: java.util.Optional getPhase(java.lang.String)>"->"<java.util.stream.ReferencePipeline: java.util.Optional findFirst()>";
    "(102)<sortpom.wrapper.content.Phase$StandardPhase: boolean lambda$getPhase$0(java.lang.String,sortpom.wrapper.content.Phase$StandardPhase)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(61)<sortpom.wrapper.content.Phase$StandardPhase: void <clinit>()>"->"(91)<sortpom.wrapper.content.Phase$StandardPhase: void <init>(java.lang.String,int,java.lang.String)>";
    "(42)<sortpom.wrapper.content.Phase$NonStandardPhase: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.String: java.lang.String toLowerCase()>"
    "(42)<sortpom.wrapper.content.Phase$NonStandardPhase: void <init>(java.lang.String)>"->"<java.lang.String: java.lang.String toLowerCase()>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(53)<sortpom.wrapper.content.Phase$NonStandardPhase: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(14)<sortpom.wrapper.content.AlphabeticalSortedWrapper: void <init>(org.jdom.Element)>"->"<java.lang.Object: void <init>()>";
    "(30)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBeforeAlphabeticalSortedWrapper(sortpom.wrapper.content.AlphabeticalSortedWrapper)>"
    "(25)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(30)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBeforeAlphabeticalSortedWrapper(sortpom.wrapper.content.AlphabeticalSortedWrapper)>";
    "(20)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Element getContent()>"
    "(30)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBeforeAlphabeticalSortedWrapper(sortpom.wrapper.content.AlphabeticalSortedWrapper)>"->"(20)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Element getContent()>";
    "(30)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBeforeAlphabeticalSortedWrapper(sortpom.wrapper.content.AlphabeticalSortedWrapper)>"->"(20)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Element getContent()>";
    "(30)<sortpom.wrapper.content.AlphabeticalSortedWrapper: boolean isBeforeAlphabeticalSortedWrapper(sortpom.wrapper.content.AlphabeticalSortedWrapper)>"->"<java.lang.String: int compareTo(java.lang.String)>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(35)<sortpom.wrapper.content.AlphabeticalSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>"->"(20)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Element getContent()>";
    "(24)<sortpom.wrapper.content.ExclusionSortedWrapper: void <init>(org.jdom.Element,int)>"->"(19)<sortpom.wrapper.content.SortedWrapper: void <init>(org.jdom.Element,int)>";
    "(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(26)<sortpom.wrapper.content.SortedWrapper: org.jdom.Element getContent()>";
    "(29)<sortpom.wrapper.content.ExclusionSortedWrapper: void setSortOrder(sortpom.parameter.DependencySortOrder)>"->"(23)<sortpom.wrapper.content.ChildElementSorter: void <init>(sortpom.parameter.DependencySortOrder,java.util.List)>";
    "(46)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBeforeExclusionSortedWrapper(sortpom.wrapper.content.ExclusionSortedWrapper)>"
    "(35)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(46)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBeforeExclusionSortedWrapper(sortpom.wrapper.content.ExclusionSortedWrapper)>";
    "(35)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>"->"(31)<sortpom.wrapper.content.SortedWrapper: boolean isBefore(sortpom.wrapper.content.Wrapper)>";
    "(46)<sortpom.wrapper.content.ExclusionSortedWrapper: boolean isBeforeExclusionSortedWrapper(sortpom.wrapper.content.ExclusionSortedWrapper)>"->"(37)<sortpom.wrapper.content.ChildElementSorter: boolean compareTo(sortpom.wrapper.content.ChildElementSorter)>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(51)<sortpom.wrapper.content.ExclusionSortedWrapper: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>"
    "(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>"->"<java.lang.Object: void <init>()>";
    "(14)<sortpom.wrapper.ElementSortOrderMap: void <init>()>"
    "(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>"->"(14)<sortpom.wrapper.ElementSortOrderMap: void <init>()>";
    "(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>"->"(24)<sortpom.wrapper.ElementWrapperCreator: void <init>(sortpom.wrapper.ElementSortOrderMap)>";
    "(15)<sortpom.wrapper.TextWrapperCreator: void <init>()>"
    "(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>"->"(15)<sortpom.wrapper.TextWrapperCreator: void <init>()>";
    "(50)<sortpom.wrapper.WrapperFactoryImpl: void setup(sortpom.parameter.PluginParameters)>"
    "(29)<sortpom.wrapper.ElementWrapperCreator: void setup(sortpom.parameter.PluginParameters)>"
    "(50)<sortpom.wrapper.WrapperFactoryImpl: void setup(sortpom.parameter.PluginParameters)>"->"(29)<sortpom.wrapper.ElementWrapperCreator: void setup(sortpom.parameter.PluginParameters)>";
    "(19)<sortpom.wrapper.TextWrapperCreator: void setup(sortpom.parameter.PluginParameters)>"
    "(50)<sortpom.wrapper.WrapperFactoryImpl: void setup(sortpom.parameter.PluginParameters)>"->"(19)<sortpom.wrapper.TextWrapperCreator: void setup(sortpom.parameter.PluginParameters)>";
    "(56)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.operation.HierarchyRootWrapper createFromRootElement(org.jdom.Element)>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"
    "(56)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.operation.HierarchyRootWrapper createFromRootElement(org.jdom.Element)>"->"(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>";
    "(56)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.operation.HierarchyRootWrapper createFromRootElement(org.jdom.Element)>"->"(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>";
    "(56)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.operation.HierarchyRootWrapper createFromRootElement(org.jdom.Element)>"->"(12)<sortpom.wrapper.operation.HierarchyRootWrapper: void <init>(sortpom.wrapper.content.Wrapper)>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>";
    "<org.jdom.Document: org.jdom.Element getRootElement()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<org.jdom.Document: org.jdom.Element getRootElement()>";
    "<java.util.IllegalFormatWidthException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.IllegalFormatWidthException: java.lang.String getMessage()>";
    "<sun.nio.fs.UnixException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<sun.nio.fs.UnixException: java.lang.String getMessage()>";
    "<java.lang.Throwable: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.FormatFlagsConversionMismatchException: java.lang.String getMessage()>";
    "<java.util.MissingFormatArgumentException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.MissingFormatArgumentException: java.lang.String getMessage()>";
    "<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.regex.PatternSyntaxException: java.lang.String getMessage()>";
    "<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>";
    "<java.util.UnknownFormatConversionException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.UnknownFormatConversionException: java.lang.String getMessage()>";
    "<java.nio.charset.MalformedInputException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.nio.charset.MalformedInputException: java.lang.String getMessage()>";
    "<java.util.IllegalFormatConversionException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.IllegalFormatConversionException: java.lang.String getMessage()>";
    "<jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<jdk.internal.org.xml.sax.SAXException: java.lang.String getMessage()>";
    "<java.nio.file.InvalidPathException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.nio.file.InvalidPathException: java.lang.String getMessage()>";
    "<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.UnknownFormatFlagsException: java.lang.String getMessage()>";
    "<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.DuplicateFormatFlagsException: java.lang.String getMessage()>";
    "<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.IllegalFormatFlagsException: java.lang.String getMessage()>";
    "<java.util.MissingFormatWidthException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.MissingFormatWidthException: java.lang.String getMessage()>";
    "<java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.IllegalFormatPrecisionException: java.lang.String getMessage()>";
    "<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.util.IllegalFormatCodePointException: java.lang.String getMessage()>";
    "<java.nio.file.FileSystemException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.nio.file.FileSystemException: java.lang.String getMessage()>";
    "<java.io.InvalidClassException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.io.InvalidClassException: java.lang.String getMessage()>";
    "<java.net.URISyntaxException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.net.URISyntaxException: java.lang.String getMessage()>";
    "<java.io.WriteAbortedException: java.lang.String getMessage()>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"<java.io.WriteAbortedException: java.lang.String getMessage()>";
    "(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>"
    "(63)<sortpom.wrapper.WrapperFactoryImpl: void initializeSortOrderMap()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>";
    "<java.io.StringReader: void <init>(java.lang.String)>"
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.io.StringReader: void <init>(java.lang.String)>";
    "<org.jdom.input.SAXBuilder: void <init>()>"
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<org.jdom.input.SAXBuilder: void <init>()>";
    "<org.jdom.input.SAXBuilder: org.jdom.Document build(java.io.Reader)>"
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<org.jdom.input.SAXBuilder: org.jdom.Document build(java.io.Reader)>";
    "<java.io.StringReader: void close()>"
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.io.StringReader: void close()>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.io.StringReader: void close()>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.io.StringReader: void close()>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.io.StringReader: void close()>";
    "<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>"
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(72)<sortpom.wrapper.WrapperFactoryImpl: org.jdom.Document createDocumentFromDefaultSortOrderFile()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"(115)<sortpom.wrapper.WrapperFactoryImpl: java.util.List castToChildElementList(org.jdom.Element)>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$SynchronizedCollection: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList$SubList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$SingletonList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Vector: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableCollection: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Arrays$ArrayList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractSequentialList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$SubList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$AbstractImmutableList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$EmptyList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.security.jca.ProviderList$ServiceList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList$SubList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedCollection: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList: java.util.Iterator iterator()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.charset.Charset$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList$SubList$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Arrays$ArrayItr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringValues$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.CharSequence$1CodePointIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.security.jca.ProviderList$ServiceList$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedList$ListItr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.PreHashedMap$2$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Spliterators$2Adapter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$3: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.regex.Matcher$1MatchResultIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$EmptyIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.HashMap$HashIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayDeque$DeqIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList$SubList$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Spliterators$4Adapter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<javax.security.auth.Subject$SecureSet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.RegularEnumSet$EnumSetIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.PreHashedMap$1$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.net.www.MessageHeader$HeaderIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.Files$2: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedHashMap$LinkedHashIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentHashMap$BaseIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.net.www.HeaderParser$ParserIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableCollection$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$2: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractMap$2$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractMap$1$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Enumeration$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.Path$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.CharSequence$1CharIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.zip.ZipFile$ZipEntryIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableList$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedCollection$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.cs.StandardCharsets$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$PrivateEntryIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.FileTreeIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.WeakHashMap$HashIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$LayerLookupIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedList$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapIter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<jdk.internal.module.ModuleBootstrap$2: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Vector$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$ListItr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Scanner: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Spliterators$1Adapter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$Set12$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Hashtable$Enumerator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.io.BufferedReader$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.regex.Pattern$1MatcherIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.net.URL$1: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Spliterators$3Adapter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedList$DescendingIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$Iter: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.EnumMap$EnumMapIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.JumboEnumSet$EnumSetIterator: boolean hasNext()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.HashMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.Files$2: java.nio.file.Path next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedMap$CheckedEntrySet$1: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$SetN$SetNIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.security.jca.ProviderList$ServiceList$1: java.security.Provider$Service next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.fs.UnixFileSystem$FileStoreIterator: java.nio.file.FileStore next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.WeakHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.IdentityHashMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.charset.Charset$1: java.nio.charset.spi.CharsetProvider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.IdentityHashMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.EnumMap$KeyIterator: java.lang.Enum next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.LinkedBlockingDeque$AbstractItr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedList$ListItr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Vector$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<javax.security.auth.Subject$SecureSet$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Hashtable$Enumerator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$LazyClassPathLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.Path$1: java.nio.file.Path next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedCollection$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$LayerLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.cs.StandardCharsets$1: java.nio.charset.Charset next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedHashMap$LinkedEntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentLinkedQueue$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr: java.lang.Runnable next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Scanner: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$EmptyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.text.normalizer.Trie2$Trie2Iterator: sun.text.normalizer.Trie2$Range next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$DescendingKeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<jdk.internal.module.ModuleBootstrap$2: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.RegularEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$MapN$MapNIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.invoke.AbstractConstantGroup$AsIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.regex.Pattern$1MatcherIterator: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.HashMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.EnumMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedList$DescendingIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentHashMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.net.www.HeaderParser$ParserIterator: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableCollection$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.LinkedBlockingQueue$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedHashMap$LinkedValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$2: java.util.ServiceLoader$Provider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentHashMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayDeque$DeqIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.PreHashedMap$1$1: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.PreHashedMap$2$1: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractList$SubList$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$CheckedList$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableList$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$3: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringValues$1: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubListIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.io.BufferedReader$1: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.IdentityHashMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.zip.ZipFile$ZipEntryIterator: java.util.zip.ZipEntry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$ListItr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringEntrySet$1: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Spliterators$1Adapter: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList$Itr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringKeySet$1: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.net.www.MessageHeader$HeaderIterator: java.lang.String next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.HashMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.LinkedHashMap$LinkedKeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractMap$2$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.nio.file.FileTreeIterator: java.nio.file.FileTreeWalker$Event next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.WeakHashMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayList$SubList$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.net.URL$1: java.net.spi.URLStreamHandlerProvider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.AbstractMap$1$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$Set12$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.EnumMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Enumeration$1: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ArrayDeque$DescendingIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.JumboEnumSet$EnumSetIterator: java.lang.Enum next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap$SubMapKeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$KeyIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.WeakHashMap$ValueIterator: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Arrays$ArrayItr: java.lang.Object next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.TreeMap$EntryIterator: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.ServiceLoader$ModuleServicesLookupIterator: java.util.ServiceLoader$Provider next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator: java.nio.file.Path next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1: java.util.Map$Entry next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<java.util.regex.Matcher$1MatchResultIterator: java.util.regex.MatchResult next()>";
    "(83)<sortpom.wrapper.WrapperFactoryImpl: void addElementsToSortOrderMap(org.jdom.Element,int)>"->"<sun.util.resources.ParallelListResourceBundle$KeySet$1: java.lang.String next()>";
    "(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>"->"(38)<sortpom.wrapper.ElementWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Element)>";
    "(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>"->"(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>";
    "(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>"->"(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>";
    "(97)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.content.Wrapper create(org.jdom.Content)>"->"(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>";
    "(115)<sortpom.wrapper.WrapperFactoryImpl: java.util.List castToChildElementList(org.jdom.Element)>"->"<java.util.ArrayList: void <init>(java.util.Collection)>";
    "(13)<sortpom.wrapper.ElementUtil: void <init>()>"
    "(13)<sortpom.wrapper.ElementUtil: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"<java.lang.StringBuilder: void <init>()>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(18)<sortpom.wrapper.ElementUtil: java.lang.String getDeepName(org.jdom.Element)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(35)<sortpom.wrapper.ElementUtil: boolean isElementName(org.jdom.Element,java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(15)<sortpom.wrapper.TextWrapperCreator: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(32)<sortpom.wrapper.TextWrapperCreator: boolean isSingleNewLine(org.jdom.Text)>"
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(32)<sortpom.wrapper.TextWrapperCreator: boolean isSingleNewLine(org.jdom.Text)>";
    "(36)<sortpom.wrapper.TextWrapperCreator: boolean isBlankLineOrLines(org.jdom.Text)>"
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(36)<sortpom.wrapper.TextWrapperCreator: boolean isBlankLineOrLines(org.jdom.Text)>";
    "(13)<sortpom.jdomcontent.NewlineText: void <init>()>"
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(13)<sortpom.jdomcontent.NewlineText: void <init>()>";
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>";
    "(23)<sortpom.wrapper.TextWrapperCreator: sortpom.wrapper.content.Wrapper createWrapper(org.jdom.Text)>"->"(22)<sortpom.wrapper.content.UnsortedWrapper: void <init>(org.jdom.Content)>";
    "<java.lang.String: boolean matches(java.lang.String)>"
    "(32)<sortpom.wrapper.TextWrapperCreator: boolean isSingleNewLine(org.jdom.Text)>"->"<java.lang.String: boolean matches(java.lang.String)>";
    "(36)<sortpom.wrapper.TextWrapperCreator: boolean isBlankLineOrLines(org.jdom.Text)>"->"<java.lang.String: boolean matches(java.lang.String)>";
    "(14)<sortpom.wrapper.ElementSortOrderMap: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.util.HashMap: void <init>()>"
    "(14)<sortpom.wrapper.ElementSortOrderMap: void <init>()>"->"<java.util.HashMap: void <init>()>";
    "<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<sun.util.PreHashedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.ImmutableCollections$AbstractImmutableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.ImmutableCollections$AbstractImmutableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
    "(25)<sortpom.wrapper.ElementSortOrderMap: void addElement(org.jdom.Element,int)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object put(java.lang.Object,java.lang.Object)>";
    "<java.util.Hashtable: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Hashtable: boolean containsKey(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Collections$EmptyMap: boolean containsKey(java.lang.Object)>";
    "<java.util.TreeMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.TreeMap: boolean containsKey(java.lang.Object)>";
    "<java.util.Properties: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Properties: boolean containsKey(java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.TreeMap$NavigableSubMap: boolean containsKey(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentSkipListMap: boolean containsKey(java.lang.Object)>";
    "<java.util.HashMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.HashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.AbstractMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.AbstractMap: boolean containsKey(java.lang.Object)>";
    "<java.util.ImmutableCollections$MapN: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.ImmutableCollections$MapN: boolean containsKey(java.lang.Object)>";
    "<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.EnumMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.EnumMap: boolean containsKey(java.lang.Object)>";
    "<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap: boolean containsKey(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.lang.ProcessEnvironment$StringEnvironment: boolean containsKey(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Collections$CheckedMap: boolean containsKey(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.Collections$SingletonMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Collections$SingletonMap: boolean containsKey(java.lang.Object)>";
    "<java.util.ImmutableCollections$Map1: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.ImmutableCollections$Map1: boolean containsKey(java.lang.Object)>";
    "<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Collections$SynchronizedMap: boolean containsKey(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>"
    "(32)<sortpom.wrapper.ElementSortOrderMap: boolean containsElement(org.jdom.Element)>"->"<java.util.Collections$UnmodifiableMap: boolean containsKey(java.lang.Object)>";
    "<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>";
    "<java.security.Provider: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.security.Provider: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.ImmutableCollections$MapN: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.ImmutableCollections$MapN: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Collections$UnmodifiableMap: java.lang.Object get(java.lang.Object)>";
    "<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<sun.util.PreHashedMap: java.lang.Object get(java.lang.Object)>";
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Properties: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Properties: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Collections$SingletonMap: java.lang.Object get(java.lang.Object)>";
    "<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.text.AttributedString$AttributeMap: java.lang.Object get(java.lang.Object)>";
    "<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.lang.ProcessEnvironment$StringEnvironment: java.lang.String get(java.lang.Object)>";
    "<java.util.TreeMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.TreeMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.ImmutableCollections$Map1: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.ImmutableCollections$Map1: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Collections$CheckedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Collections$SynchronizedMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.Collections$EmptyMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>";
    "<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.TreeMap$NavigableSubMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.HashMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>";
    "<java.util.EnumMap: java.lang.Object get(java.lang.Object)>"
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.util.EnumMap: java.lang.Object get(java.lang.Object)>";
    "(38)<sortpom.wrapper.ElementSortOrderMap: int getSortOrder(org.jdom.Element)>"->"<java.lang.Integer: int intValue()>";
    "(19)<sortpom.parameter.IndentCharacters: void <init>(int)>"
    "(19)<sortpom.parameter.IndentCharacters: void <init>(int)>"->"<java.lang.Object: void <init>()>";
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.StringBuilder: void <init>()>";
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>";
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "<java.lang.String: void <init>(char[])>"
    "(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>"->"<java.lang.String: void <init>(char[])>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(31)<sortpom.parameter.LineSeparatorUtil: boolean isIllegalString()>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"(31)<sortpom.parameter.LineSeparatorUtil: boolean isIllegalString()>";
    "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
    "<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>"
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(31)<sortpom.parameter.LineSeparatorUtil: boolean isIllegalString()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(31)<sortpom.parameter.LineSeparatorUtil: boolean isIllegalString()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(31)<sortpom.parameter.LineSeparatorUtil: boolean isIllegalString()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(95)<sortpom.parameter.PluginParameters$Builder: void <init>()>"
    "(95)<sortpom.parameter.PluginParameters$Builder: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(124)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>"
    "(124)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setFormatting(java.lang.String,boolean,boolean,boolean)>"->"(21)<sortpom.parameter.LineSeparatorUtil: void <init>(java.lang.String)>";
    "(133)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>"
    "(133)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>"->"(19)<sortpom.parameter.IndentCharacters: void <init>(int)>";
    "(133)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setIndent(int,boolean,boolean)>"->"(29)<sortpom.parameter.IndentCharacters: java.lang.String getIndentCharacters()>";
    "(149)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>"
    "(23)<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>"
    "(149)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>"->"(23)<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>";
    "(149)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>"->"(23)<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>";
    "(149)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters$Builder setSortEntities(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>"->"(23)<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>";
    "(173)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>"
    "(6)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean,sortpom.parameter.PluginParameters$1)>"
    "(173)<sortpom.parameter.PluginParameters$Builder: sortpom.parameter.PluginParameters build()>"->"(6)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean,sortpom.parameter.PluginParameters$1)>";
    "(69)<sortpom.parameter.PluginParameters$Builder: void <init>(sortpom.parameter.PluginParameters$1)>"
    "(69)<sortpom.parameter.PluginParameters$Builder: void <init>(sortpom.parameter.PluginParameters$1)>"->"(95)<sortpom.parameter.PluginParameters$Builder: void <init>()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.Format: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(9)<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>"
    "(9)<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(13)<sortpom.parameter.VerifyFailType: sortpom.parameter.VerifyFailType fromString(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"->"(9)<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>";
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"->"(9)<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>";
    "(11)<sortpom.parameter.VerifyFailType: void <clinit>()>"->"(9)<sortpom.parameter.VerifyFailType: void <init>(java.lang.String,int)>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.Format: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(7)<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>"
    "(7)<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.util.stream.ReferencePipeline: java.util.stream.Stream filter(java.util.function.Predicate)>";
    "<java.util.stream.ReferencePipeline: java.util.Optional findAny()>"
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.util.stream.ReferencePipeline: java.util.Optional findAny()>";
    "<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>"
    "(12)<sortpom.parameter.VerifyFailOnType: sortpom.parameter.VerifyFailOnType fromString(java.lang.String)>"->"<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(18)<sortpom.parameter.VerifyFailOnType: sortpom.exception.FailureException lambda$fromString$1(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "<java.lang.Enum: java.lang.String toString()>"
    "(16)<sortpom.parameter.VerifyFailOnType: boolean lambda$fromString$0(java.lang.String,sortpom.parameter.VerifyFailOnType)>"->"<java.lang.Enum: java.lang.String toString()>";
    "(16)<sortpom.parameter.VerifyFailOnType: boolean lambda$fromString$0(java.lang.String,sortpom.parameter.VerifyFailOnType)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>"->"(7)<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>";
    "(9)<sortpom.parameter.VerifyFailOnType: void <clinit>()>"->"(7)<sortpom.parameter.VerifyFailOnType: void <init>(java.lang.String,int)>";
    "(23)<sortpom.parameter.DependencySortOrder: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>"->"(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>";
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"->"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>";
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"->"<java.lang.String: boolean isEmpty()>";
    "<java.lang.String: java.lang.String[] split(java.lang.String)>"
    "(42)<sortpom.parameter.DependencySortOrder: java.lang.String[] parseChildElementNameList()>"->"<java.lang.String: java.lang.String[] split(java.lang.String)>";
    "(51)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueTrue()>"
    "(51)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueTrue()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(56)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueFalse()>"
    "(56)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueFalse()>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.AbstractCollection: boolean isEmpty()>";
    "<java.util.Collections$EmptySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$EmptySet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$SynchronizedCollection: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentSkipListSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentSkipListSet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$UnmodifiableCollection: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentSkipListMap$KeySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentSkipListMap$KeySet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean isEmpty()>";
    "<java.util.TreeMap$NavigableSubMap$EntrySetView: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.TreeMap$NavigableSubMap$EntrySetView: boolean isEmpty()>";
    "<java.util.TreeSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.TreeSet: boolean isEmpty()>";
    "<java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.lang.ProcessEnvironment$StringEntrySet: boolean isEmpty()>";
    "<java.util.HashSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.HashSet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.ArrayList: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentSkipListMap$EntrySet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<sun.security.jca.ProviderList$ServiceList: boolean isEmpty()>";
    "<java.util.ArrayDeque: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.ArrayDeque: boolean isEmpty()>";
    "<sun.nio.ch.Util$2: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<sun.nio.ch.Util$2: boolean isEmpty()>";
    "<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue: boolean isEmpty()>";
    "<java.util.JumboEnumSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.JumboEnumSet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$CheckedCollection: boolean isEmpty()>";
    "<java.util.RegularEnumSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.RegularEnumSet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Vector: boolean isEmpty()>";
    "<java.util.AbstractMap$2: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.AbstractMap$2: boolean isEmpty()>";
    "<java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.lang.ProcessEnvironment$StringValues: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.ImmutableCollections$ListN: boolean isEmpty()>";
    "<java.util.Properties$EntrySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Properties$EntrySet: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$EmptyList: boolean isEmpty()>";
    "<java.util.Collections$SetFromMap: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$SetFromMap: boolean isEmpty()>";
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>";
    "<java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.lang.ProcessEnvironment$StringKeySet: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean isEmpty()>";
    "<java.util.Collections$AsLIFOQueue: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$AsLIFOQueue: boolean isEmpty()>";
    "<javax.security.auth.Subject$SecureSet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<javax.security.auth.Subject$SecureSet: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>";
    "<java.util.AbstractMap$1: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.AbstractMap$1: boolean isEmpty()>";
    "<java.util.Collections$CheckedMap$CheckedEntrySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.Collections$CheckedMap$CheckedEntrySet: boolean isEmpty()>";
    "<java.util.concurrent.ConcurrentSkipListMap$Values: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.ConcurrentSkipListMap$Values: boolean isEmpty()>";
    "<java.util.concurrent.SynchronousQueue: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.concurrent.SynchronousQueue: boolean isEmpty()>";
    "<java.util.TreeMap$KeySet: boolean isEmpty()>"
    "(61)<sortpom.parameter.DependencySortOrder: boolean isNoSorting()>"->"<java.util.TreeMap$KeySet: boolean isEmpty()>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"<java.lang.StringBuilder: void <init>()>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"(35)<sortpom.parameter.DependencySortOrder: java.util.Collection getChildElementNames()>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(66)<sortpom.parameter.DependencySortOrder: java.lang.String toString()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(36)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean)>"
    "(36)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean)>"->"<java.lang.Object: void <init>()>";
    "(65)<sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>"
    "(65)<sortpom.parameter.PluginParameters: sortpom.parameter.PluginParameters$Builder builder()>"->"(69)<sortpom.parameter.PluginParameters$Builder: void <init>(sortpom.parameter.PluginParameters$1)>";
    "(6)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean,sortpom.parameter.PluginParameters$1)>"->"(36)<sortpom.parameter.PluginParameters: void <init>(java.io.File,boolean,java.lang.String,java.lang.String,java.lang.String,sortpom.parameter.LineSeparatorUtil,boolean,boolean,boolean,java.lang.String,boolean,boolean,java.lang.String,java.lang.String,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,sortpom.parameter.DependencySortOrder,boolean,boolean,boolean,sortpom.parameter.VerifyFailType,sortpom.parameter.VerifyFailOnType,boolean,boolean)>";
    "(43)<sortpom.SortPomService: void <init>()>"
    "(43)<sortpom.SortPomService: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(19)<sortpom.util.FileUtil: void <init>()>"
    "(43)<sortpom.SortPomService: void <init>()>"->"(19)<sortpom.util.FileUtil: void <init>()>";
    "(43)<sortpom.SortPomService: void <init>()>"->"(44)<sortpom.wrapper.WrapperFactoryImpl: void <init>(sortpom.util.FileUtil)>";
    "(26)<sortpom.XmlProcessor: void <init>(sortpom.wrapper.operation.WrapperFactory)>"
    "(43)<sortpom.SortPomService: void <init>()>"->"(26)<sortpom.XmlProcessor: void <init>(sortpom.wrapper.operation.WrapperFactory)>";
    "(12)<sortpom.processinstruction.XmlProcessingInstructionParser: void <init>()>"
    "(43)<sortpom.SortPomService: void <init>()>"->"(12)<sortpom.processinstruction.XmlProcessingInstructionParser: void <init>()>";
    "(22)<sortpom.XmlOutputGenerator: void <init>()>"
    "(43)<sortpom.SortPomService: void <init>()>"->"(22)<sortpom.XmlOutputGenerator: void <init>()>";
    "(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"
    "(36)<sortpom.util.FileUtil: void setup(sortpom.parameter.PluginParameters)>"
    "(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(36)<sortpom.util.FileUtil: void setup(sortpom.parameter.PluginParameters)>";
    "(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(50)<sortpom.wrapper.WrapperFactoryImpl: void setup(sortpom.parameter.PluginParameters)>";
    "(19)<sortpom.processinstruction.XmlProcessingInstructionParser: void setup(sortpom.logger.SortPomLogger)>"
    "(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(19)<sortpom.processinstruction.XmlProcessingInstructionParser: void setup(sortpom.logger.SortPomLogger)>";
    "(34)<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>"
    "(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(34)<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>";
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>";
    "(40)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String replaceIgnoredSections()>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(40)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String replaceIgnoredSections()>";
    "<java.lang.String: byte[] getBytes(java.lang.String)>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.String: byte[] getBytes(java.lang.String)>";
    "<java.io.ByteArrayInputStream: void <init>(byte[])>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.ByteArrayInputStream: void <init>(byte[])>";
    "(39)<sortpom.XmlProcessor: void setOriginalXml(java.io.InputStream)>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(39)<sortpom.XmlProcessor: void setOriginalXml(java.io.InputStream)>";
    "<java.io.ByteArrayInputStream: void close()>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: void <init>()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.io.File: java.lang.String getAbsolutePath()>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"
    "(68)<sortpom.SortPomService: void sortOriginalXml()>"->"(45)<sortpom.XmlProcessor: void sortXml()>";
    "(82)<sortpom.SortPomService: void generateSortedXml()>"
    "(60)<sortpom.XmlProcessor: org.jdom.Document getNewDocument()>"
    "(82)<sortpom.SortPomService: void generateSortedXml()>"->"(60)<sortpom.XmlProcessor: org.jdom.Document getNewDocument()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"
    "(82)<sortpom.SortPomService: void generateSortedXml()>"->"(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>";
    "(35)<sortpom.processinstruction.XmlProcessingInstructionParser: boolean existsIgnoredSections()>"
    "(82)<sortpom.SortPomService: void generateSortedXml()>"->"(35)<sortpom.processinstruction.XmlProcessingInstructionParser: boolean existsIgnoredSections()>";
    "(48)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String revertIgnoredSections(java.lang.String)>"
    "(82)<sortpom.SortPomService: void generateSortedXml()>"->"(48)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String revertIgnoredSections(java.lang.String)>";
    "<java.lang.String: java.lang.String trim()>"
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.lang.String: java.lang.String trim()>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.lang.String: int length()>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(49)<sortpom.util.FileUtil: void backupFile()>"
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"(49)<sortpom.util.FileUtil: void backupFile()>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(93)<sortpom.SortPomService: void createBackupFile()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(105)<sortpom.SortPomService: void saveGeneratedXml()>"
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"
    "(105)<sortpom.SortPomService: void saveGeneratedXml()>"->"(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.StringReader: void <init>(java.lang.String)>";
    "<java.io.BufferedReader: void <init>(java.io.Reader)>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.StringReader: void <init>(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void <init>(java.io.Reader)>";
    "<java.io.BufferedReader: java.lang.String readLine()>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "<java.io.BufferedReader: void close()>"
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: java.lang.String readLine()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.BufferedReader: void close()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: void <init>()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: void <init>()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.Throwable: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.nio.charset.MalformedInputException: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.nio.file.FileSystemException: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.InvalidClassException: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.io.WriteAbortedException: java.lang.String getMessage()>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(137)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlElementsSorted()>"
    "(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>"
    "(137)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlElementsSorted()>"->"(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: void <init>()>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "<java.io.File: void <init>(java.lang.String)>"
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.io.File: void <init>(java.lang.String)>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(14)<sortpom.ViolationXmlProcessor: void <init>()>"
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"(14)<sortpom.ViolationXmlProcessor: void <init>()>";
    "(58)<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>"
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"(58)<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>";
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>";
    "(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>"->"(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>";
    "<java.lang.Enum: int ordinal()>"
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Enum: int ordinal()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Enum: int ordinal()>";
    "(103)<sortpom.SortPomImpl$1: void <clinit>()>"->"<java.lang.Enum: int ordinal()>";
    "(25)<sortpom.SortPomImpl: void <init>()>"
    "(25)<sortpom.SortPomImpl: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(25)<sortpom.SortPomImpl: void <init>()>"->"(43)<sortpom.SortPomService: void <init>()>";
    "(30)<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"
    "(30)<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(52)<sortpom.SortPomService: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"
    "(30)<sortpom.SortPomImpl: void setup(sortpom.logger.SortPomLogger,sortpom.parameter.PluginParameters)>"->"(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(51)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueTrue()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(56)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueFalse()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(51)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueTrue()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(56)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueFalse()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(51)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueTrue()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(56)<sortpom.parameter.DependencySortOrder: boolean isDeprecatedValueFalse()>";
    "(41)<sortpom.SortPomImpl: void warnAboutDeprecatedArguments(sortpom.parameter.PluginParameters)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: void <init>()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(68)<sortpom.SortPomService: void sortOriginalXml()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(82)<sortpom.SortPomService: void generateSortedXml()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(53)<sortpom.util.XmlOrderedResult: boolean isOrdered()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(93)<sortpom.SortPomService: void createBackupFile()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"(105)<sortpom.SortPomService: void saveGeneratedXml()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: void <init>()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(65)<sortpom.SortPomImpl: void sortPom()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(82)<sortpom.SortPomImpl: void verifyPom()>"
    "(82)<sortpom.SortPomImpl: void verifyPom()>"->"(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>";
    "(82)<sortpom.SortPomImpl: void verifyPom()>"->"(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.lang.StringBuilder: void <init>()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"(68)<sortpom.SortPomService: void sortOriginalXml()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"(137)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlElementsSorted()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"(82)<sortpom.SortPomService: void generateSortedXml()>";
    "(87)<sortpom.SortPomImpl: sortpom.util.XmlOrderedResult getVerificationResult()>"->"(110)<sortpom.SortPomService: sortpom.util.XmlOrderedResult isOriginalXmlStringSorted()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(53)<sortpom.util.XmlOrderedResult: boolean isOrdered()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(58)<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(58)<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(58)<sortpom.util.XmlOrderedResult: java.lang.String getErrorMessage()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.Enum: int ordinal()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: void <init>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(82)<sortpom.SortPomService: void generateSortedXml()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(93)<sortpom.SortPomService: void createBackupFile()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(105)<sortpom.SortPomService: void saveGeneratedXml()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: void <init>()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(141)<sortpom.SortPomService: void saveViolationFile(sortpom.util.XmlOrderedResult)>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(102)<sortpom.SortPomImpl: void performVerfificationResult(sortpom.util.XmlOrderedResult)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>"->"<java.util.ArrayList: void <init>()>";
    "<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "<java.lang.StringBuffer: void <init>()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: void <init>()>";
    "<java.util.regex.Matcher: boolean find()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: boolean find()>";
    "<java.util.regex.Matcher: java.lang.String group()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.lang.String group()>";
    "<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>";
    "<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.ImmutableCollections$AbstractImmutableCollection: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.Collections$CheckedCollection: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.ArrayList: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.Vector: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.LinkedList: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.AbstractList: boolean add(java.lang.Object)>";
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>";
    "<java.lang.StringBuffer: java.lang.String toString()>"
    "(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: void <init>()>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: boolean find()>";
    "<java.util.regex.Matcher: java.lang.String group(int)>"
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>";
    "(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>"->"<java.lang.StringBuffer: java.lang.String toString()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Locale: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.SignatureSpi: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.security.x509.NameConstraintsExtension: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.JumboEnumSet: java.util.EnumSet clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.ArrayList: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.CompactByteArray: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.security.x509.GeneralSubtrees: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.net.www.protocol.http.AuthenticationInfo: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.RuleBasedBreakIterator$SafeCharIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.DateFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.security.util.BitArray: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Calendar: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Vector: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Hashtable$Entry: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.Format: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.IdentityHashMap: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.Thread: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.HashMap: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.net.ProgressSource: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.util.calendar.CalendarDate: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.EnumSet: java.util.EnumSet clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.RuleBasedCollator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.NumberFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.HashSet: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.BitSet: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.LinkedList: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.MessageFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Properties: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.normalizer.UCharacterIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.MessageDigestSpi: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.DateFormatSymbols: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.security.provider.PolicyParser$GrantEntry: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.MessageDigest: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.zip.ZipEntry: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.BreakIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.Enum: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.TreeMap: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Date: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.Hashtable: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.ChoiceFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.jar.Manifest: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.AttributedString$AttributedStringIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.DecimalFormatSymbols: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.util.resources.Bundles$CacheKey: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.StringCharacterIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.normalizer.ReplaceableUCharacterIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.RuleBasedBreakIterator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.jar.Attributes: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.GregorianCalendar: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.IntHashtable: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.Collator: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.AbstractMap: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.util.calendar.ImmutableGregorianDate: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.DecimalFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.normalizer.NormalizerBase: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.net.www.MimeEntry: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.ArrayDeque: java.util.ArrayDeque clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.Signature: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.SimpleDateFormat: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.SimpleTimeZone: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.text.DigitList: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.concurrent.ConcurrentSkipListSet: java.util.concurrent.ConcurrentSkipListSet clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.Signature$Delegate: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.TreeSet: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.TimeZone: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.net.HttpCookie: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.ref.Reference: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.invoke.MemberName: java.lang.invoke.MemberName clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.JapaneseImperialCalendar: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.lang.Object: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.util.EnumMap: java.util.EnumMap clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<java.security.MessageDigest$Delegate: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.text.normalizer.CharacterIteratorWrapper: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType[] values()>"->"<sun.util.calendar.ZoneInfo: java.lang.Object clone()>";
    "(11)<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>"
    "(11)<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>"->"<java.lang.Enum: void <init>(java.lang.String,int)>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"<java.lang.Enum: java.lang.String name()>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"<java.lang.Enum: java.lang.String name()>";
    "(28)<sortpom.processinstruction.InstructionType: boolean containsType(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(32)<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>"
    "(32)<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>"->"<java.lang.Enum: java.lang.String name()>";
    "(32)<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>"->"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"(11)<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"(11)<sortpom.processinstruction.InstructionType: void <init>(java.lang.String,int)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: void <init>()>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(13)<sortpom.processinstruction.InstructionType: void <clinit>()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(21)<sortpom.processinstruction.SortpomPiScanner: void <init>(sortpom.logger.SortPomLogger)>"->"<java.lang.Object: void <init>()>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.util.regex.Matcher: boolean find()>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"<java.util.regex.Matcher: java.lang.String group(int)>";
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>";
    "(53)<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>"
    "(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>"->"(53)<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(53)<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(53)<sortpom.processinstruction.SortpomPiScanner: void addError(java.lang.String)>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(32)<sortpom.processinstruction.InstructionType: boolean matches(java.lang.String)>";
    "(39)<sortpom.processinstruction.SortpomPiScanner: void scanOneInstruction(java.lang.String)>"->"(21)<sortpom.processinstruction.InstructionType: sortpom.processinstruction.InstructionType next()>";
    "(12)<sortpom.processinstruction.XmlProcessingInstructionParser: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(12)<sortpom.processinstruction.XmlProcessingInstructionParser: void <init>()>"->"(19)<sortpom.processinstruction.IgnoredSectionsStore: void <init>()>";
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(21)<sortpom.processinstruction.SortpomPiScanner: void <init>(sortpom.logger.SortPomLogger)>";
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(27)<sortpom.processinstruction.SortpomPiScanner: void scan(java.lang.String)>";
    "(60)<sortpom.processinstruction.SortpomPiScanner: boolean isScanError()>"
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(60)<sortpom.processinstruction.SortpomPiScanner: boolean isScanError()>";
    "(64)<sortpom.processinstruction.SortpomPiScanner: java.lang.String getFirstError()>"
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(64)<sortpom.processinstruction.SortpomPiScanner: java.lang.String getFirstError()>";
    "(69)<sortpom.processinstruction.SortpomPiScanner: boolean containsIgnoredSections()>"
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(69)<sortpom.processinstruction.SortpomPiScanner: boolean containsIgnoredSections()>";
    "(24)<sortpom.processinstruction.XmlProcessingInstructionParser: void scanForIgnoredSections(java.lang.String)>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(40)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String replaceIgnoredSections()>"->"(23)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String replaceIgnoredSections(java.lang.String)>";
    "(48)<sortpom.processinstruction.XmlProcessingInstructionParser: java.lang.String revertIgnoredSections(java.lang.String)>"->"(39)<sortpom.processinstruction.IgnoredSectionsStore: java.lang.String revertIgnoredSections(java.lang.String)>";
    "(74)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void <init>(sortpom.util.XmlWriter,boolean,boolean)>"
    "<org.jdom.output.XMLOutputter: void <init>()>"
    "(74)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void <init>(sortpom.util.XmlWriter,boolean,boolean)>"->"<org.jdom.output.XMLOutputter: void <init>()>";
    "(86)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"
    "(86)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>"->"(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>";
    "<org.jdom.output.XMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>"
    "(86)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>"->"<org.jdom.output.XMLOutputter: void printComment(java.io.Writer,org.jdom.Comment)>";
    "<java.io.StringWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<java.io.StringWriter: void flush()>";
    "(33)<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"(33)<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>";
    "<java.io.Writer$1: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<java.io.Writer$1: void flush()>";
    "<sun.nio.cs.StreamEncoder: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<sun.nio.cs.StreamEncoder: void flush()>";
    "<java.io.PrintWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<java.io.PrintWriter: void flush()>";
    "<java.io.BufferedWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<java.io.BufferedWriter: void flush()>";
    "(87)<sortpom.util.StringLineSeparatorWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"(87)<sortpom.util.StringLineSeparatorWriter: void flush()>";
    "<java.io.OutputStreamWriter: void flush()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"<java.io.OutputStreamWriter: void flush()>";
    "(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>";
    "(48)<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>"
    "(97)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void clearIndentationForCurrentLine(java.io.Writer)>"->"(48)<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<sun.security.jca.ProviderList$ServiceList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$EmptyList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<sun.security.jca.ProviderList$3: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$CopiesList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$SubList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Vector: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$SynchronizedCollection: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Arrays$ArrayList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ArrayList$SubList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$ListN: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.concurrent.CopyOnWriteArrayList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.LinkedList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$UnmodifiableCollection: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.AbstractList$SubList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$List12: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ArrayList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$CheckedCollection: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$SingletonList: int size()>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Vector: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$EmptyList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.AbstractSequentialList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.concurrent.CopyOnWriteArrayList$COWSubList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<sun.security.jca.ProviderList$3: java.security.Provider get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$SynchronizedList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<sun.security.jca.ProviderList$ServiceList: java.security.Provider$Service get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$ListN: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$CheckedList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.lang.invoke.AbstractConstantGroup$AsList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$UnmodifiableList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ArrayList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$SubList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ImmutableCollections$List12: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$SingletonList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.LinkedList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.AbstractList$SubList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.ArrayList$SubList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Collections$CopiesList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.util.Arrays$ArrayList: java.lang.Object get(int)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "<java.io.Writer$1: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer$1: void write(java.lang.String)>";
    "<java.io.Writer: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer: void write(java.lang.String)>";
    "<java.io.StringWriter: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.StringWriter: void write(java.lang.String)>";
    "<java.io.PrintWriter: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.PrintWriter: void write(java.lang.String)>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>";
    "(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer$1: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.StringWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.PrintWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer$1: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.Writer: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.StringWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<java.io.PrintWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>";
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>";
    "<org.jdom.output.XMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"
    "(105)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>"->"<org.jdom.output.XMLOutputter: void printAttributes(java.io.Writer,java.util.List,org.jdom.Element,org.jdom.output.XMLOutputter$NamespaceStack)>";
    "(22)<sortpom.XmlOutputGenerator: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(11)<sortpom.util.WriterFactory: void <init>()>"
    "(22)<sortpom.XmlOutputGenerator: void <init>()>"->"(11)<sortpom.util.WriterFactory: void <init>()>";
    "(20)<sortpom.util.WriterFactory: void setup(sortpom.parameter.PluginParameters)>"
    "(34)<sortpom.XmlOutputGenerator: void setup(sortpom.parameter.PluginParameters)>"->"(20)<sortpom.util.WriterFactory: void setup(sortpom.parameter.PluginParameters)>";
    "(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(74)<sortpom.XmlOutputGenerator$PatchedXMLOutputter: void <init>(sortpom.util.XmlWriter,boolean,boolean)>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(61)<sortpom.XmlOutputGenerator: org.jdom.output.Format createPrettyFormat()>";
    "<org.jdom.output.XMLOutputter: void setFormat(org.jdom.output.Format)>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"<org.jdom.output.XMLOutputter: void setFormat(org.jdom.output.Format)>";
    "<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.Writer)>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"<org.jdom.output.XMLOutputter: void output(org.jdom.Document,java.io.Writer)>";
    "(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>";
    "<java.lang.Object: java.lang.String toString()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"<java.lang.Object: java.lang.String toString()>";
    "(77)<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(77)<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>";
    "(39)<sortpom.util.StringLineSeparatorWriter: void close()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(39)<sortpom.util.StringLineSeparatorWriter: void close()>";
    "(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>"
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(39)<sortpom.util.StringLineSeparatorWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(39)<sortpom.util.StringLineSeparatorWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(39)<sortpom.util.StringLineSeparatorWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(48)<sortpom.XmlOutputGenerator: java.lang.String getSortedXml(org.jdom.Document)>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
    "(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>"->"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.lang.RuntimeException: void <init>(java.lang.String)>"
    "(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>"->"<java.lang.RuntimeException: void <init>(java.lang.String)>";
    "(19)<sortpom.util.StringLineSeparatorWriter: void <init>(java.io.StringWriter,java.lang.String)>"
    "(10)<sortpom.util.XmlWriter: void <init>()>"
    "(19)<sortpom.util.StringLineSeparatorWriter: void <init>(java.io.StringWriter,java.lang.String)>"->"(10)<sortpom.util.XmlWriter: void <init>()>";
    "(19)<sortpom.util.StringLineSeparatorWriter: void <init>(java.io.StringWriter,java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "<java.lang.String: char[] toCharArray()>"
    "(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>"->"<java.lang.String: char[] toCharArray()>";
    "(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>"
    "(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>"->"(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>";
    "(34)<sortpom.util.StringLineSeparatorWriter: void write(int)>"
    "(34)<sortpom.util.StringLineSeparatorWriter: void write(int)>"->"(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>";
    "(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>"
    "(39)<sortpom.util.StringLineSeparatorWriter: void close()>"->"(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>";
    "(53)<sortpom.util.StringLineSeparatorWriter: void writeDelayedNewline()>"
    "(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>"->"(53)<sortpom.util.StringLineSeparatorWriter: void writeDelayedNewline()>";
    "(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>"->"(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>";
    "(43)<sortpom.util.StringLineSeparatorWriter: void writeOneCharacter(char)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>";
    "(65)<sortpom.util.StringLineSeparatorWriter: void writeLineSeparator()>"
    "(53)<sortpom.util.StringLineSeparatorWriter: void writeDelayedNewline()>"->"(65)<sortpom.util.StringLineSeparatorWriter: void writeLineSeparator()>";
    "(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>"->"<java.io.StringWriter: void write(java.lang.String)>";
    "(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>"->"(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>";
    "(65)<sortpom.util.StringLineSeparatorWriter: void writeLineSeparator()>"->"<java.io.StringWriter: void write(java.lang.String)>";
    "<java.lang.StringBuilder: int length()>"
    "(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>"->"<java.lang.StringBuilder: int length()>";
    "<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>"
    "(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>"->"<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>";
    "(77)<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>"->"(60)<sortpom.util.StringLineSeparatorWriter: void writeCharacterBuffer()>";
    "<java.io.StringWriter: java.lang.String toString()>"
    "(77)<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>"->"<java.io.StringWriter: java.lang.String toString()>";
    "(14)<sortpom.util.FileAttributeUtil: void <init>()>"
    "(14)<sortpom.util.FileAttributeUtil: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(23)<sortpom.util.FileAttributeUtil: long getLastModifiedTimestamp(java.io.File)>"
    "<java.io.File: long lastModified()>"
    "(23)<sortpom.util.FileAttributeUtil: long getLastModifiedTimestamp(java.io.File)>"->"<java.io.File: long lastModified()>";
    "<java.io.File: java.nio.file.Path toPath()>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<java.io.File: java.nio.file.Path toPath()>";
    "<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<sun.nio.fs.UnixSecureDirectoryStream$BasicFileAttributeViewImpl: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>";
    "<sun.nio.fs.UnixFileAttributeViews$Basic: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>"
    "(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>"->"<sun.nio.fs.UnixFileAttributeViews$Basic: void setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)>";
    "<java.io.Writer: void <init>()>"
    "(10)<sortpom.util.XmlWriter: void <init>()>"->"<java.io.Writer: void <init>()>";
    "(16)<sortpom.util.XmlWriter: void write(char[])>"
    "(16)<sortpom.util.XmlWriter: void write(char[])>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(24)<sortpom.util.XmlWriter: void write(java.lang.String,int,int)>"
    "(24)<sortpom.util.XmlWriter: void write(java.lang.String,int,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(32)<sortpom.util.XmlWriter: void write(char[],int,int)>"
    "(32)<sortpom.util.XmlWriter: void write(char[],int,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(40)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence)>"
    "(40)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(48)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence,int,int)>"
    "(48)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence,int,int)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(56)<sortpom.util.XmlWriter: java.io.Writer append(char)>"
    "(56)<sortpom.util.XmlWriter: java.io.Writer append(char)>"->"<java.lang.UnsupportedOperationException: void <init>()>";
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(char)>"
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(char)>"->"(56)<sortpom.util.XmlWriter: java.io.Writer append(char)>";
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>"->"(48)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence,int,int)>";
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(java.lang.CharSequence)>"
    "(10)<sortpom.util.XmlWriter: java.lang.Appendable append(java.lang.CharSequence)>"->"(40)<sortpom.util.XmlWriter: java.io.Writer append(java.lang.CharSequence)>";
    "(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>"
    "(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "(20)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult ordered()>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(25)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult nameDiffers(java.lang.String,java.lang.String)>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(31)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult childElementDiffers(java.lang.String,int,int)>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(38)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult textContentDiffers(java.lang.String,java.lang.String,java.lang.String)>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(43)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineDiffers(int,java.lang.String)>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(48)<sortpom.util.XmlOrderedResult: sortpom.util.XmlOrderedResult lineSeparatorCharactersDiffer()>"->"(13)<sortpom.util.XmlOrderedResult: void <init>(boolean,java.lang.String)>";
    "(17)<sortpom.util.UrlWrapper: void <init>(java.lang.String)>"
    "(17)<sortpom.util.UrlWrapper: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<java.net.URL: void <init>(java.lang.String)>"
    "(23)<sortpom.util.UrlWrapper: boolean isUrl()>"->"<java.net.URL: void <init>(java.lang.String)>";
    "(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>"->"<java.net.URL: void <init>(java.lang.String)>";
    "<java.net.URL: java.io.InputStream openStream()>"
    "(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>"->"<java.net.URL: java.io.InputStream openStream()>";
    "(19)<sortpom.util.FileUtil: void <init>()>"->"<java.lang.Object: void <init>()>";
    "(19)<sortpom.util.FileUtil: void <init>()>"->"(14)<sortpom.util.FileAttributeUtil: void <init>()>";
    "(49)<sortpom.util.FileUtil: void backupFile()>"->"(55)<sortpom.util.FileUtil: void createFileHandle()>";
    "(49)<sortpom.util.FileUtil: void backupFile()>"->"(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>";
    "(49)<sortpom.util.FileUtil: void backupFile()>"->"(69)<sortpom.util.FileUtil: void createBackupFile()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.lang.StringBuilder: void <init>()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(55)<sortpom.util.FileUtil: void createFileHandle()>"->"<java.io.File: void <init>(java.lang.String)>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.io.File: java.nio.file.Path toPath()>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.lang.StringBuilder: void <init>()>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(61)<sortpom.util.FileUtil: void checkBackupFileAccess()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.io.File: java.nio.file.Path toPath()>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.io.File: java.nio.file.Path toPath()>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.lang.StringBuilder: void <init>()>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(69)<sortpom.util.FileUtil: void createBackupFile()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<java.io.FileInputStream: void <init>(java.io.File)>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void <init>(java.io.File)>";
    "<java.io.FileInputStream: void close()>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void close()>";
    "<java.net.SocketInputStream: void close()>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.net.SocketInputStream: void close()>";
    "<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.net.SocketInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.net.SocketInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.FileInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.net.SocketInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: void <init>()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: void <init>()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"
    "(82)<sortpom.util.FileUtil: java.lang.String getPomFileContent()>"->"(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"(23)<sortpom.util.FileAttributeUtil: long getLastModifiedTimestamp(java.io.File)>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"<java.lang.StringBuilder: void <init>()>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(94)<sortpom.util.FileUtil: void savePomfileTimestamp()>"->"(15)<sortpom.exception.FailureException: void <init>(java.lang.String)>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.io.File: void <init>(java.lang.String)>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(103)<sortpom.util.FileUtil: void saveViolationFile(java.lang.String)>"->"(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"
    "(113)<sortpom.util.FileUtil: void savePomFile(java.lang.String)>"->"(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>";
    "<java.io.File: java.io.File getParentFile()>"
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.io.File: java.io.File getParentFile()>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.io.File: java.nio.file.Path toPath()>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.io.File: java.nio.file.Path toPath()>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"<java.lang.String: byte[] getBytes(java.lang.String)>";
    "(119)<sortpom.util.FileUtil: void saveFile(java.io.File,java.lang.String,java.lang.String)>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"(35)<sortpom.util.FileAttributeUtil: void setTimestamps(java.io.File,long)>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"<java.lang.StringBuilder: void <init>()>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(128)<sortpom.util.FileUtil: void setPomfileTimestamp()>"->"(11)<sortpom.exception.FailureException: void <init>(java.lang.String,java.lang.Throwable)>";
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: java.lang.Object get()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: java.lang.Object get()>";
    "<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "<sun.net.www.http.KeepAliveStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FileInputStream: void close()>";
    "<java.io.InputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream: void close()>";
    "<sun.net.www.MeteredStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.MeteredStream: void close()>";
    "<java.io.FilterInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FilterInputStream: void close()>";
    "<sun.net.www.http.ChunkedInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "<java.util.jar.JarVerifier$VerifierStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "<java.util.Base64$DecInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.Base64$DecInputStream: void close()>";
    "<java.io.ObjectInputStream$PeekInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$PeekInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "<java.io.ObjectInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream: void close()>";
    "<java.lang.ProcessImpl$ProcessPipeInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$ProcessPipeInputStream: void close()>";
    "<java.util.jar.Manifest$FastInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.Manifest$FastInputStream: void close()>";
    "<java.lang.ProcessImpl$DeferredCloseProcessPipeInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseProcessPipeInputStream: void close()>";
    "<java.io.InputStream$1: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream$1: void close()>";
    "<java.util.zip.InflaterInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.InflaterInputStream: void close()>";
    "<sun.nio.ch.ChannelInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "<java.io.ObjectInputStream$BlockDataInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$BlockDataInputStream: void close()>";
    "<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void close()>";
    "<java.util.zip.ZipInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipInputStream: void close()>";
    "<java.nio.channels.Channels$2: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.nio.channels.Channels$2: void close()>";
    "<java.io.BufferedInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.BufferedInputStream: void close()>";
    "<java.io.PushbackInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.PushbackInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.net.SocketInputStream: void close()>";
    "<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "<java.util.zip.ZipFile$ZipFileInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "<sun.net.www.http.HttpCaptureInputStream: void close()>"
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.MeteredStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FilterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.Base64$DecInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$PeekInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$ProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.Manifest$FastInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream$1: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.InflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$BlockDataInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.nio.channels.Channels$2: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.BufferedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.PushbackInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.net.SocketInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.MeteredStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FilterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.Base64$DecInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$PeekInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$ProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.Manifest$FastInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream$1: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.InflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$BlockDataInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.nio.channels.Channels$2: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.BufferedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.PushbackInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.net.SocketInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.jar.JarURLConnection$JarURLInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.KeepAliveStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.MeteredStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.FilterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.ChunkedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.JarVerifier$VerifierStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.security.provider.FileInputStreamPool$UnclosableInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.Base64$DecInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$PeekInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$ProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.jar.Manifest$FastInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.ProcessImpl$DeferredCloseProcessPipeInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.InputStream$1: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.InflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.nio.ch.ChannelInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ObjectInputStream$BlockDataInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$ErrorStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.nio.channels.Channels$2: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.BufferedInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.PushbackInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.net.SocketInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInflaterInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.protocol.http.HttpURLConnection$HttpInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.util.zip.ZipFile$ZipFileInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<sun.net.www.http.HttpCaptureInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.io.ByteArrayInputStream: void close()>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "(143)<sortpom.util.FileUtil: java.lang.String getDefaultSortOrderXml()>"->"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>";
    "<java.io.FileInputStream: void <init>(java.lang.String)>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.FileInputStream: void <init>(java.lang.String)>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>";
    "<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>";
    "<java.io.IOException: void <init>(java.lang.String)>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.IOException: void <init>(java.lang.String)>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.net.URL: java.io.InputStream openStream()>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.File: void <init>(java.lang.String)>";
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "<java.io.FileNotFoundException: void <init>(java.lang.String)>"
    "(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>"->"<java.io.FileNotFoundException: void <init>(java.lang.String)>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.lang.Object: java.lang.Class getClass()>";
    "<java.util.Optional: java.util.Optional map(java.util.function.Function)>"
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.util.Optional: java.util.Optional map(java.util.function.Function)>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.util.Optional: java.util.Optional map(java.util.function.Function)>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>";
    "(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>"->"<java.net.URL: java.io.InputStream openStream()>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.StringBuilder: void <init>()>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
    "(191)<sortpom.util.FileUtil: java.lang.IllegalArgumentException lambda$getPredefinedSortOrder$2(java.lang.String)>"->"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.StringBuilder: void <init>()>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.StringBuilder: java.lang.String toString()>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<jdk.internal.loader.Loader: java.net.URL getResource(java.lang.String)>";
    "(189)<sortpom.util.FileUtil: java.net.URL lambda$getPredefinedSortOrder$1(java.lang.String,java.lang.ClassLoader)>"->"<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>";
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"->"(17)<sortpom.util.UrlWrapper: void <init>(java.lang.String)>";
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"->"(23)<sortpom.util.UrlWrapper: boolean isUrl()>";
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"->"(31)<sortpom.util.UrlWrapper: java.io.InputStream openStream()>";
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"->"(168)<sortpom.util.FileUtil: java.io.InputStream openCustomSortOrderFile()>";
    "(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>"->"(187)<sortpom.util.FileUtil: java.io.InputStream getPredefinedSortOrder(java.lang.String)>";
    "(11)<sortpom.util.WriterFactory: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<java.io.StringWriter: void <init>()>"
    "(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>"->"<java.io.StringWriter: void <init>()>";
    "(38)<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>"
    "(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>"->"(38)<sortpom.parameter.LineSeparatorUtil: java.lang.String toString()>";
    "(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>"->"(19)<sortpom.util.StringLineSeparatorWriter: void <init>(java.io.StringWriter,java.lang.String)>";
    "(10)<sortpom.util.NoSpaceBeforeCloseWriter: void <init>(sortpom.util.XmlWriter)>"
    "(26)<sortpom.util.WriterFactory: sortpom.util.XmlWriter getWriter()>"->"(10)<sortpom.util.NoSpaceBeforeCloseWriter: void <init>(sortpom.util.XmlWriter)>";
    "(10)<sortpom.util.NoSpaceBeforeCloseWriter: void <init>(sortpom.util.XmlWriter)>"->"(10)<sortpom.util.XmlWriter: void <init>()>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"->"<java.lang.String: boolean equals(java.lang.Object)>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"->"(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"->"(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"->"(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>";
    "(19)<sortpom.util.NoSpaceBeforeCloseWriter: void write(java.lang.String)>"->"(26)<sortpom.util.StringLineSeparatorWriter: void write(java.lang.String)>";
    "(28)<sortpom.util.NoSpaceBeforeCloseWriter: void write(int)>"
    "(28)<sortpom.util.NoSpaceBeforeCloseWriter: void write(int)>"->"(28)<sortpom.util.NoSpaceBeforeCloseWriter: void write(int)>";
    "(28)<sortpom.util.NoSpaceBeforeCloseWriter: void write(int)>"->"(34)<sortpom.util.StringLineSeparatorWriter: void write(int)>";
    "(33)<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>"->"(33)<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>";
    "(33)<sortpom.util.NoSpaceBeforeCloseWriter: void flush()>"->"(87)<sortpom.util.StringLineSeparatorWriter: void flush()>";
    "(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>"->"(39)<sortpom.util.StringLineSeparatorWriter: void close()>";
    "(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>"->"(38)<sortpom.util.NoSpaceBeforeCloseWriter: void close()>";
    "(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>"->"(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>";
    "(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>"->"<java.lang.Object: java.lang.String toString()>";
    "(43)<sortpom.util.NoSpaceBeforeCloseWriter: java.lang.String toString()>"->"(77)<sortpom.util.StringLineSeparatorWriter: java.lang.String toString()>";
    "(48)<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>"->"(72)<sortpom.util.StringLineSeparatorWriter: void clearLineBuffer()>";
    "(48)<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>"->"(48)<sortpom.util.NoSpaceBeforeCloseWriter: void clearLineBuffer()>";
    "<org.jdom.Comment: void <init>()>"
    "(13)<sortpom.jdomcontent.NewlineText: void <init>()>"->"<org.jdom.Comment: void <init>()>";
    "(14)<sortpom.ViolationXmlProcessor: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<org.jdom.Element: void <init>(java.lang.String)>"
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"->"<org.jdom.Element: void <init>(java.lang.String)>";
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"->"<org.jdom.Element: void <init>(java.lang.String)>";
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"->"<java.io.File: java.lang.String getAbsolutePath()>";
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"->"<org.jdom.Element: void <init>(java.lang.String)>";
    "<org.jdom.Document: void <init>(org.jdom.Element)>"
    "(16)<sortpom.ViolationXmlProcessor: org.jdom.Document createViolationXmlContent(java.io.File,java.lang.String)>"->"<org.jdom.Document: void <init>(org.jdom.Element)>";
    "(26)<sortpom.XmlProcessor: void <init>(sortpom.wrapper.operation.WrapperFactory)>"->"<java.lang.Object: void <init>()>";
    "(39)<sortpom.XmlProcessor: void setOriginalXml(java.io.InputStream)>"->"<org.jdom.input.SAXBuilder: void <init>()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"<org.jdom.Document: org.jdom.Element getRootElement()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(56)<sortpom.wrapper.WrapperFactoryImpl: sortpom.wrapper.operation.HierarchyRootWrapper createFromRootElement(org.jdom.Element)>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(17)<sortpom.wrapper.operation.HierarchyRootWrapper: void createWrappedStructure(sortpom.wrapper.operation.WrapperFactory)>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(37)<sortpom.wrapper.operation.HierarchyRootWrapper: void detachStructure()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(22)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureAttributes()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(27)<sortpom.wrapper.operation.HierarchyRootWrapper: void sortStructureElements()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(32)<sortpom.wrapper.operation.HierarchyRootWrapper: void connectXmlStructure()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(42)<sortpom.wrapper.operation.HierarchyRootWrapper: sortpom.wrapper.content.Wrapper getElementContent()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(29)<sortpom.wrapper.content.UnsortedWrapper: org.jdom.Content getContent()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(11)<sortpom.wrapper.content.SingleNewlineInTextWrapper: org.jdom.Content getContent()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(11)<sortpom.wrapper.content.SortedWrapper: org.jdom.Content getContent()>";
    "(45)<sortpom.XmlProcessor: void sortXml()>"->"(11)<sortpom.wrapper.content.AlphabeticalSortedWrapper: org.jdom.Content getContent()>";
    "(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>"->"<org.jdom.Document: org.jdom.Element getRootElement()>";
    "(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>"->"<org.jdom.Document: org.jdom.Element getRootElement()>";
    "(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>"->"(16)<sortpom.verify.ElementComparator: void <init>(org.jdom.Element,org.jdom.Element)>";
    "(64)<sortpom.XmlProcessor: sortpom.util.XmlOrderedResult isXmlOrdered()>"->"(22)<sortpom.verify.ElementComparator: sortpom.util.XmlOrderedResult isElementOrdered()>";
    "<sortpom.wrapper.operation.SortAttributesOperation$detach__1: void <init>()>"
    "<sortpom.wrapper.operation.SortAttributesOperation$detach__1: java.util.function.Consumer bootstrap$()>"->"<sortpom.wrapper.operation.SortAttributesOperation$detach__1: void <init>()>";
    "<sortpom.wrapper.operation.SortAttributesOperation$detach__1: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.operation.SortAttributesOperation$getName__2: void <init>()>"
    "<sortpom.wrapper.operation.SortAttributesOperation$getName__2: java.util.function.Function bootstrap$()>"->"<sortpom.wrapper.operation.SortAttributesOperation$getName__2: void <init>()>";
    "<sortpom.wrapper.operation.SortAttributesOperation$getName__2: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void <init>(sortpom.wrapper.operation.HierarchyWrapperOperation)>"
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: java.util.function.Consumer bootstrap$(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void <init>(sortpom.wrapper.operation.HierarchyWrapperOperation)>";
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void <init>(sortpom.wrapper.operation.HierarchyWrapperOperation)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void accept(java.lang.Object)>"
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void accept(java.lang.Object)>"->"(44)<sortpom.wrapper.operation.ToStringOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>";
    "(25)<sortpom.wrapper.operation.HierarchyWrapperOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>"
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void accept(java.lang.Object)>"->"(25)<sortpom.wrapper.operation.HierarchyWrapperOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>";
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void accept(java.lang.Object)>"->"(29)<sortpom.wrapper.operation.GetContentStructureOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>";
    "<sortpom.wrapper.operation.HierarchyWrapper$processOtherContent__3: void accept(java.lang.Object)>"->"(18)<sortpom.wrapper.operation.DetachOperation: void processOtherContent(sortpom.wrapper.content.Wrapper)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: void <init>(sortpom.wrapper.content.ChildElementSorter)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: void <init>(sortpom.wrapper.content.ChildElementSorter)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: void <init>(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: void accept(java.lang.Object)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_0__4: void accept(java.lang.Object)>"->"(27)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$0(java.lang.String)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: void <init>(sortpom.wrapper.content.ChildElementSorter)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: java.util.function.Consumer bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: void <init>(sortpom.wrapper.content.ChildElementSorter)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: void <init>(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: void accept(java.lang.Object)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_new_1__5: void accept(java.lang.Object)>"->"(30)<sortpom.wrapper.content.ChildElementSorter: void lambda$new$1(org.jdom.Element)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: void <init>(sortpom.wrapper.content.ChildElementSorter)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: void <init>(sortpom.wrapper.content.ChildElementSorter)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_2__6: void <init>(sortpom.wrapper.content.ChildElementSorter)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: void <init>(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.util.function.Function bootstrap$(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: void <init>(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: void <init>(sortpom.wrapper.content.ChildElementSorter,java.util.function.Function)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_3__7: java.lang.Object apply(java.lang.Object)>"->"(41)<sortpom.wrapper.content.ChildElementSorter: java.lang.Integer lambda$compareTo$3(java.util.function.Function,java.util.Map$Entry)>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: void <init>()>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: java.util.function.Predicate bootstrap$()>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_compareTo_4__8: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: void <init>()>"
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: java.util.function.BiFunction bootstrap$()>"->"<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: void <init>()>";
    "<sortpom.wrapper.content.ChildElementSorter$lambda_emptyGroupIdIsFilledWithDefaultMavenGroupId_5__9: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: void <init>()>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: java.util.function.Predicate bootstrap$()>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_0__10: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: void <init>()>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: java.util.function.Function bootstrap$()>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_1__11: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: void <init>()>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: java.util.function.Predicate bootstrap$()>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$lambda_new_2__12: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: void <init>()>"
    "<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: java.util.function.Function bootstrap$()>"->"<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: void <init>()>";
    "<sortpom.wrapper.content.ExecutionSortedWrapper$getTextTrim__13: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: void <init>(java.lang.String)>"
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: java.util.function.Predicate bootstrap$(java.lang.String)>"->"<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: void <init>(java.lang.String)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$lambda_getPhase_0__14: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: void <init>(java.lang.Class)>"
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.util.function.Function bootstrap$(java.lang.Class)>"->"<sortpom.wrapper.content.Phase$StandardPhase$cast__15: void <init>(java.lang.Class)>";
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: void <init>(java.lang.Class)>"->"<java.lang.Object: void <init>()>";
    "<java.lang.Class: java.lang.Object cast(java.lang.Object)>"
    "<sortpom.wrapper.content.Phase$StandardPhase$cast__15: java.lang.Object apply(java.lang.Object)>"->"<java.lang.Class: java.lang.Object cast(java.lang.Object)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: void <init>(java.lang.String)>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: java.util.function.Predicate bootstrap$(java.lang.String)>"->"<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: void <init>(java.lang.String)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_0__16: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: void <init>(java.lang.String)>"
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: java.util.function.Supplier bootstrap$(java.lang.String)>"->"<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: void <init>(java.lang.String)>";
    "<sortpom.parameter.VerifyFailOnType$lambda_fromString_1__17: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: void <init>(sortpom.util.FileUtil)>"
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: sortpom.util.CheckedSupplier bootstrap$(sortpom.util.FileUtil)>"->"<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: void <init>(sortpom.util.FileUtil)>";
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: void <init>(sortpom.util.FileUtil)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.util.FileUtil$lambda_getDefaultSortOrderXml_0__18: java.lang.Object get()>"->"(145)<sortpom.util.FileUtil: java.io.InputStream lambda$getDefaultSortOrderXml$0()>";
    "<sortpom.util.FileUtil$getClassLoader__19: void <init>()>"
    "<sortpom.util.FileUtil$getClassLoader__19: java.util.function.Function bootstrap$()>"->"<sortpom.util.FileUtil$getClassLoader__19: void <init>()>";
    "<sortpom.util.FileUtil$getClassLoader__19: void <init>()>"->"<java.lang.Object: void <init>()>";
    "<sortpom.util.FileUtil$getClassLoader__19: java.lang.Object apply(java.lang.Object)>"->"<java.lang.Class: java.lang.ClassLoader getClassLoader()>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: void <init>(java.lang.String)>"
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: java.util.function.Function bootstrap$(java.lang.String)>"->"<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: void <init>(java.lang.String)>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_1__20: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: void <init>(java.lang.String)>"
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: java.util.function.Supplier bootstrap$(java.lang.String)>"->"<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: void <init>(java.lang.String)>";
    "<sortpom.util.FileUtil$lambda_getPredefinedSortOrder_2__21: void <init>(java.lang.String)>"->"<java.lang.Object: void <init>()>";
}
