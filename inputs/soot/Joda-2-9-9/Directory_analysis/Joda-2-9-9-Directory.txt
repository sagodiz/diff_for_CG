122 449
122 480
122 357
122 123
122 256
122 124
122 126
122 251
122 245
122 250
122 243
122 242
122 248
122 211
122 3395
122 249
122 389
122 236
122 253
122 459
122 254
221 java.lang.Object.clinit()
221 java.util.HashMap.clinit()
221 222
221 235
221 java.util.HashMap()
502 java.lang.Object.clinit()
502 java.util.Collections.unmodifiableMap(java.util.Map)
502 java.util.HashMap.clinit()
502 java.util.HashMap.put(java.lang.Object,java.lang.Object)
502 java.util.Collections.clinit()
502 java.util.HashMap()
1368 java.lang.Object.clinit()
1368 org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
1368 3348
1368 1082
1368 3383
1368 org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
1368 org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
1368 org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
1368 1369
158 java.lang.Object.clinit()
158 org.joda.time.DateTimeFieldType.clinit()
252 175
2196 2023
2196 java.lang.Object.clinit()
2196 656
2440 java.lang.String.length()
1324 3511
1324 2228
1324 1462
1324 2086
1324 org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale)
1324 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale)
1324 2319
1324 1612
1324 1497
1324 1326
1324 1194
1324 org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)
1324 1423
1324 1442
1324 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale)
1324 1325
1324 3423
3680 java.lang.Object()
31 5
org.joda.time.chrono.IslamicChronology.getYearDifference(long,long) 294
org.joda.time.chrono.IslamicChronology.getYearDifference(long,long) 3286
org.joda.time.convert.CalendarConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.CalendarConverter.clinit() org.joda.time.convert.CalendarConverter.clinit()
org.joda.time.convert.CalendarConverter.clinit() 842
1468 java.lang.Object.clinit()
1468 145
1468 org.joda.time.DateTimeFieldType.clinit()
1468 java.lang.Throwable.clinit()
1468 3230
1468 java.lang.Integer.intValue()
1468 java.util.TreeMap.get(java.lang.Object)
2275 java.util.JapaneseImperialCalendar.getTimeZone()
2275 java.lang.Object.clinit()
2275 java.util.GregorianCalendar.getTimeZone()
2275 498
2275 org.joda.time.DateTimeZone.clinit()
2275 2276
2275 499
2275 java.util.Calendar.getTimeZone()
org.joda.time.format.DateTimeFormat$StyleFormatter.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.format.DateTimeFormat$StyleFormatter.clinit() org.joda.time.format.DateTimeFormat$StyleFormatter.clinit()
org.joda.time.format.DateTimeFormat$StyleFormatter.clinit() java.lang.Object.clinit()
org.joda.time.format.DateTimeFormat$StyleFormatter.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.BaseChronology.clockhourOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.clockhourOfDay() 173
org.joda.time.chrono.BaseChronology.clockhourOfDay() 79
org.joda.time.chrono.BaseChronology.clockhourOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.clockhourOfDay() 1201
org.joda.time.chrono.BaseChronology.clockhourOfDay() org.joda.time.chrono.BaseChronology.hours()
3274 3401
3274 3274
3274 3235
3274 1366
3274 org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
3274 org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
3274 org.joda.time.field.DividedDateTimeField.getDifference(long,long)
3274 3275
3274 org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
3274 1666
3274 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
3274 424
3274 1367
3274 org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
1800 java.lang.String.clinit()
1800 java.lang.Object.clinit()
2503 java.util.jar.JarFile$4.nextElement()
2503 java.util.concurrent.ConcurrentHashMap$HashIterator.hasMoreElements()
2503 sun.misc.CompoundEnumeration.hasMoreElements()
2503 java.util.StringTokenizer.nextElement()
2503 java.util.concurrent.ConcurrentHashMap$KeyIterator.nextElement()
2503 com.sun.naming.internal.VersionHelper12$InputStreamEnumeration.nextElement()
2503 java.lang.ClassLoader$2.hasMoreElements()
2503 java.net.NetworkInterface$1.hasMoreElements()
2503 java.util.StringTokenizer.hasMoreElements()
2503 java.util.Vector$1.nextElement()
2503 java.security.AllPermissionCollection$1.nextElement()
2503 java.lang.String.equals(java.lang.Object)
2503 java.util.jar.JarFile$3.hasMoreElements()
2503 java.lang.ClassLoader$2.nextElement()
2503 java.util.ResourceBundle$1.getKeys()
2503 java.util.Collections$EmptyEnumeration.hasMoreElements()
2503 java.util.concurrent.ConcurrentHashMap$ValueIterator.nextElement()
2503 java.util.Hashtable$Enumerator.nextElement()
2503 java.util.jar.JarFile$1.hasMoreElements()
2503 sun.misc.URLClassPath$1.nextElement()
2503 java.security.PermissionsEnumerator.nextElement()
2503 sun.util.ResourceBundleEnumeration.hasMoreElements()
2503 java.security.PermissionsEnumerator.hasMoreElements()
2503 java.util.jar.JarVerifier$1.nextElement()
2503 java.net.NetworkInterface$1.nextElement()
2503 java.util.jar.JarVerifier$4.hasMoreElements()
2503 java.net.NetworkInterface$1checkedAddresses.hasMoreElements()
2503 java.util.jar.JarFile$2.hasMoreElements()
2503 java.util.Collections$2.nextElement()
2503 sun.misc.URLClassPath$2.nextElement()
2503 java.util.PropertyResourceBundle.getKeys()
2503 java.util.jar.JarFile$4.hasMoreElements()
2503 com.sun.naming.internal.VersionHelper12$InputStreamEnumeration.hasMoreElements()
2503 java.util.jar.JarVerifier$2.hasMoreElements()
2503 java.util.jar.JarVerifier$2.nextElement()
2503 java.net.NetworkInterface$1subIFs.nextElement()
2503 sun.misc.URLClassPath$2.hasMoreElements()
2503 java.util.Hashtable$Enumerator.hasMoreElements()
2503 java.net.NetworkInterface$1checkedAddresses.nextElement()
2503 java.util.jar.JarVerifier$3.nextElement()
2503 javax.naming.NameImplEnumerator.nextElement()
2503 java.util.jar.JarVerifier$3.hasMoreElements()
2503 java.util.zip.ZipFile$1.nextElement()
2503 sun.misc.URLClassPath$1.hasMoreElements()
2503 java.util.Collections$2.hasMoreElements()
2503 java.net.NetworkInterface$1subIFs.hasMoreElements()
2503 java.security.AllPermissionCollection$1.hasMoreElements()
2503 java.util.Collections$EmptyEnumeration.nextElement()
2503 sun.util.ResourceBundleEnumeration.nextElement()
2503 java.util.jar.JarFile$3.nextElement()
2503 java.util.jar.JarFile$1.nextElement()
2503 sun.misc.CompoundEnumeration.nextElement()
2503 java.net.URLClassLoader$3.hasMoreElements()
2503 java.net.URLClassLoader$3.nextElement()
2503 java.util.jar.JarVerifier$4.nextElement()
2503 java.util.jar.JarFile$2.nextElement()
2503 java.util.Vector$1.hasMoreElements()
2503 java.util.jar.JarVerifier$1.hasMoreElements()
2503 java.util.zip.ZipFile$1.hasMoreElements()
2503 javax.naming.NameImplEnumerator.hasMoreElements()
1848 java.lang.Object.clinit()
1848 org.joda.time.PeriodType.clinit()
1848 1846
790 java.lang.Object.clinit()
790 3126
790 java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])
790 java.lang.String.equals(java.lang.Object)
790 java.util.Arrays.equals(long[],long[])
790 java.util.Arrays.clinit()
790 36
790 java.util.Arrays.equals(int[],int[])
3067 java.lang.Object.clinit()
3067 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2652 java.lang.String.clinit()
2652 java.lang.Object.clinit()
2652 java.lang.StringBuilder()
2652 java.lang.String.valueOf(int)
2652 java.lang.StringBuilder.append(java.lang.String)
2652 java.lang.StringBuilder.toString()
2652 1808
3770 3175
1788 1769
147 java.lang.Object.clinit()
147 org.joda.time.DateTimeFieldType.clinit()
1092 1508
1092 1093
1092 2140
1092 1092
org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long) 3496
1256 289
1256 1103
1256 457
1256 992
1256 330
1256 342
1256 1104
1256 994
1256 org.joda.time.chrono.BaseChronology.monthOfYear()
1256 991
1256 384
1256 288
1256 3240
1256 329
1256 960
1256 3410
1256 334
1256 429
1256 1106
1256 290
1256 997
1256 371
1256 200
1256 995
1256 338
1256 993
1256 996
1437 java.lang.Object.clinit()
1437 org.joda.time.DateTimeFieldType.clinit()
1437 java.lang.Throwable.clinit()
1437 3230
1437 152
1437 java.lang.Integer.intValue()
1437 java.util.TreeMap.get(java.lang.Object)
3097 932
934 935
934 336
934 3288
934 3286
934 291
934 1382
3735 java.lang.Object.clinit()
3735 3734
3735 3736
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2031
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2030
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2118
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 644
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2025
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2028
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2114
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2026
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 3545
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
657 java.lang.Object.clinit()
657 658
657 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.chrono.ISOYearOfEraDateTimeField.clinit() org.joda.time.chrono.ISOYearOfEraDateTimeField.clinit()
org.joda.time.chrono.ISOYearOfEraDateTimeField.clinit() java.lang.Object.clinit()
org.joda.time.chrono.ISOYearOfEraDateTimeField.clinit() 210
230 231
230 230
230 70
230 org.joda.time.field.DelegatedDurationField.getUnitMillis()
230 239
230 225
230 246
230 388
230 68
1093 org.joda.time.chrono.BaseChronology.hourOfDay()
1093 417
1093 435
1093 455
1093 373
1093 1281
1093 187
1093 430
1093 189
1093 422
1093 1273
1093 2120
1093 182
1093 185
1093 379
1093 421
1093 org.joda.time.chrono.BaseChronology.millisOfSecond()
1093 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1093 org.joda.time.field.StrictDateTimeField.set(long,int)
1093 1275
1093 org.joda.time.chrono.BaseChronology.secondOfMinute()
1093 3439
1093 3513
1093 2119
1093 org.joda.time.chrono.BaseChronology.minuteOfHour()
1093 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1093 419
1093 420
1093 1277
1093 1379
994 1103
994 457
994 330
994 992
994 342
994 1104
994 994
994 991
994 384
994 3240
994 329
994 960
994 3410
994 334
994 429
994 1106
994 290
994 997
994 371
994 995
994 338
994 993
994 996
994 118
org.joda.time.chrono.BaseChronology.monthOfYear() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.monthOfYear() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.monthOfYear() org.joda.time.chrono.BaseChronology.months()
org.joda.time.chrono.BaseChronology.monthOfYear() 178
org.joda.time.chrono.BaseChronology.monthOfYear() 152
org.joda.time.chrono.BaseChronology.monthOfYear() 1201
932 294
932 290
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) 1397
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) 3436
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) 3352
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long) 118
org.joda.time.chrono.BaseChronology.hours() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.hours() 49
org.joda.time.chrono.BaseChronology.hours() 162
org.joda.time.chrono.BaseChronology.hours() org.joda.time.DurationFieldType.clinit()
888 474
3014 1145
737 java.io.PrintStream.append(java.lang.CharSequence)
737 org.joda.time.format.FormatUtils.clinit()
737 java.lang.StringBuffer.append(java.lang.CharSequence)
737 java.io.StringWriter.append(char)
737 java.lang.StringBuilder.append(java.lang.CharSequence)
737 java.io.PrintStream.append(char)
737 java.lang.StringBuffer.append(char)
737 java.io.Writer.append(java.lang.CharSequence)
737 java.io.PrintWriter.append(java.lang.CharSequence)
737 java.io.Writer.append(char)
737 java.lang.Object.clinit()
737 java.nio.CharBuffer.append(java.lang.CharSequence)
737 java.nio.CharBuffer.append(char)
737 java.lang.StringBuilder.append(char)
737 java.io.StringWriter.append(java.lang.CharSequence)
737 java.io.PrintWriter.append(char)
737 489
93 java.lang.String.hashCode()
93 36
1308 795
org.joda.time.field.DelegatedDurationField.add(long,int) 3397
org.joda.time.field.DelegatedDurationField.add(long,int) org.joda.time.field.DelegatedDurationField.add(long,int)
org.joda.time.field.DelegatedDurationField.add(long,int) 1111
org.joda.time.field.DelegatedDurationField.add(long,int) 1162
org.joda.time.field.DelegatedDurationField.add(long,int) 3382
org.joda.time.field.DelegatedDurationField.add(long,int) org.joda.time.field.DecoratedDurationField.add(long,int)
org.joda.time.field.DelegatedDurationField.add(long,int) 1062
org.joda.time.field.DelegatedDurationField.add(long,int) 901
org.joda.time.field.DelegatedDurationField.add(long,int) 896
org.joda.time.field.DelegatedDurationField.add(long,int) 1061
602 603
602 java.lang.Object.clinit()
602 org.joda.time.DateTimeFieldType.clinit()
602 152
org.joda.time.field.DividedDateTimeField.add(long,int) 1472
org.joda.time.field.DividedDateTimeField.add(long,int) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
org.joda.time.field.DividedDateTimeField.add(long,int) 3396
org.joda.time.field.DividedDateTimeField.add(long,int) 370
org.joda.time.field.DividedDateTimeField.add(long,int) 895
org.joda.time.field.DividedDateTimeField.add(long,int) 1112
org.joda.time.field.DividedDateTimeField.add(long,int) 1226
org.joda.time.field.DividedDateTimeField.add(long,int) 1350
org.joda.time.field.DividedDateTimeField.add(long,int) 1458
org.joda.time.field.DividedDateTimeField.add(long,int) org.joda.time.field.DividedDateTimeField.add(long,int)
org.joda.time.field.DividedDateTimeField.add(long,int) 900
org.joda.time.field.DividedDateTimeField.add(long,int) 3347
org.joda.time.field.DividedDateTimeField.add(long,int) 903
org.joda.time.field.DividedDateTimeField.add(long,int) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
org.joda.time.field.DividedDateTimeField.add(long,int) 3268
org.joda.time.field.DividedDateTimeField.add(long,int) 118
3232 java.lang.Object.clinit()
3232 org.joda.time.DateTimeFieldType.clinit()
3232 java.lang.Throwable.clinit()
3232 3230
3232 143
3232 java.lang.Integer.intValue()
3232 java.util.TreeMap.get(java.lang.Object)
693 505
693 java.lang.Object.clinit()
693 509
693 685
693 643
693 692
693 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
508 java.util.ArrayList.add(java.lang.Object)
617 java.lang.Object.clinit()
617 java.lang.Throwable.clinit()
617 618
617 java.lang.String.charAt(int)
617 java.lang.IllegalArgumentException(java.lang.String)
617 508
617 java.lang.String.length()
617 601
org.joda.time.field.DelegatedDateTimeField.getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) 3415
org.joda.time.field.DelegatedDateTimeField.getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) 2116
org.joda.time.field.DelegatedDateTimeField.getAsShortText(org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)
511 610
281 java.lang.Object.clinit()
281 891
281 java.util.Arrays.clinit()
281 java.util.Arrays.binarySearch(long[],long)
672 505
672 java.lang.Object.clinit()
672 509
672 643
672 670
672 656
672 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1515 1492
1515 1002
1515 3756
1515 265
1515 org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
1515 org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
1515 1512
1515 3296
1515 2016
1515 938
1515 275
1515 588
1515 org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
1515 386
1515 java.lang.Object.clinit()
1515 3239
1515 org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
1515 3295
1515 org.joda.time.DateTimeUtils.clinit()
1515 3265
1515 587
1515 1068
455 1338
455 417
455 435
455 455
455 114
455 36
455 276
455 373
455 1281
455 java.lang.Object.clinit()
455 430
455 422
455 1273
455 2120
455 java.lang.Integer.valueOf(int)
455 3355
455 java.lang.Throwable.getMessage()
455 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
455 421
455 379
455 457
455 java.lang.Integer.clinit()
455 java.lang.Throwable.clinit()
455 1335
455 org.joda.time.field.StrictDateTimeField.set(long,int)
455 1275
455 3439
455 3513
455 284
455 2119
455 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
455 419
455 420
455 java.lang.ThrowableCause(java.lang.Throwable)
455 1277
455 1379
455 404
1410 2228
1410 1211
1410 3424
1410 453
1410 1004
1410 1212
1410 3062
1410 2319
1410 213
1410 1497
1410 1435
1410 141
1410 409
1410 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
1410 407
1410 383
1410 2086
1410 133
1410 119
1410 436
1410 1411
1410 1612
1410 117
1410 2000
1410 1388
1410 408
1410 1194
530 java.lang.Object.clinit()
530 java.util.Arrays.sort(java.lang.Object[],int,int)
530 java.util.Arrays.clinit()
530 926
1985 342
1985 java.lang.StringBuilder.append(java.lang.Object)
1985 960
1985 3410
1985 732
1985 java.lang.Object.clinit()
1985 429
1985 java.lang.StringBuilder()
1985 997
1985 371
1985 995
1985 338
1985 996
1985 289
1985 1103
1985 457
1985 1986
1985 330
1985 992
1985 java.lang.Throwable.clinit()
1985 994
1985 1104
1985 java.lang.IllegalArgumentException(java.lang.String)
1985 991
1985 384
1985 288
1985 java.lang.StringBuilder.toString()
1985 3240
1985 329
1985 334
1985 1106
1985 290
1985 java.lang.StringBuilder.append(java.lang.String)
1985 993
351 294
351 477
351 341
351 554
3378 java.lang.Object.clinit()
3378 java.lang.StringBuilder()
3378 java.lang.StringBuilder.append(char)
3378 java.lang.StringBuilder.append(java.lang.String)
3378 2595
3378 java.lang.StringBuilder.toString()
663 505
663 java.lang.Object.clinit()
663 653
663 509
663 643
663 656
663 641
663 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1471 3291
1471 1447
1471 3243
1471 3264
2047 732
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 3401
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 3274
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 1366
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 3275
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 1666
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 1367
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
701 java.lang.Object.clinit()
701 3567
489 java.io.PrintStream.append(java.lang.CharSequence)
489 java.lang.Integer.clinit()
489 java.lang.StringBuffer.append(java.lang.CharSequence)
489 org.joda.time.format.FormatUtils.clinit()
489 java.io.StringWriter.append(char)
489 java.lang.StringBuilder.append(java.lang.CharSequence)
489 java.io.PrintStream.append(char)
489 java.lang.StringBuffer.append(char)
489 java.io.Writer.append(java.lang.CharSequence)
489 java.io.PrintWriter.append(java.lang.CharSequence)
489 java.lang.Integer.toString(int)
489 java.lang.Object.clinit()
489 java.io.Writer.append(char)
489 java.lang.Math.log(double)
489 java.nio.CharBuffer.append(java.lang.CharSequence)
489 java.lang.StringBuilder.append(char)
489 java.nio.CharBuffer.append(char)
489 java.lang.Math.clinit()
489 java.io.StringWriter.append(java.lang.CharSequence)
489 java.io.PrintWriter.append(char)
670 505
670 java.lang.Object.clinit()
670 509
670 643
670 641
670 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
670 668
614 505
614 java.lang.Object.clinit()
614 509
614 615
614 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
447 81
447 114
447 404
447 3355
1454 1149
1454 1457
1454 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1454 364
1454 932
1454 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1454 1150
1454 1454
1454 3341
1454 365
1454 3514
1454 3496
1454 1455
1454 1593
1454 934
1454 118
1454 3435
1454 286
1454 1648
org.joda.time.field.MillisDurationField.clinit() java.lang.Object.clinit()
org.joda.time.field.MillisDurationField.clinit() 40
org.joda.time.field.MillisDurationField.clinit() org.joda.time.field.MillisDurationField.clinit()
3184 sun.util.PreHashedMap$1$1.next()
3184 214
3184 342
3184 javax.security.auth.Subject$SecureSet$1.next()
3184 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
3184 sun.net.www.MessageHeader$HeaderIterator.next()
3184 sun.util.PreHashedMap$2$1.next()
3184 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
3184 java.lang.ProcessEnvironment$StringKeySet$1.remove()
3184 sun.net.www.HeaderParser$ParserIterator.hasNext()
3184 java.util.concurrent.ArrayBlockingQueue$Itr.next()
3184 java.util.Collections$UnmodifiableCollection$1.remove()
3184 sun.util.PreHashedMap$1$1.remove()
3184 java.util.JumboEnumSet$EnumSetIterator.next()
3184 java.util.LinkedList$ListItr.hasNext()
3184 java.util.ServiceLoader$LazyIterator.next()
3184 java.util.Collections$CheckedMap$CheckedEntrySet$1.remove()
3184 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
3184 java.util.concurrent.LinkedBlockingDeque$AbstractItr.remove()
3184 java.util.Collections$EmptyIterator.remove()
3184 384
3184 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
3184 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
3184 java.util.LinkedList$DescendingIterator.hasNext()
3184 java.util.JumboEnumSet$EnumSetIterator.hasNext()
3184 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
3184 java.util.LinkedList$DescendingIterator.next()
3184 sun.util.PreHashedMap$2$1.hasNext()
3184 java.util.Collections$1.remove()
3184 java.util.WeakHashMap$HashIterator.hasNext()
3184 java.util.ServiceLoader$1.remove()
3184 java.util.LinkedHashMap$EntryIterator.next()
3184 java.util.IdentityHashMap$KeyIterator.next()
3184 960
3184 java.util.IdentityHashMap$ValueIterator.next()
3184 org.joda.time.chrono.ISOChronology.clinit()
3184 java.util.AbstractMap$1$1.hasNext()
3184 java.util.TreeMap$PrivateEntryIterator.remove()
3184 457
3184 992
3184 java.util.ArrayDeque$DescendingIterator.hasNext()
3184 994
3184 java.util.Hashtable$Enumerator.next()
3184 java.util.HashMap$EntryIterator.next()
3184 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
3184 javax.security.auth.Subject$SecureSet$1.hasNext()
3184 sun.net.www.MessageHeader$HeaderIterator.remove()
3184 java.util.Collections$UnmodifiableList$1.next()
3184 sun.nio.cs.FastCharsetProvider$1.next()
3184 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
3184 java.util.AbstractList$Itr.remove()
3184 java.util.Collections$CheckedList$1.hasNext()
3184 java.util.Vector$Itr.next()
3184 java.util.concurrent.ArrayBlockingQueue$Itr.remove()
3184 java.util.ArrayList$SubList$1.next()
3184 java.util.HashMap$HashIterator.remove()
3184 java.util.HashMap$ValueIterator.next()
3184 sun.misc.SoftCache$EntrySet$1.hasNext()
3184 java.util.ArrayList$SubList$1.hasNext()
3184 1104
3184 java.util.ArrayDeque$DescendingIterator.remove()
3184 sun.net.www.HeaderParser$ParserIterator.remove()
3184 java.util.WeakHashMap$HashIterator.remove()
3184 3185
3184 329
3184 java.util.AbstractMap$1$1.remove()
3184 3240
3184 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
3184 334
3184 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
3184 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
3184 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
3184 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
3184 java.nio.charset.Charset$1.remove()
3184 sun.net.www.HeaderParser$ParserIterator.next()
3184 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
3184 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.remove()
3184 sun.nio.cs.FastCharsetProvider$1.hasNext()
3184 sun.nio.fs.AbstractPath$1.next()
3184 java.util.LinkedHashMap$LinkedHashIterator.remove()
3184 java.util.LinkedList$ListItr.next()
3184 java.util.Collections$EmptyIterator.hasNext()
3184 java.util.Collections$CheckedList$1.remove()
3184 java.util.Scanner.next()
3184 java.util.Collections$CheckedCollection$1.hasNext()
3184 java.util.ArrayDeque$DescendingIterator.next()
3184 sun.misc.Service$LazyIterator.remove()
3184 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
3184 java.util.Vector$Itr.remove()
3184 java.util.LinkedHashMap$KeyIterator.next()
3184 java.lang.ProcessEnvironment$StringEntrySet$1.remove()
3184 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
3184 sun.nio.fs.UnixFileSystem$FileStoreIterator.remove()
3184 995
3184 java.util.Collections$CheckedList$1.next()
3184 java.util.ArrayList.iterator()
3184 java.util.AbstractMap$2$1.remove()
3184 java.util.Collections$1.next()
3184 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
3184 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
3184 java.util.ArrayDeque$DeqIterator.hasNext()
3184 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
3184 java.util.concurrent.LinkedBlockingQueue$Itr.next()
3184 java.util.IdentityHashMap$EntryIterator.remove()
3184 java.util.Hashtable$Enumerator.remove()
3184 java.lang.ProcessEnvironment$StringEntrySet$1.next()
3184 201
3184 java.util.LinkedList$ListItr.remove()
3184 sun.util.PreHashedMap$1$1.hasNext()
3184 java.util.ArrayList$Itr.remove()
3184 java.lang.ProcessEnvironment$StringValues$1.next()
3184 java.util.WeakHashMap$EntryIterator.next()
3184 java.util.AbstractMap$1$1.next()
3184 org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit()
3184 371
3184 java.lang.ProcessEnvironment$StringKeySet$1.next()
3184 338
3184 java.util.TreeMap$DescendingKeyIterator.next()
3184 java.util.TreeMap$PrivateEntryIterator.hasNext()
3184 java.util.Collections$CheckedCollection$1.remove()
3184 sun.misc.Service$LazyIterator.next()
3184 3186
3184 java.util.Scanner.hasNext()
3184 java.util.WeakHashMap$ValueIterator.next()
3184 java.util.IdentityHashMap$EntryIterator.next()
3184 java.util.ArrayDeque$DeqIterator.remove()
3184 3731
3184 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.remove()
3184 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.remove()
3184 java.util.Hashtable$Enumerator.hasNext()
3184 java.util.RegularEnumSet$EnumSetIterator.next()
3184 java.util.WeakHashMap$KeyIterator.next()
3184 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
3184 java.util.SubList$1.next()
3184 java.util.Collections$EmptyIterator.next()
3184 java.util.LinkedHashMap$ValueIterator.next()
3184 java.util.ServiceLoader$1.hasNext()
3184 javax.security.auth.Subject$SecureSet$1.remove()
3184 java.util.TreeMap$ValueIterator.next()
3184 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
3184 java.util.AbstractMap$2$1.hasNext()
3184 sun.nio.fs.AbstractPath$1.hasNext()
3184 java.lang.ProcessEnvironment$StringValues$1.hasNext()
3184 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.remove()
3184 java.util.TreeMap$EntryIterator.next()
3184 330
3184 java.util.concurrent.ConcurrentLinkedQueue$Itr.remove()
3184 java.lang.ProcessEnvironment$StringValues$1.remove()
3184 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.remove()
3184 991
3184 sun.security.jca.ProviderList$ServiceList$1.remove()
3184 java.util.Collections$UnmodifiableList$1.hasNext()
3184 290
3184 java.util.SubList$1.remove()
3184 java.util.ArrayList$Itr.hasNext()
3184 java.nio.charset.Charset$1.hasNext()
3184 993
3184 java.util.RegularEnumSet$EnumSetIterator.remove()
3184 java.util.Collections$UnmodifiableCollection$1.next()
3184 sun.misc.SoftCache$EntrySet$1.remove()
3184 java.util.TreeMap$KeyIterator.next()
3184 java.util.SubList$1.hasNext()
3184 429
3184 java.util.Scanner.remove()
3184 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.remove()
3184 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
3184 java.util.Collections$UnmodifiableCollection$1.hasNext()
3184 java.util.RegularEnumSet$EnumSetIterator.hasNext()
3184 sun.misc.SoftCache$EntrySet$1.next()
3184 java.util.HashMap$KeyIterator.next()
3184 sun.security.jca.ProviderList$ServiceList$1.hasNext()
3184 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
3184 java.util.LinkedList$DescendingIterator.remove()
3184 java.util.ServiceLoader$LazyIterator.remove()
3184 java.util.Collections$1.hasNext()
3184 java.util.ArrayList$Itr.next()
3184 java.util.IdentityHashMap$IdentityHashMapIterator.remove()
3184 java.util.JumboEnumSet$EnumSetIterator.remove()
3184 1106
3184 java.util.AbstractMap$2$1.next()
3184 java.util.ServiceLoader$1.next()
3184 java.util.concurrent.ConcurrentHashMap$HashIterator.remove()
3184 sun.nio.cs.FastCharsetProvider$1.remove()
3184 java.util.concurrent.LinkedBlockingQueue$Itr.remove()
3184 java.util.ArrayList$SubList$1.remove()
3184 sun.security.jca.ProviderList$ServiceList$1.next()
3184 sun.util.PreHashedMap$2$1.remove()
3184 java.util.ServiceLoader$LazyIterator.hasNext()
3184 java.util.Collections$UnmodifiableList$1.remove()
3184 java.util.ArrayDeque$DeqIterator.next()
3184 java.util.Vector$Itr.hasNext()
3184 3410
3184 java.lang.Object.clinit()
3184 java.util.Collections$CheckedCollection$1.next()
3184 997
3184 java.util.AbstractList$Itr.next()
3184 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
3184 996
3184 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
3184 sun.misc.Service$LazyIterator.hasNext()
3184 java.nio.charset.Charset$1.next()
3184 1103
3184 sun.net.www.MessageHeader$HeaderIterator.hasNext()
3184 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
3184 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
3184 sun.nio.fs.AbstractPath$1.remove()
3184 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
3184 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.remove()
3184 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
3184 java.util.HashMap$HashIterator.hasNext()
3184 java.util.AbstractList$Itr.hasNext()
334 335
334 1296
117 383
117 407
117 1211
117 133
117 3424
117 119
117 436
117 1004
117 453
117 1411
117 1212
117 3062
117 213
117 117
117 1388
117 2000
117 408
117 1435
117 141
117 409
117 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
117 118
1262 1057
1262 1262
1262 415
1262 java.lang.Object.clinit()
1262 473
1262 550
1262 416
1262 java.lang.Throwable.clinit()
1262 103
1262 java.lang.IllegalArgumentException(java.lang.String)
1262 538
1262 887
1262 3115
1262 888
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 3416
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 3259
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 3509
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 1440
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 1316
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 1417
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 3279
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 1460
org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale) 1419
350 java.lang.Object.clinit()
350 297
350 org.joda.time.chrono.BasicGJChronology.clinit()
350 org.joda.time.chrono.BasicChronology.clinit()
350 337
3149 3147
3074 2049
3677 1788
3677 1779
3677 org.joda.time.format.PeriodFormatterBuilder.clinit()
3677 1768
3677 2506
3677 org.joda.time.format.PeriodFormat.clinit()
3677 2505
3677 java.util.ResourceBundle.getString(java.lang.String)
3677 2510
3677 2508
3677 java.lang.Object.clinit()
3677 3678
3677 2509
3677 1778
3677 2503
3677 1787
3677 2512
3677 java.lang.String.split(java.lang.String)
3677 1790
3677 1761
3677 1780
730 3482
730 java.lang.UnsupportedOperationException()
730 3503
730 java.lang.Throwable.clinit()
730 3530
730 3525
730 733
730 3544
730 java.util.Locale.getDefault()
730 737
730 1237
730 731
730 java.lang.Object.clinit()
730 730
730 1251
730 java.util.Locale.clinit()
730 3519
730 3471
730 734
1988 51
1988 java.lang.Object.clinit()
1988 1989
1988 797
1988 109
1988 org.joda.time.DurationFieldType.clinit()
org.joda.time.chrono.LimitChronology$LimitException.toString() java.lang.Object.clinit()
org.joda.time.chrono.LimitChronology$LimitException.toString() java.lang.StringBuilder()
org.joda.time.chrono.LimitChronology$LimitException.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.chrono.LimitChronology$LimitException.toString() java.lang.StringBuilder.toString()
org.joda.time.chrono.LimitChronology$LimitException.toString() org.joda.time.chrono.LimitChronology$LimitException.getMessage()
1562 379
1562 421
1562 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1562 1492
1562 417
1562 435
1562 1275
1562 org.joda.time.field.StrictDateTimeField.set(long,int)
1562 455
1562 3439
1562 3513
1562 373
1562 2119
1562 1281
1562 1497
1562 430
1562 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1562 422
1562 419
1562 1273
1562 420
1562 2120
1562 587
1562 1277
1562 1379
3005 511
3005 512
218 495
218 java.lang.Throwable.clinit()
218 java.lang.IllegalArgumentException(java.lang.String)
218 385
218 753
218 219
218 478
218 220
218 1102
218 java.lang.Object.clinit()
218 2211
218 org.joda.time.chrono.ZonedChronology.withUTC()
218 2258
218 org.joda.time.chrono.LimitChronology.withUTC()
218 749
218 523
218 269
3179 java.lang.Object.clinit()
3179 30
3179 3180
3179 3181
3179 29
3179 3174
1613 587
276 1046
276 java.lang.Object.clinit()
276 277
276 java.lang.ArithmeticException(java.lang.String)
276 java.lang.Throwable.clinit()
276 285
276 905
276 283
884 java.lang.Object.clinit()
884 java.lang.StringBuilder()
884 java.lang.StringBuilder.append(char)
884 java.lang.String.charAt(int)
884 java.lang.StringBuilder.toString()
884 java.lang.String.length()
2025 org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 java.lang.UnsupportedOperationException()
2025 java.lang.Throwable.clinit()
2025 2031
2025 2030
2025 org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 2118
2025 java.util.Locale.getDefault()
2025 org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 2025
2025 java.lang.Object.clinit()
2025 2028
2025 2114
2025 2026
2025 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2025 java.util.Locale.clinit()
2025 org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
1799 sun.util.PreHashedMap$1$1.next()
1799 java.util.HashMap$EntrySet.iterator()
1799 java.util.HashSet.size()
1799 javax.security.auth.Subject$SecureSet$1.next()
1799 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
1799 3685
1799 java.util.AbstractMap$1$1.next()
1799 sun.net.www.MessageHeader$HeaderIterator.next()
1799 sun.util.PreHashedMap$2$1.next()
1799 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
1799 java.util.Hashtable$EntrySet.iterator()
1799 java.util.HashSet.clinit()
1799 java.util.IdentityHashMap$KeySet.iterator()
1799 sun.net.www.HeaderParser$ParserIterator.hasNext()
1799 java.util.concurrent.ArrayBlockingQueue$Itr.next()
1799 java.lang.String.equals(java.lang.Object)
1799 java.lang.ProcessEnvironment$StringKeySet$1.next()
1799 java.util.TreeMap$DescendingKeyIterator.next()
1799 java.util.concurrent.ConcurrentHashMap$EntrySet.iterator()
1799 java.util.JumboEnumSet$EnumSetIterator.next()
1799 java.util.TreeMap$PrivateEntryIterator.hasNext()
1799 java.util.LinkedList$ListItr.hasNext()
1799 java.util.ServiceLoader$LazyIterator.next()
1799 sun.misc.Service$LazyIterator.next()
1799 java.util.Hashtable$KeySet.iterator()
1799 java.util.Scanner.hasNext()
1799 java.util.WeakHashMap$ValueIterator.next()
1799 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
1799 java.util.IdentityHashMap$EntryIterator.next()
1799 java.util.concurrent.ConcurrentHashMap$KeySet.iterator()
1799 1800
1799 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
1799 java.util.Collections$CheckedCollection.iterator()
1799 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
1799 java.util.HashSet.iterator()
1799 sun.util.PreHashedMap$2.iterator()
1799 java.util.LinkedList$DescendingIterator.hasNext()
1799 java.util.Hashtable$Enumerator.hasNext()
1799 java.util.JumboEnumSet$EnumSetIterator.hasNext()
1799 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
1799 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator()
1799 java.util.RegularEnumSet$EnumSetIterator.next()
1799 java.util.LinkedList$DescendingIterator.next()
1799 java.util.WeakHashMap$KeyIterator.next()
1799 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
1799 java.util.JumboEnumSet.iterator()
1799 sun.util.PreHashedMap$1.iterator()
1799 sun.util.PreHashedMap$2$1.hasNext()
1799 java.util.SubList$1.next()
1799 java.util.Collections$EmptyIterator.next()
1799 java.util.Collections$SynchronizedCollection.iterator()
1799 java.util.LinkedHashMap$ValueIterator.next()
1799 java.util.HashSet()
1799 java.util.ServiceLoader$1.hasNext()
1799 java.util.RegularEnumSet.iterator()
1799 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
1799 java.util.TreeMap$ValueIterator.next()
1799 java.util.WeakHashMap$HashIterator.hasNext()
1799 java.util.IdentityHashMap$KeyIterator.next()
1799 java.util.LinkedHashMap$EntryIterator.next()
1799 java.util.AbstractMap$2$1.hasNext()
1799 java.util.IdentityHashMap$ValueIterator.next()
1799 java.util.AbstractCollection.toArray(java.lang.Object[])
1799 sun.nio.fs.AbstractPath$1.hasNext()
1799 java.lang.ProcessEnvironment$StringValues$1.hasNext()
1799 java.util.Collections$CheckedMap$CheckedEntrySet.iterator()
1799 java.util.AbstractMap$1$1.hasNext()
1799 java.util.WeakHashMap$KeySet.iterator()
1799 java.util.Collections$SetFromMap.iterator()
1799 java.util.TreeMap$EntryIterator.next()
1799 java.util.ArrayDeque$DescendingIterator.hasNext()
1799 java.util.Hashtable$Enumerator.next()
1799 3706
1799 java.util.HashMap$EntryIterator.next()
1799 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
1799 javax.security.auth.Subject$ClassSet.iterator()
1799 javax.security.auth.Subject$SecureSet$1.hasNext()
1799 java.lang.String.clinit()
1799 java.lang.ProcessEnvironment$StringKeySet.iterator()
1799 java.util.Collections$UnmodifiableList$1.hasNext()
1799 java.util.IdentityHashMap$EntrySet.iterator()
1799 java.util.ArrayList$Itr.hasNext()
1799 java.util.Collections$UnmodifiableList$1.next()
1799 java.nio.charset.Charset$1.hasNext()
1799 java.util.Collections$UnmodifiableCollection$1.next()
1799 sun.nio.cs.FastCharsetProvider$1.next()
1799 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
1799 java.util.Vector$Itr.next()
1799 java.util.Collections$CheckedList$1.hasNext()
1799 java.util.TreeMap$KeyIterator.next()
1799 java.util.ArrayList$SubList$1.next()
1799 java.util.Collections$UnmodifiableCollection.iterator()
1799 java.util.Collections$EmptySet.iterator()
1799 java.util.SubList$1.hasNext()
1799 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
1799 java.util.HashMap$ValueIterator.next()
1799 java.util.Collections$UnmodifiableCollection$1.hasNext()
1799 sun.misc.SoftCache$EntrySet$1.hasNext()
1799 java.util.TreeSet.iterator()
1799 java.util.RegularEnumSet$EnumSetIterator.hasNext()
1799 java.util.HashMap$KeyIterator.next()
1799 sun.misc.SoftCache$EntrySet$1.next()
1799 sun.security.jca.ProviderList$ServiceList$1.hasNext()
1799 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
1799 java.util.ArrayList$SubList$1.hasNext()
1799 java.util.Collections$1.hasNext()
1799 java.util.ArrayList$Itr.next()
1799 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
1799 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
1799 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
1799 java.util.AbstractMap$2$1.next()
1799 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
1799 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
1799 java.util.ServiceLoader$1.next()
1799 javax.security.auth.Subject$SecureSet.iterator()
1799 java.lang.ProcessEnvironment$StringEntrySet.iterator()
1799 sun.net.www.HeaderParser$ParserIterator.next()
1799 sun.nio.ch.Util$2.iterator()
1799 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
1799 sun.misc.SoftCache$EntrySet.iterator()
1799 sun.nio.cs.FastCharsetProvider$1.hasNext()
1799 sun.nio.fs.AbstractPath$1.next()
1799 sun.security.jca.ProviderList$ServiceList$1.next()
1799 java.util.LinkedList$ListItr.next()
1799 java.util.Collections$EmptyIterator.hasNext()
1799 java.util.ServiceLoader$LazyIterator.hasNext()
1799 java.util.Scanner.next()
1799 java.util.ArrayDeque$DeqIterator.next()
1799 java.util.Vector$Itr.hasNext()
1799 java.util.Collections$CheckedCollection$1.hasNext()
1799 java.util.HashSet.add(java.lang.Object)
1799 java.util.ArrayDeque$DescendingIterator.next()
1799 java.util.Collections$SingletonSet.iterator()
1799 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
1799 java.lang.Object.clinit()
1799 java.util.Collections$CheckedCollection$1.next()
1799 java.util.TreeMap$AscendingSubMap$AscendingEntrySetView.iterator()
1799 java.util.LinkedHashMap$KeyIterator.next()
1799 java.util.AbstractList$Itr.next()
1799 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
1799 java.util.Collections$CheckedList$1.next()
1799 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
1799 java.util.TreeMap$KeySet.iterator()
1799 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
1799 java.util.TreeMap$EntrySet.iterator()
1799 sun.misc.Service$LazyIterator.hasNext()
1799 java.nio.charset.Charset$1.next()
1799 sun.net.www.MessageHeader$HeaderIterator.hasNext()
1799 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
1799 java.util.Collections$1.next()
1799 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
1799 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
1799 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
1799 java.util.HashMap$KeySet.iterator()
1799 java.util.ArrayDeque$DeqIterator.hasNext()
1799 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
1799 java.util.concurrent.LinkedBlockingQueue$Itr.next()
1799 java.util.WeakHashMap$EntrySet.iterator()
1799 2511
1799 java.lang.String.equalsIgnoreCase(java.lang.String)
1799 java.lang.ProcessEnvironment$StringEntrySet$1.next()
1799 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
1799 sun.util.PreHashedMap$1$1.hasNext()
1799 java.util.TreeMap$DescendingSubMap$DescendingEntrySetView.iterator()
1799 java.lang.String.length()
1799 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
1799 java.util.HashMap$HashIterator.hasNext()
1799 java.util.AbstractMap$1.iterator()
1799 java.util.AbstractList$Itr.hasNext()
1799 java.util.WeakHashMap$EntryIterator.next()
1799 java.lang.ProcessEnvironment$StringValues$1.next()
3346 3346
3346 org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
3346 3306
3346 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
3346 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
3346 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
3346 3437
3346 118
3346 org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
3346 1432
1506 java.lang.Object.clinit()
1506 1002
1506 1013
1506 587
1506 268
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) 3714
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) 2443
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) 2516
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) 2518
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)
org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale) 2442
3741 214
3741 342
3741 1414
3741 org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
3741 960
3741 3410
3741 java.lang.Object.clinit()
3741 429
3741 org.joda.time.chrono.ISOChronology.clinit()
3741 3233
3741 1415
3741 997
3741 3495
3741 371
3741 200
3741 995
3741 338
3741 996
3741 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
3741 1103
3741 457
3741 330
3741 992
3741 1104
3741 994
3741 3441
3741 991
3741 384
3741 3240
3741 329
3741 org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
3741 334
3741 1106
3741 290
3741 993
3741 java.util.Locale.clinit()
3741 3231
1086 java.lang.Object.clinit()
1086 java.lang.StringBuilder()
1086 java.lang.ArithmeticException(java.lang.String)
1086 java.lang.Throwable.clinit()
1086 java.lang.StringBuilder.append(java.lang.String)
1086 java.lang.StringBuilder.toString()
1086 java.lang.StringBuilder.append(long)
1002 755
1002 304
1002 744
1002 522
1002 751
1002 747
1002 387
1002 302
1002 226
1002 207
1002 588
2926 1214
2926 3120
2926 1138
2926 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
2926 3071
2926 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
2926 2926
2926 3640
2926 3427
50 java.lang.Object.clinit()
50 org.joda.time.DurationFieldType.clinit()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 3346
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 3306
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 3437
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long) 1432
1402 java.lang.Object.clinit()
1402 java.lang.StringBuilder()
1402 1403
1402 java.lang.Throwable.clinit()
1402 java.lang.IllegalArgumentException(java.lang.String)
1402 java.lang.StringBuilder.append(java.lang.String)
1402 java.lang.StringBuilder.append(java.lang.Object)
1402 java.lang.StringBuilder.toString()
org.joda.time.base.BasePeriod.clinit() org.joda.time.base.BasePeriod.clinit()
org.joda.time.base.BasePeriod.clinit() 558
org.joda.time.base.BasePeriod.clinit() java.lang.Object.clinit()
2961 1145
3135 906
3135 3136
org.joda.time.chrono.BaseChronology.hourOfHalfday() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.hourOfHalfday() 173
org.joda.time.chrono.BaseChronology.hourOfHalfday() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.hourOfHalfday() 78
org.joda.time.chrono.BaseChronology.hourOfHalfday() 1201
org.joda.time.chrono.BaseChronology.hourOfHalfday() org.joda.time.chrono.BaseChronology.hours()
3404 3398
584 20
584 304
584 1040
584 3126
584 790
584 451
1816 51
1816 java.lang.Object.clinit()
1816 org.joda.time.PeriodType.clinit()
1816 567
1816 org.joda.time.DurationFieldType.clinit()
1217 2050
1217 417
1217 435
1217 1208
1217 455
1217 1966
1217 2647
1217 373
1217 1967
1217 1281
1217 2045
1217 2180
1217 732
1217 430
1217 2164
1217 422
1217 1273
1217 2645
1217 2120
1217 2638
1217 2636
1217 379
1217 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1217 1143
1217 421
1217 2019
1217 1215
1217 2304
1217 1275
1217 org.joda.time.field.StrictDateTimeField.set(long,int)
1217 3439
1217 2270
1217 1145
1217 3513
1217 2119
1217 2049
1217 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1217 419
1217 420
1217 1277
1217 1379
1217 1132
84 java.lang.Object.clinit()
84 org.joda.time.DateTimeFieldType.clinit()
3173 3178
3173 3174
3482 java.io.PrintStream.append(java.lang.CharSequence)
3482 java.nio.CharBuffer.append(java.lang.CharSequence)
3482 java.lang.StringBuffer.append(java.lang.CharSequence)
3482 3483
3482 java.io.StringWriter.append(java.lang.CharSequence)
3482 java.lang.StringBuilder.append(java.lang.CharSequence)
3482 java.io.Writer.append(java.lang.CharSequence)
3482 java.io.PrintWriter.append(java.lang.CharSequence)
506 java.lang.Object.clinit()
506 508
506 507
1385 1386
94 95
org.joda.time.format.DateTimeFormat.clinit() java.util.concurrent.atomic.AtomicReferenceArray(int)
org.joda.time.format.DateTimeFormat.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.format.DateTimeFormat.clinit() java.util.concurrent.atomic.AtomicReferenceArray.clinit()
org.joda.time.format.DateTimeFormat.clinit() java.lang.Object.clinit()
org.joda.time.format.DateTimeFormat.clinit() org.joda.time.format.DateTimeFormat.clinit()
org.joda.time.format.DateTimeFormat.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.convert.NullConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.NullConverter.clinit() org.joda.time.convert.NullConverter.clinit()
org.joda.time.convert.NullConverter.clinit() 848
1013 1014
1820 java.lang.Object.clinit()
1820 org.joda.time.PeriodType.clinit()
1820 1816
2447 java.lang.Math.abs(long)
2447 2449
2447 2520
2447 3708
2447 org.joda.time.format.FormatUtils.clinit()
2447 3691
2447 java.lang.StringBuffer.append(char)
2447 2436
2447 488
2447 java.lang.StringBuffer.length()
2447 java.lang.Object.clinit()
2447 java.lang.Math.clinit()
2447 java.lang.StringBuffer.insert(int,char)
2447 2448
893 894
2183 789
2183 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
2183 1173
2183 792
2183 1906
2183 java.lang.Object.equals(java.lang.Object)
2183 781
2183 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
2183 2272
2183 2018
2183 584
2183 988
2183 787
2183 1107
431 340
431 336
431 3288
431 1382
29 java.lang.Object.clinit()
29 java.lang.StringBuilder()
29 java.lang.Throwable.clinit()
29 java.lang.StringBuilder.append(char)
29 java.lang.IllegalArgumentException(java.lang.String)
29 java.lang.StringBuilder.append(java.lang.String)
29 java.lang.StringBuilder.toString()
29 java.lang.Object()
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.Throwable.getMessage()
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 778
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer.clinit()
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer(int)
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer.toString()
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer.append(java.lang.Object)
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer.append(char)
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 592
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.Object.clinit()
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 779
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 514
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 103
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 1900
org.joda.time.chrono.LimitChronology$LimitException.getMessage() 587
org.joda.time.chrono.LimitChronology$LimitException.getMessage() java.lang.StringBuffer.append(java.lang.String)
421 417
421 435
421 455
421 114
421 373
421 1281
421 java.lang.Object.clinit()
421 429
421 430
421 422
421 1273
421 2120
421 java.lang.Integer.valueOf(int)
421 1023
421 3355
421 379
421 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
421 421
421 java.lang.Throwable.clinit()
421 java.lang.Integer.clinit()
421 org.joda.time.field.StrictDateTimeField.set(long,int)
421 1275
421 3235
421 3439
421 3513
421 2119
421 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
421 423
421 419
421 420
421 1277
421 424
421 1379
421 404
421 org.joda.time.chrono.GJChronology.clinit()
3186 3188
3186 3187
3186 java.lang.Object()
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 3511
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 1462
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) java.lang.Math.max(int,int)
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) java.lang.Object.clinit()
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 1326
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 1423
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 1442
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) java.lang.Math.clinit()
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 1325
org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale) 3423
3143 3145
3143 3153
3143 3515
3143 3143
3143 3142
3143 3144
2510 1769
307 218
307 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
307 java.lang.Throwable.clinit()
307 308
307 java.lang.IllegalArgumentException(java.lang.String)
307 org.joda.time.chrono.JulianChronology.clinit()
307 java.lang.StringBuilder.toString()
307 java.lang.StringBuilder.append(int)
307 307
307 java.lang.Object.clinit()
307 java.lang.StringBuilder()
307 498
307 java.lang.StringBuilder.append(java.lang.String)
307 org.joda.time.DateTimeZone.clinit()
307 org.joda.time.chrono.BasicGJChronology.clinit()
307 org.joda.time.chrono.BasicChronology.clinit()
307 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
3104 1384
3104 java.lang.Object.hashCode()
45 java.lang.Object.clinit()
45 org.joda.time.DurationFieldType.clinit()
2639 java.lang.Object.clinit()
2639 org.joda.time.chrono.BasicGJChronology.clinit()
2639 org.joda.time.chrono.BasicChronology.clinit()
3466 java.lang.Object.equals(java.lang.Object)
3466 3466
3466 java.lang.Enum.equals(java.lang.Object)
388 231
388 230
388 70
388 org.joda.time.field.DelegatedDurationField.getUnitMillis()
388 239
388 246
388 388
388 68
1128 1129
1082 java.lang.Object.clinit()
1082 java.lang.StringBuilder()
1082 java.lang.ArithmeticException(java.lang.String)
1082 java.lang.Throwable.clinit()
1082 java.lang.StringBuilder.append(java.lang.String)
1082 java.lang.StringBuilder.toString()
1082 java.lang.StringBuilder.append(long)
534 466
328 426
328 org.joda.time.chrono.BaseChronology.dayOfMonth()
328 1219
328 342
328 1530
328 2216
328 184
328 960
328 3410
328 195
328 429
328 997
328 371
328 200
328 995
328 338
328 org.joda.time.chrono.BaseChronology.millisOfDay()
328 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
328 996
328 org.joda.time.chrono.BaseChronology.year()
328 457
328 1103
328 2002
328 330
328 992
328 994
328 1104
328 org.joda.time.chrono.BaseChronology.monthOfYear()
328 2138
328 991
328 384
328 3240
328 329
328 2001
328 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
328 334
328 1106
328 290
328 201
328 993
328 343
3148 3132
3148 486
3148 3137
3148 3134
3148 java.util.Locale.getDefault()
3148 1046
3148 java.lang.Object.clinit()
3148 277
3148 3135
3148 3149
3148 3739
3148 285
3148 3164
3148 3141
3148 org.joda.time.DateTimeZone.clinit()
3148 3166
3148 java.util.Locale.clinit()
3148 905
3148 283
2646 java.lang.Object.clinit()
2646 java.lang.StringBuilder()
2646 201
2646 java.lang.Throwable.clinit()
2646 org.joda.time.chrono.BaseChronology.monthOfYear()
2646 200
2646 java.lang.StringBuilder.append(java.lang.String)
2646 java.lang.StringBuilder.toString()
2646 java.lang.StringBuilder.append(int)
2646 java.lang.IndexOutOfBoundsException(java.lang.String)
2646 org.joda.time.chrono.BaseChronology.year()
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintStream.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.Object.clinit()
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.nio.CharBuffer.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuffer(int)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuffer.clinit()
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuffer.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.StringWriter.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuilder.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.Writer.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintWriter.append(java.lang.CharSequence)
org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 3501
627 603
627 java.lang.Object.clinit()
627 org.joda.time.DateTimeFieldType.clinit()
627 149
3501 3470
599 505
599 java.lang.Object.clinit()
599 602
599 509
599 600
599 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1040 java.lang.String.equals(java.lang.Object)
1040 36
662 505
662 java.lang.Object.clinit()
662 509
662 643
662 656
662 641
662 652
662 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3438 3406
97 100
97 98
3774 3179
910 911
2515 2516
2515 2515
2515 2433
2515 2435
2515 2434
2515 2441
762 767
762 org.joda.time.field.StrictDateTimeField.isLenient()
762 3445
762 768
762 763
762 765
762 762
762 1377
762 org.joda.time.chrono.GJChronology$CutoverField.isLenient()
762 1378
762 766
762 769
762 org.joda.time.field.LenientDateTimeField.isLenient()
org.joda.time.chrono.BaseChronology.halfdays() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.halfdays() 50
org.joda.time.chrono.BaseChronology.halfdays() 162
org.joda.time.chrono.BaseChronology.halfdays() org.joda.time.DurationFieldType.clinit()
1244 java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])
1244 java.lang.Object.clinit()
1244 java.text.DateFormatSymbols(java.util.Locale)
1244 java.lang.Class.getMethod(java.lang.String,java.lang.Class[])
1244 java.text.DateFormatSymbols.clinit()
1244 java.lang.Class.clinit()
1734 java.lang.Object.clinit()
1734 1735
1734 org.joda.time.format.FormatUtils.clinit()
1105 1103
1105 457
1105 330
1105 992
1105 342
1105 994
1105 1104
1105 991
1105 384
1105 3240
1105 329
1105 960
1105 3410
1105 334
1105 429
1105 1106
1105 290
1105 997
1105 371
1105 995
1105 338
1105 993
1105 996
1164 1084
1164 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1164 1081
748 325
3001 613
3001 643
3001 org.joda.time.DateTimeFieldType.clinit()
3001 java.lang.ProcessEnvironment$StringEntrySet.remove(java.lang.Object)
3001 java.util.HashMap$EntrySet.remove(java.lang.Object)
3001 sun.nio.ch.Util$2.remove(java.lang.Object)
3001 java.util.WeakHashMap$KeySet.remove(java.lang.Object)
3001 java.util.IdentityHashMap$Values.remove(java.lang.Object)
3001 java.util.Collections$CheckedMap$CheckedEntrySet.remove(java.lang.Object)
3001 java.util.ArrayDeque.remove(java.lang.Object)
3001 106
3001 java.util.concurrent.SynchronousQueue.remove(java.lang.Object)
3001 java.util.Collections$AsLIFOQueue.remove(java.lang.Object)
3001 java.util.HashSet.remove(java.lang.Object)
3001 java.util.concurrent.ConcurrentHashMap$EntrySet.remove(java.lang.Object)
3001 java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object)
3001 java.util.RegularEnumSet.remove(java.lang.Object)
3001 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3001 java.util.Collections$SynchronizedCollection.remove(java.lang.Object)
3001 java.util.AbstractCollection.remove(java.lang.Object)
3001 java.util.JumboEnumSet.remove(java.lang.Object)
3001 152
3001 java.util.IdentityHashMap$EntrySet.remove(java.lang.Object)
3001 java.util.Collections$CheckedCollection.remove(java.lang.Object)
3001 3067
3001 java.lang.ProcessEnvironment$StringValues.remove(java.lang.Object)
3001 java.util.TreeSet.remove(java.lang.Object)
3001 java.util.concurrent.ConcurrentHashMap$KeySet.remove(java.lang.Object)
3001 147
3001 java.util.TreeMap$Values.remove(java.lang.Object)
3001 java.util.Collections$UnmodifiableCollection.remove(java.lang.Object)
3001 java.util.IdentityHashMap$KeySet.remove(java.lang.Object)
3001 java.util.HashMap$KeySet.remove(java.lang.Object)
3001 java.util.TreeMap$EntrySet.remove(java.lang.Object)
3001 java.util.TreeMap$NavigableSubMap$EntrySetView.remove(java.lang.Object)
3001 java.lang.Object.clinit()
3001 3068
3001 java.lang.ProcessEnvironment$StringKeySet.remove(java.lang.Object)
3001 java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)
3001 java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object)
3001 java.util.Hashtable$KeySet.remove(java.lang.Object)
3001 sun.misc.SoftCache$EntrySet.remove(java.lang.Object)
3001 java.util.Vector.remove(java.lang.Object)
3001 java.util.Collections$SetFromMap.remove(java.lang.Object)
3001 java.util.LinkedList.remove(java.lang.Object)
3001 java.util.WeakHashMap$EntrySet.remove(java.lang.Object)
3001 600
3001 java.util.TreeMap$KeySet.remove(java.lang.Object)
3001 602
3001 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remove(java.lang.Object)
3001 javax.security.auth.Subject$SecureSet.remove(java.lang.Object)
3001 3002
3001 java.util.ArrayList.remove(java.lang.Object)
3001 java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)
3001 java.util.Hashtable$EntrySet.remove(java.lang.Object)
org.joda.time.chrono.BaseChronology.dayOfWeek() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.dayOfWeek() 145
org.joda.time.chrono.BaseChronology.dayOfWeek() 175
org.joda.time.chrono.BaseChronology.dayOfWeek() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.dayOfWeek() 1201
org.joda.time.chrono.BaseChronology.dayOfWeek() org.joda.time.chrono.BaseChronology.days()
2659 java.lang.Object.clinit()
2659 org.joda.time.PeriodType.clinit()
2659 2404
283 java.lang.Object.clinit()
283 java.util.Arrays.clinit()
283 905
283 java.util.Arrays.binarySearch(long[],long)
3737 java.lang.Object.clinit()
3737 java.io.ObjectOutputStream.writeByte(int)
3737 java.io.DataOutputStream.writeByte(int)
3737 java.io.ObjectOutputStream$BlockDataOutputStream.writeBoolean(boolean)
3737 3734
3737 java.io.ObjectOutputStream.writeBoolean(boolean)
3737 java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(int)
3737 java.io.DataOutputStream.writeBoolean(boolean)
909 892
909 910
1436 java.lang.Object.clinit()
1436 1242
1436 1437
1436 org.joda.time.chrono.GJLocaleSymbols.clinit()
415 1057
415 1262
415 415
415 473
415 550
415 416
415 538
415 887
415 3115
415 888
417 418
417 java.lang.Object.clinit()
417 374
3289 961
3527 java.lang.Object.clinit()
3527 3494
3527 org.joda.time.DateTimeFieldType.clinit()
3527 152
1112 342
1112 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1112 3396
1112 895
1112 1112
1112 1226
1112 198
1112 960
1112 3410
1112 java.lang.Object.clinit()
1112 429
1112 997
1112 371
1112 903
1112 995
1112 338
1112 996
1112 1472
1112 1103
1112 457
1112 992
1112 330
1112 1104
1112 994
1112 370
1112 3235
1112 991
1112 384
1112 1350
1112 3272
1112 329
1112 3240
1112 1458
1112 334
1112 1106
1112 org.joda.time.field.DividedDateTimeField.add(long,int)
1112 201
1112 290
1112 3347
1112 423
1112 900
1112 993
1112 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1112 424
1112 3268
1112 org.joda.time.chrono.GJChronology.clinit()
org.joda.time.field.DelegatedDurationField.hashCode() 223
org.joda.time.field.DelegatedDurationField.hashCode() 164
org.joda.time.field.DelegatedDurationField.hashCode() org.joda.time.field.UnsupportedDurationField.hashCode()
org.joda.time.field.DelegatedDurationField.hashCode() 458
org.joda.time.field.DelegatedDurationField.hashCode() java.lang.Object.hashCode()
org.joda.time.field.DelegatedDurationField.hashCode() 232
org.joda.time.field.DelegatedDurationField.hashCode() org.joda.time.field.DelegatedDurationField.hashCode()
org.joda.time.field.DelegatedDurationField.hashCode() 233
org.joda.time.field.DelegatedDateTimeField.getName() 795
3000 java.util.concurrent.ArrayBlockingQueue.size()
3000 java.util.SubList.size()
3000 java.util.Collections$UnmodifiableCollection.size()
3000 java.util.HashSet.size()
3000 643
3000 org.joda.time.DateTimeFieldType.clinit()
3000 java.util.WeakHashMap$EntrySet.size()
3000 158
3000 java.util.Collections$CheckedCollection.retainAll(java.util.Collection)
3000 java.util.Arrays$ArrayList.size()
3000 java.util.HashSet.clinit()
3000 3609
3000 java.util.Vector.retainAll(java.util.Collection)
3000 106
3000 java.util.concurrent.LinkedBlockingQueue.size()
3000 java.util.concurrent.LinkedBlockingDeque.size()
3000 java.util.HashMap$EntrySet.size()
3000 java.util.HashSet(java.util.Collection)
3000 javax.security.auth.Subject$SecureSet.size()
3000 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3000 java.util.Collections$EmptySet.size()
3000 505
3000 3639
3000 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.size()
3000 java.lang.ProcessEnvironment$StringValues.size()
3000 sun.util.PreHashedMap$2.size()
3000 java.util.Collections$CheckedMap$CheckedEntrySet.retainAll(java.util.Collection)
3000 152
3000 java.util.TreeMap$NavigableSubMap$EntrySetView.size()
3000 3067
3000 java.util.IdentityHashMap$Values.size()
3000 java.util.Hashtable$KeySet.size()
3000 147
3000 java.util.LinkedList.size()
3000 java.util.Collections$SetFromMap.size()
3000 java.util.Collections$EmptyList.size()
3000 java.util.IdentityHashMap$EntrySet.size()
3000 java.util.RegularEnumSet.size()
3000 156
3000 java.lang.StringBuilder()
3000 java.util.Collections$CopiesList.size()
3000 sun.security.jca.ProviderList$3.size()
3000 java.util.ArrayList.retainAll(java.util.Collection)
3000 java.util.Collections$AsLIFOQueue.retainAll(java.util.Collection)
3000 java.lang.ProcessEnvironment$StringEntrySet.size()
3000 sun.nio.ch.Util$2.retainAll(java.util.Collection)
3000 145
3000 java.util.concurrent.ConcurrentHashMap$KeySet.size()
3000 java.util.concurrent.SynchronousQueue.size()
3000 java.util.Collections$CheckedCollection.size()
3000 java.util.concurrent.ConcurrentLinkedQueue.size()
3000 java.util.WeakHashMap$KeySet.size()
3000 java.util.ArrayDeque.size()
3000 3001
3000 java.util.concurrent.ConcurrentHashMap$EntrySet.size()
3000 java.lang.ProcessEnvironment$StringKeySet.size()
3000 java.util.Collections$AsLIFOQueue.size()
3000 java.util.Collections$SynchronizedCollection.size()
3000 java.util.concurrent.ConcurrentHashMap$Values.size()
3000 java.util.HashMap$KeySet.size()
3000 509
3000 java.util.Collections$CheckedMap$CheckedEntrySet.size()
3000 java.util.Collections$SynchronizedCollection.retainAll(java.util.Collection)
3000 java.lang.StringBuilder.append(java.lang.Object)
3000 sun.util.PreHashedMap$1.size()
3000 java.util.TreeMap$Values.size()
3000 java.util.HashSet.remove(java.lang.Object)
3000 java.util.Collections$SetFromMap.retainAll(java.util.Collection)
3000 java.util.JumboEnumSet.size()
3000 java.util.Hashtable$EntrySet.size()
3000 javax.security.auth.Subject$ClassSet.size()
3000 java.util.AbstractMap$1.size()
3000 java.util.WeakHashMap$Values.size()
3000 java.util.Collections$SingletonList.size()
3000 sun.nio.ch.Util$2.size()
3000 java.lang.StringBuilder.toString()
3000 3069
3000 java.util.TreeSet.size()
3000 java.util.Collections$UnmodifiableCollection.retainAll(java.util.Collection)
3000 java.util.RegularEnumSet.retainAll(java.util.Collection)
3000 java.util.ArrayList$SubList.size()
3000 java.util.concurrent.SynchronousQueue.retainAll(java.util.Collection)
3000 java.lang.StringBuilder.append(java.lang.String)
3000 java.util.Collections$SingletonSet.size()
3000 javax.security.auth.Subject$SecureSet.retainAll(java.util.Collection)
3000 sun.security.jca.ProviderList$ServiceList.size()
3000 java.util.HashMap$Values.size()
3000 java.util.TreeMap$EntrySet.size()
3000 java.util.TreeMap$KeySet.size()
3000 149
3000 java.util.AbstractMap$2.size()
3000 java.util.Vector.size()
3000 java.lang.Object.clinit()
3000 java.util.AbstractCollection.retainAll(java.util.Collection)
3000 3004
3000 java.util.ArrayList.size()
3000 java.lang.Throwable.clinit()
3000 java.lang.IllegalArgumentException(java.lang.String)
3000 java.util.Hashtable$ValueCollection.size()
3000 3003
3000 java.util.JumboEnumSet.retainAll(java.util.Collection)
3000 sun.misc.SoftCache$EntrySet.size()
3000 java.util.IdentityHashMap$KeySet.size()
3000 java.util.HashSet.contains(java.lang.Object)
248 176
3287 3284
858 java.lang.Object.clinit()
858 859
858 java.lang.StringBuilder()
858 java.lang.Throwable.clinit()
858 java.lang.IllegalArgumentException(java.lang.String)
858 java.lang.StringBuilder.append(java.lang.String)
858 java.lang.Object.getClass()
858 java.lang.Class.getName()
858 java.lang.StringBuilder.toString()
3432 3406
407 383
407 407
407 1211
407 133
407 3424
407 119
407 436
407 453
407 1004
407 1411
407 1212
407 3062
407 213
407 117
407 1388
407 2000
407 408
407 1435
407 141
407 409
407 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
3397 3398
735 java.io.PrintStream.append(java.lang.CharSequence)
735 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
735 3433
735 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
735 java.lang.String.charAt(int)
735 java.io.StringWriter.append(char)
735 java.lang.StringBuilder.append(java.lang.CharSequence)
735 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
735 java.io.Writer.append(char)
735 732
735 java.lang.Integer.toString(int)
735 java.lang.Object.clinit()
735 java.nio.CharBuffer.append(java.lang.CharSequence)
735 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
735 java.nio.CharBuffer.append(char)
735 java.lang.StringBuilder.append(char)
735 org.joda.time.field.RemainderDateTimeField.remainder(long)
735 3278
735 3097
735 1656
735 3297
735 3096
735 java.lang.Integer.clinit()
735 java.lang.Long.toString(long)
735 736
735 java.lang.StringBuffer.append(java.lang.CharSequence)
735 java.lang.StringBuffer.append(char)
735 java.lang.Long.clinit()
735 java.io.PrintStream.append(char)
735 1337
735 java.io.Writer.append(java.lang.CharSequence)
735 java.io.PrintWriter.append(java.lang.CharSequence)
735 2195
735 java.io.StringWriter.append(java.lang.CharSequence)
735 3351
735 3098
735 java.lang.String.length()
735 java.io.PrintWriter.append(char)
735 1439
735 org.joda.time.field.DividedDateTimeField.remainder(long)
org.joda.time.base.AbstractDuration.compareTo(java.lang.Object) 1736
2625 java.lang.Object.clinit()
2625 org.joda.time.PeriodType.clinit()
2625 2403
372 367
372 3286
372 291
685 505
685 java.lang.Object.clinit()
685 509
685 643
685 641
685 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
685 683
org.joda.time.chrono.BaseChronology.secondOfMinute() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.secondOfMinute() 73
org.joda.time.chrono.BaseChronology.secondOfMinute() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.secondOfMinute() 171
org.joda.time.chrono.BaseChronology.secondOfMinute() org.joda.time.chrono.BaseChronology.seconds()
org.joda.time.chrono.BaseChronology.secondOfMinute() 1201
3099 java.lang.Long.longValue()
1383 791
1383 1196
1383 2230
1383 303
1383 1936
1383 782
1383 1384
1383 java.lang.Object.hashCode()
1383 org.joda.time.chrono.GregorianChronology.hashCode()
1383 2321
1383 1385
1383 793
1383 org.joda.time.chrono.BuddhistChronology.hashCode()
1383 org.joda.time.chrono.IslamicChronology.hashCode()
1383 org.joda.time.field.AbstractReadableInstantFieldProperty.getChronology()
1383 1193
1383 2088
1383 1614
1383 org.joda.time.chrono.JulianChronology.hashCode()
1383 org.joda.time.chrono.EthiopicChronology.hashCode()
1383 1197
1383 788
1383 1499
3567 java.lang.Object()
1148 1457
1148 1149
1148 org.joda.time.chrono.BaseChronology.dayOfMonth()
1148 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1148 364
1148 932
1148 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1148 1150
1148 1454
1148 195
1148 3341
1148 365
1148 3514
1148 3496
1148 1455
1148 1593
1148 934
1148 3435
1148 286
1148 1648
949 3454
949 3568
949 3649
949 917
949 525
949 949
949 942
949 916
949 3551
949 3655
949 3641
949 1054
949 922
949 3490
949 924
1784 java.lang.Object.clinit()
1784 java.util.ArrayList.size()
1784 java.util.ArrayList.clinit()
1784 java.util.ArrayList()
1784 1785
1784 java.util.ArrayList.toArray(java.lang.Object[])
1784 java.lang.Object()
46 47
3171 java.lang.IllegalArgumentException(java.lang.String)
1496 732
1496 java.lang.Object.clinit()
1496 java.lang.StringBuilder()
1496 405
1496 java.lang.Throwable.clinit()
1496 1203
1496 java.lang.IllegalArgumentException(java.lang.String)
1496 java.lang.StringBuilder.append(java.lang.String)
1496 java.lang.StringBuilder.append(java.lang.Object)
1496 82
1496 java.lang.StringBuilder.toString()
1496 588
1496 1495
1770 1767
1770 1771
1770 java.lang.Object.clinit()
2729 java.lang.Object.clinit()
2729 48
2729 org.joda.time.DurationFieldType.clinit()
1131 452
1131 1138
1131 3071
1131 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
1131 3428
1131 1212
1131 1966
1131 114
1131 3062
1131 2164
1131 116
1131 432
1131 2645
1131 141
1131 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
1131 2636
1131 1136
1131 383
1131 407
1131 133
1131 1269
1131 3119
1131 436
1131 3061
1131 1411
1131 83
1131 2270
1131 1210
1131 117
1131 212
1131 2000
1131 140
1131 2925
1131 318
1131 1132
1131 3427
1131 1133
1131 132
1131 1211
1131 3424
1131 1004
1131 453
1131 1208
1131 957
1131 380
1131 213
1131 3640
1131 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
1131 java.lang.Object.clinit()
1131 2045
1131 1435
1131 321
1131 409
1131 java.lang.Integer.valueOf(int)
1131 1023
1131 3355
1131 1214
1131 3120
1131 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
1131 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
1131 java.lang.Throwable.clinit()
1131 java.lang.Integer.clinit()
1131 2926
1131 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
1131 119
1131 319
1131 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
1131 406
1131 1388
1131 402
1131 408
1131 3431
1131 2067
1131 1999
1131 403
1131 404
213 383
213 407
213 1211
213 133
213 3424
213 119
213 436
213 1004
213 453
213 1411
213 1212
213 3062
213 213
213 117
213 1388
213 2000
213 408
213 1435
213 141
213 409
213 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
213 118
3747 java.lang.Boolean.clinit()
3747 java.lang.Object.clinit()
3747 java.lang.Boolean.valueOf(boolean)
3747 org.joda.time.tz.ZoneInfoLogger.clinit()
3747 java.lang.ThreadLocal.set(java.lang.Object)
1967 1209
1967 2046
1967 1135
1967 1134
1967 2165
1967 2646
1967 114
1967 2637
1967 288
1967 2271
1967 1096
1967 1969
1967 2047
1967 1968
1967 404
1967 3355
1061 3397
1061 org.joda.time.field.DelegatedDurationField.add(long,int)
1061 1111
1061 1162
1061 1058
1061 3382
1061 org.joda.time.field.DecoratedDurationField.add(long,int)
1061 1062
1061 901
1061 896
1061 225
1061 1061
2638 java.lang.Object.clinit()
2638 org.joda.time.MonthDay.clinit()
635 java.lang.Object.clinit()
635 org.joda.time.DateTimeFieldType.clinit()
635 74
635 636
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.StringBuilder()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.toString() java.lang.StringBuilder.append(int)
7 java.lang.Object.clinit()
7 java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)
7 8
7 java.util.concurrent.atomic.AtomicReference.get()
7 org.joda.time.DateTimeZone.clinit()
3415 3406
1162 900
1162 370
1162 903
1130 495
1130 753
1130 385
1130 274
1130 219
1130 1131
1130 478
1130 1102
1130 java.lang.Object.clinit()
1130 2211
1130 org.joda.time.chrono.ZonedChronology.withUTC()
1130 org.joda.time.DateTimeUtils.clinit()
1130 2258
1130 org.joda.time.chrono.LimitChronology.withUTC()
1130 749
1130 523
1130 269
1130 273
711 java.lang.Object.clinit()
711 org.joda.time.DateTimeFieldType.clinit()
711 76
711 636
org.joda.time.LocalDateTime.compareTo(java.lang.Object) 2014
3691 3690
3691 java.lang.StringBuffer.append(java.lang.String)
2511 java.lang.String.clinit()
2511 java.lang.Object.clinit()
1139 383
1139 1211
1139 133
1139 119
1139 453
1139 1004
1139 436
1139 1411
1139 1212
1139 3062
1139 213
1139 117
1139 1388
1139 2000
1139 408
1139 1435
1139 141
1139 409
1139 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
944 945
944 java.lang.Object.clinit()
944 946
944 947
944 948
944 java.lang.Object()
2278 java.util.Date.getTime()
2278 java.util.Calendar.getTime()
1326 383
1326 1211
1326 java.lang.Integer.clinit()
1326 133
1326 119
1326 436
1326 1004
1326 453
1326 1411
1326 1212
1326 3062
1326 213
1326 java.lang.Integer.toString(int)
1326 java.lang.Object.clinit()
1326 117
1326 1388
1326 2000
1326 408
1326 1435
1326 141
1326 409
1326 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
1326 java.lang.String.length()
3547 java.util.Locale.hashCode()
408 383
408 407
408 1211
408 133
408 3424
408 119
408 436
408 453
408 1004
408 1411
408 1212
408 3062
408 213
408 117
408 1388
408 2000
408 408
408 1435
408 141
408 409
408 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
3126 java.lang.String.equals(java.lang.Object)
3126 3127
3126 36
3265 java.lang.Object.clinit()
3265 751
3265 org.joda.time.chrono.EthiopicChronology.clinit()
3265 498
3265 532
3265 org.joda.time.DateTimeZone.clinit()
3265 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 363
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 3302
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 3345
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 3304
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 1399
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 1398
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 362
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) 3434
org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
343 344
461 216
461 556
461 java.lang.Object.hashCode()
461 217
461 461
461 93
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 1366
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 3401
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 3274
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 3275
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 1666
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) 1367
org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
214 java.lang.Object.clinit()
214 org.joda.time.chrono.ISOChronology.clinit()
1462 1463
1462 java.lang.Object.clinit()
1462 1242
1462 org.joda.time.chrono.GJLocaleSymbols.clinit()
1219 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
1219 426
1219 2002
1219 1219
1219 1530
1219 2216
1219 2138
1219 343
1219 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
1219 2001
1530 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
1530 889
1530 426
1530 2002
1530 1219
1530 1530
1530 103
1530 2216
1530 2138
1530 343
1530 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
1530 2001
792 789
792 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
792 1173
792 792
792 1906
792 java.lang.Object.equals(java.lang.Object)
792 781
792 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
792 103
792 2272
792 584
792 988
792 787
792 1107
1252 java.io.PrintStream.append(java.lang.CharSequence)
1252 java.lang.Integer.clinit()
1252 java.lang.StringBuffer.append(java.lang.CharSequence)
1252 java.io.StringWriter.append(char)
1252 java.lang.StringBuilder.append(java.lang.CharSequence)
1252 java.io.PrintStream.append(char)
1252 java.lang.StringBuffer.append(char)
1252 java.io.Writer.append(java.lang.CharSequence)
1252 java.io.PrintWriter.append(java.lang.CharSequence)
1252 java.lang.Integer.toString(int)
1252 java.lang.Object.clinit()
1252 java.io.Writer.append(char)
1252 java.nio.CharBuffer.append(java.lang.CharSequence)
1252 java.lang.StringBuilder.append(char)
1252 java.nio.CharBuffer.append(char)
1252 java.io.StringWriter.append(java.lang.CharSequence)
1252 java.io.PrintWriter.append(char)
1386 755
1386 325
1386 756
1386 java.lang.String.hashCode()
1386 744
1386 747
1386 324
1386 217
1386 752
1386 207
1386 93
1386 748
1386 216
1386 208
1386 556
1386 751
1386 326
1386 java.lang.Object.getClass()
1386 java.lang.Class.getName()
3095 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
3095 1149
3095 3433
3095 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
3095 1153
3095 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
3095 java.lang.Object.clinit()
3095 732
3095 3341
3095 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
3095 866
3095 1152
3095 org.joda.time.field.RemainderDateTimeField.remainder(long)
3095 3278
3095 1455
3095 1593
3095 3097
3095 858
3095 1656
3095 934
3095 3435
3095 286
3095 3297
3095 2275
3095 1457
3095 3096
3095 org.joda.time.field.DividedDateTimeField.roundFloor(long)
3095 834
3095 736
3095 364
3095 932
3095 3099
3095 1011
3095 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
3095 1150
3095 1454
3095 1032
3095 867
3095 365
3095 3514
3095 2278
3095 3496
3095 3098
3095 3351
3095 1439
3095 1648
3095 org.joda.time.field.DividedDateTimeField.remainder(long)
1769 1770
3138 java.lang.Object.clinit()
3138 java.lang.Throwable.clinit()
3138 java.lang.RuntimeException(java.lang.Throwable)
3138 java.lang.Class.forName(java.lang.String)
3138 java.lang.Class.clinit()
3138 java.lang.System.getProperty(java.lang.String)
3138 3139
3138 java.lang.Class.newInstance()
3138 java.lang.System.clinit()
1239 457
1239 1103
1239 992
1239 342
1239 1422
1239 994
1239 1104
1239 1320
1239 991
1239 384
1239 3240
1239 1240
1239 3280
1239 960
1239 334
1239 429
1239 290
1239 997
1239 371
1239 995
1239 338
1239 993
1239 996
1239 1420
2927 303
2927 791
2927 1385
2927 org.joda.time.chrono.JulianChronology.hashCode()
2927 1096
2927 2900
2927 2803
2927 2902
2927 1936
2927 1384
2927 2046
2927 782
2927 3077
2927 java.lang.Object.hashCode()
2927 1134
2927 org.joda.time.chrono.GregorianChronology.hashCode()
2927 793
2927 288
2927 org.joda.time.chrono.BuddhistChronology.hashCode()
2927 org.joda.time.chrono.IslamicChronology.hashCode()
2927 3014
2927 2961
2927 2963
2927 3016
2927 org.joda.time.chrono.EthiopicChronology.hashCode()
2927 3074
2927 2804
2927 1968
2927 2806
2927 788
1196 1497
1196 2228
1196 1194
1196 2086
1196 114
1196 2319
1196 404
1196 1612
1196 3355
1238 org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
1238 org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
1238 1315
1238 732
1238 1319
1238 org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
1238 org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
1238 3418
1238 3261
1238 3258
1238 1239
1238 1314
1238 3413
org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long) java.lang.Object.clinit()
org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long) 370
org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long) 1082
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2030
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2031
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2118
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2025
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2028
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2114
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) 2026
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
740 326
3172 java.lang.Object.clinit()
3172 java.util.ArrayList.clinit()
3172 java.util.ArrayList(int)
3172 java.lang.Object()
525 java.nio.CharBuffer.charAt(int)
525 528
525 java.lang.StringBuffer.charAt(int)
525 527
525 java.lang.Integer.clinit()
525 org.joda.time.format.FormatUtils.clinit()
525 java.nio.CharBuffer.length()
525 java.lang.String.charAt(int)
525 923
525 526
525 java.lang.StringBuffer.length()
525 java.lang.Object.clinit()
525 java.lang.StringBuilder.charAt(int)
525 java.lang.String.length()
525 java.lang.StringBuilder.length()
525 java.lang.Integer.valueOf(int)
3362 231
3362 230
3362 70
3362 org.joda.time.field.DelegatedDurationField.getUnitMillis()
3362 239
3362 246
3362 388
3362 68
1498 587
505 java.lang.Object.clinit()
505 java.util.ArrayList.clinit()
505 java.util.ArrayList()
505 java.lang.Object()
2437 51
2437 61
2437 java.lang.Object.clinit()
2437 48
2437 52
2437 49
2437 45
2437 2425
2437 57
2437 59
2437 org.joda.time.DurationFieldType.clinit()
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 1472
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 3396
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 370
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 895
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 1112
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 1226
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 1350
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 1458
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) org.joda.time.field.DividedDateTimeField.add(long,int)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 900
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 3347
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 903
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 3268
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int) 118
98 99
1230 java.lang.Object.clinit()
1230 java.lang.Throwable.clinit()
1230 java.lang.IllegalArgumentException(java.lang.String)
1230 org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit()
1230 508
1230 1232
1648 1149
1648 1457
1648 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1648 364
1648 932
1648 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1648 1150
1648 1454
1648 3341
1648 365
1648 3514
1648 3496
1648 1455
1648 1593
1648 934
1648 3435
1648 286
1648 1648
3202 java.lang.Object.clinit()
3202 1739
3202 java.lang.StringBuilder()
3202 java.lang.StringBuilder.append(java.lang.String)
3202 java.lang.StringBuilder.toString()
527 java.nio.CharBuffer.charAt(int)
527 java.lang.StringBuffer.charAt(int)
527 java.lang.String.charAt(int)
527 java.lang.StringBuilder.charAt(int)
3137 java.lang.Object.clinit()
3137 java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)
3137 java.util.concurrent.atomic.AtomicReference.get()
3137 org.joda.time.DateTimeZone.clinit()
3137 3138
738 java.lang.Object.clinit()
738 304
738 java.lang.StringBuilder()
738 java.lang.StringBuilder.append(char)
738 java.lang.StringBuilder.append(java.lang.String)
738 36
738 java.lang.StringBuilder.toString()
1531 755
1531 744
1531 3756
1531 265
1531 1512
1531 3296
1531 207
1531 java.lang.Object.clinit()
1531 386
1531 org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
1531 751
1531 1068
1531 304
1531 org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
1531 org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
1531 747
1531 2016
1531 938
1531 588
1531 org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
1531 3239
1531 522
1531 3295
1531 org.joda.time.DateTimeUtils.clinit()
1531 3265
1531 387
1531 226
org.joda.time.chrono.ISOChronology.clinit() 166
org.joda.time.chrono.ISOChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.ISOChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.ISOChronology.clinit() org.joda.time.chrono.ISOChronology.clinit()
org.joda.time.chrono.ISOChronology.clinit() 165
org.joda.time.chrono.ISOChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.ISOChronology.clinit() org.joda.time.chrono.GregorianChronology.clinit()
org.joda.time.chrono.ISOChronology.clinit() java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.chrono.ISOChronology.clinit() org.joda.time.chrono.BasicGJChronology.clinit()
org.joda.time.chrono.ISOChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.ISOChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
422 120
422 551
422 376
422 374
422 472
422 469
422 548
422 537
422 java.lang.Object.clinit()
422 1381
422 320
422 536
422 348
422 311
422 3290
632 505
632 java.lang.Object.clinit()
632 509
632 600
632 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
632 633
3230 java.lang.Throwable.getMessage()
3230 java.lang.Object.clinit()
3230 3228
3230 795
3230 java.lang.Throwable.clinit()
3230 java.lang.IllegalArgumentException(java.lang.String)
749 java.lang.Object.clinit()
749 org.joda.time.chrono.EthiopicChronology.clinit()
749 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.BaseChronology.seconds() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.seconds() 45
org.joda.time.chrono.BaseChronology.seconds() 162
org.joda.time.chrono.BaseChronology.seconds() org.joda.time.DurationFieldType.clinit()
1056 org.joda.time.format.DateTimeParserBucket$SavedField(org.joda.time.DateTimeField,int)
1056 919
2115 3415
2115 1986
2115 3343
2115 2046
2115 1134
2115 288
2115 3420
2115 2116
2115 732
2115 org.joda.time.field.DelegatedDateTimeField.getAsText(org.joda.time.ReadablePartial,java.util.Locale)
2115 1096
2115 1988
2115 2027
2115 1968
2115 2788
2115 org.joda.time.field.DelegatedDateTimeField.getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.chrono.BasicGJChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.BasicGJChronology.clinit() org.joda.time.chrono.BasicGJChronology.clinit()
org.joda.time.chrono.BasicGJChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
3651 java.lang.Object.clinit()
3651 java.util.Collections.unmodifiableMap(java.util.Map)
3651 java.util.LinkedHashMap()
3651 org.joda.time.DateTimeUtils.clinit()
3651 java.util.HashMap.clinit()
3651 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3651 org.joda.time.DateTimeZone.clinit()
3651 3652
3651 java.util.Collections.clinit()
org.joda.time.chrono.BaseChronology.year() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.year() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.year() 106
org.joda.time.chrono.BaseChronology.year() 1201
org.joda.time.chrono.BaseChronology.year() 179
org.joda.time.chrono.BaseChronology.year() org.joda.time.chrono.BaseChronology.years()
1472 1472
1472 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1472 3396
1472 370
1472 895
1472 1112
1472 1226
1472 1350
1472 1458
1472 org.joda.time.field.DividedDateTimeField.add(long,int)
1472 1058
1472 900
1472 3347
1472 903
1472 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1472 3268
1472 118
3183 sun.util.PreHashedMap$1$1.next()
3183 javax.security.auth.Subject$SecureSet$1.next()
3183 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
3183 java.util.AbstractMap$1$1.next()
3183 sun.net.www.MessageHeader$HeaderIterator.next()
3183 sun.util.PreHashedMap$2$1.next()
3183 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
3183 sun.net.www.HeaderParser$ParserIterator.hasNext()
3183 java.util.concurrent.ArrayBlockingQueue$Itr.next()
3183 java.lang.ProcessEnvironment$StringKeySet$1.next()
3183 java.util.TreeMap$DescendingKeyIterator.next()
3183 java.util.ArrayList(java.util.Collection)
3183 java.util.TreeMap$PrivateEntryIterator.hasNext()
3183 java.util.JumboEnumSet$EnumSetIterator.next()
3183 java.util.LinkedList$ListItr.hasNext()
3183 java.util.ArrayList.clinit()
3183 sun.misc.Service$LazyIterator.next()
3183 java.util.ServiceLoader$LazyIterator.next()
3183 3186
3183 java.util.Scanner.hasNext()
3183 java.util.WeakHashMap$ValueIterator.next()
3183 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
3183 3200
3183 java.util.IdentityHashMap$EntryIterator.next()
3183 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
3183 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
3183 3189
3183 java.util.LinkedList$DescendingIterator.hasNext()
3183 java.util.Hashtable$Enumerator.hasNext()
3183 java.util.JumboEnumSet$EnumSetIterator.hasNext()
3183 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
3183 java.util.RegularEnumSet$EnumSetIterator.next()
3183 java.util.LinkedList$DescendingIterator.next()
3183 java.util.WeakHashMap$KeyIterator.next()
3183 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
3183 sun.util.PreHashedMap$2$1.hasNext()
3183 java.util.SubList$1.next()
3183 java.util.Collections$EmptyIterator.next()
3183 java.util.LinkedHashMap$ValueIterator.next()
3183 java.util.ServiceLoader$1.hasNext()
3183 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
3183 java.util.TreeMap$ValueIterator.next()
3183 java.util.WeakHashMap$HashIterator.hasNext()
3183 java.util.IdentityHashMap$KeyIterator.next()
3183 java.util.LinkedHashMap$EntryIterator.next()
3183 java.util.AbstractMap$2$1.hasNext()
3183 java.util.IdentityHashMap$ValueIterator.next()
3183 sun.nio.fs.AbstractPath$1.hasNext()
3183 java.lang.ProcessEnvironment$StringValues$1.hasNext()
3183 java.util.AbstractMap$1$1.hasNext()
3183 java.util.TreeMap$EntryIterator.next()
3183 java.util.ArrayDeque$DescendingIterator.hasNext()
3183 java.util.Hashtable$Enumerator.next()
3183 java.util.HashMap$EntryIterator.next()
3183 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
3183 javax.security.auth.Subject$SecureSet$1.hasNext()
3183 java.util.Collections$UnmodifiableList$1.hasNext()
3183 java.util.ArrayList$Itr.hasNext()
3183 java.util.Collections$UnmodifiableList$1.next()
3183 java.nio.charset.Charset$1.hasNext()
3183 java.util.Collections$UnmodifiableCollection$1.next()
3183 sun.nio.cs.FastCharsetProvider$1.next()
3183 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
3183 java.util.Vector$Itr.next()
3183 java.util.Collections$CheckedList$1.hasNext()
3183 java.util.TreeMap$KeyIterator.next()
3183 java.util.ArrayList$SubList$1.next()
3183 java.util.SubList$1.hasNext()
3183 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
3183 java.util.HashMap$ValueIterator.next()
3183 java.util.Collections$UnmodifiableCollection$1.hasNext()
3183 sun.misc.SoftCache$EntrySet$1.hasNext()
3183 java.util.RegularEnumSet$EnumSetIterator.hasNext()
3183 java.util.HashMap$KeyIterator.next()
3183 sun.misc.SoftCache$EntrySet$1.next()
3183 sun.security.jca.ProviderList$ServiceList$1.hasNext()
3183 java.util.ArrayList$SubList$1.hasNext()
3183 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
3183 java.util.Collections$1.hasNext()
3183 java.util.ArrayList$Itr.next()
3183 3775
3183 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
3183 3184
3183 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
3183 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
3183 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
3183 java.util.AbstractMap$2$1.next()
3183 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
3183 java.util.ServiceLoader$1.next()
3183 sun.net.www.HeaderParser$ParserIterator.next()
3183 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
3183 sun.nio.cs.FastCharsetProvider$1.hasNext()
3183 sun.nio.fs.AbstractPath$1.next()
3183 sun.security.jca.ProviderList$ServiceList$1.next()
3183 java.util.LinkedList$ListItr.next()
3183 java.util.Collections$EmptyIterator.hasNext()
3183 java.util.ServiceLoader$LazyIterator.hasNext()
3183 java.util.Scanner.next()
3183 java.util.Vector$Itr.hasNext()
3183 java.util.ArrayDeque$DeqIterator.next()
3183 java.util.Collections$CheckedCollection$1.hasNext()
3183 java.util.ArrayDeque$DescendingIterator.next()
3183 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
3183 java.lang.Object.clinit()
3183 java.util.Collections$CheckedCollection$1.next()
3183 java.util.LinkedHashMap$KeyIterator.next()
3183 java.util.AbstractList$Itr.next()
3183 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
3183 3191
3183 java.util.Collections$CheckedList$1.next()
3183 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
3183 java.util.ArrayList.iterator()
3183 sun.misc.Service$LazyIterator.hasNext()
3183 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
3183 java.nio.charset.Charset$1.next()
3183 sun.net.www.MessageHeader$HeaderIterator.hasNext()
3183 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
3183 java.util.Collections$1.next()
3183 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
3183 3188
3183 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
3183 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
3183 java.util.ArrayDeque$DeqIterator.hasNext()
3183 3730
3183 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
3183 java.util.concurrent.LinkedBlockingQueue$Itr.next()
3183 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
3183 java.lang.ProcessEnvironment$StringEntrySet$1.next()
3183 sun.util.PreHashedMap$1$1.hasNext()
3183 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
3183 java.util.AbstractList$Itr.hasNext()
3183 java.util.HashMap$HashIterator.hasNext()
3183 java.util.WeakHashMap$EntryIterator.next()
3183 java.lang.ProcessEnvironment$StringValues$1.next()
1076 1076
1076 3400
1076 1078
1076 org.joda.time.field.DecoratedDurationField.add(long,long)
1076 1058
1076 1077
1076 org.joda.time.field.DelegatedDurationField.add(long,long)
1076 225
1076 1087
1076 1085
1076 1164
1076 3385
org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long) 3496
2304 org.joda.time.chrono.BaseChronology.hourOfDay()
2304 342
2304 java.lang.StringBuilder.append(int)
2304 960
2304 3410
2304 187
2304 java.lang.Object.clinit()
2304 429
2304 java.lang.StringBuilder()
2304 189
2304 1096
2304 997
2304 371
2304 995
2304 338
2304 182
2304 185
2304 996
2304 org.joda.time.chrono.BaseChronology.millisOfSecond()
2304 457
2304 1103
2304 330
2304 992
2304 java.lang.Throwable.clinit()
2304 994
2304 1104
2304 org.joda.time.chrono.BaseChronology.secondOfMinute()
2304 991
2304 384
2304 java.lang.StringBuilder.toString()
2304 3240
2304 329
2304 java.lang.IndexOutOfBoundsException(java.lang.String)
2304 334
2304 1106
2304 org.joda.time.chrono.BaseChronology.minuteOfHour()
2304 290
2304 java.lang.StringBuilder.append(java.lang.String)
2304 1097
2304 993
76 java.lang.Object.clinit()
76 org.joda.time.DateTimeFieldType.clinit()
119 120
119 536
119 311
119 469
119 548
10 java.lang.String.endsWith(java.lang.String)
10 java.util.TreeMap.keySet()
10 11
10 java.util.Collections$SynchronizedMap.keySet()
10 sun.util.PreHashedMap.keySet()
10 java.lang.Class.getClassLoader()
10 java.lang.ProcessEnvironment$StringEnvironment.keySet()
10 java.util.Collections$EmptyMap.keySet()
10 java.lang.Object.clinit()
10 java.lang.StringBuilder()
10 java.lang.StringBuilder.append(char)
10 java.util.concurrent.ConcurrentHashMap.keySet()
10 java.util.Hashtable.keySet()
10 java.util.TreeSet(java.util.Collection)
10 java.util.Collections$CheckedMap.keySet()
10 java.lang.Object()
10 java.util.IdentityHashMap.keySet()
10 java.util.Collections.unmodifiableSortedSet(java.util.SortedSet)
10 15
10 java.lang.Throwable.clinit()
10 java.lang.IllegalArgumentException(java.lang.String)
10 java.util.HashMap.keySet()
10 java.lang.StringBuilder.toString()
10 java.util.TreeSet.clinit()
10 java.util.jar.Attributes.keySet()
10 java.util.AbstractMap.keySet()
10 java.security.Provider.keySet()
10 java.util.Collections$SingletonMap.keySet()
10 java.util.TreeMap$NavigableSubMap.keySet()
10 java.util.Collections$UnmodifiableMap.keySet()
10 java.lang.StringBuilder.append(java.lang.String)
10 java.lang.Object.getClass()
10 java.util.WeakHashMap.keySet()
10 java.util.Collections.clinit()
3239 java.lang.Object.clinit()
3239 304
3239 org.joda.time.chrono.BuddhistChronology.clinit()
3239 498
3239 394
3239 org.joda.time.DateTimeZone.clinit()
3431 3406
399 160
399 128
399 org.joda.time.DateTimeFieldType.clinit()
399 359
399 410
399 162
399 400
399 448
399 54
399 java.lang.Object.clinit()
399 479
399 org.joda.time.chrono.BuddhistChronology.clinit()
399 139
399 244
399 138
399 317
399 112
399 121
399 134
399 135
399 126
399 113
399 159
399 127
399 org.joda.time.DurationFieldType.clinit()
399 3213
399 454
399 241
399 247
399 227
238 java.lang.Object.clinit()
238 java.lang.IllegalArgumentException()
238 405
238 java.lang.Throwable.clinit()
238 1203
238 229
238 65
238 82
238 114
238 404
238 3355
452 452
452 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
452 132
452 1269
452 3428
452 3061
452 957
452 83
452 319
452 380
452 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
452 406
452 1210
452 212
452 402
452 116
452 432
452 140
452 321
452 2067
452 1999
452 403
452 318
3281 1347
3281 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
3281 1450
3281 3121
3281 3281
3281 1333
3281 382
3281 1404
3281 3425
3281 3122
3281 3255
426 344
3725 3726
3725 3174
2508 1782
3385 java.lang.Object.clinit()
3385 1076
3385 3400
3385 973
3385 1078
3385 org.joda.time.field.DecoratedDurationField.add(long,long)
3385 1077
3385 org.joda.time.field.DelegatedDurationField.add(long,long)
3385 225
3385 1087
3385 1085
3385 1164
3385 3385
544 545
544 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
544 218
544 411
544 java.lang.Object.clinit()
544 544
544 org.joda.time.chrono.IslamicChronology.clinit()
544 439
544 498
544 org.joda.time.DateTimeZone.clinit()
544 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
544 org.joda.time.chrono.BasicChronology.clinit()
2931 1986
2931 org.joda.time.chrono.BasicFixedMonthChronology.getDaysInMonthMax(int)
2931 1987
2931 1998
2931 org.joda.time.DateTimeFieldType.clinit()
2931 1212
2931 1985
2931 475
2931 1401
2931 java.lang.Object.clinit()
2931 350
2931 106
2931 152
2931 1988
2931 552
2931 2027
2931 2639
2931 org.joda.time.chrono.IslamicChronology.getDaysInMonthMax(int)
2931 2788
org.joda.time.chrono.BaseChronology.weekOfWeekyear() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.weekOfWeekyear() 176
org.joda.time.chrono.BaseChronology.weekOfWeekyear() org.joda.time.chrono.BaseChronology.weeks()
org.joda.time.chrono.BaseChronology.weekOfWeekyear() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.weekOfWeekyear() 158
org.joda.time.chrono.BaseChronology.weekOfWeekyear() 1201
3242 1464
3242 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3242 3266
3242 3241
3242 1391
3242 1446
3242 3300
3242 1448
3242 3242
3242 1471
3242 1390
3242 3432
3242 3344
1136 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
1136 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
1136 1137
1136 org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial)
3298 3298
3298 1084
3298 1750
3298 3276
3298 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
3298 1081
3298 1667
1195 587
486 java.lang.Object.clinit()
486 java.lang.StringBuffer.clinit()
486 java.lang.StringBuffer.toString()
486 org.joda.time.format.FormatUtils.clinit()
486 java.lang.StringBuffer.append(char)
486 java.lang.StringBuffer()
486 488
3513 417
3513 435
3513 1004
3513 455
3513 374
3513 373
3513 1281
3513 java.lang.Object.clinit()
3513 430
3513 422
3513 1273
3513 2120
3513 118
3513 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3513 421
3513 379
3513 org.joda.time.field.StrictDateTimeField.set(long,int)
3513 1275
3513 3439
3513 3513
3513 2119
3513 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3513 419
3513 420
3513 1277
3513 1379
1297 961
1247 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 418
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 342
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 374
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 213
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 3410
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 960
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) java.lang.Object.clinit()
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 429
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 997
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 371
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 995
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 338
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 118
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 996
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 457
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 1103
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 330
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 992
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 994
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 1104
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 991
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 384
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 329
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 3240
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 334
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 1106
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 290
org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int) 993
3303 1343
3303 3303
3303 3254
3303 1408
3303 org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long)
3303 org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long)
3303 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(long)
3303 3429
1336 java.lang.Object.clinit()
1336 java.lang.StringBuilder()
1336 java.lang.StringBuilder.append(java.lang.String)
1336 723
1336 java.lang.StringBuilder.toString()
1336 259
1336 org.joda.time.format.DateTimeFormat.clinit()
1336 881
640 505
640 java.lang.Object.clinit()
640 509
640 506
640 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
746 742
2506 java.lang.Object.clinit()
2506 java.lang.IllegalArgumentException()
2506 1775
2506 java.lang.Throwable.clinit()
2506 2507
634 505
634 java.lang.Object.clinit()
634 509
634 635
634 600
634 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.chrono.BaseChronology.weekyear() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.weekyear() 156
org.joda.time.chrono.BaseChronology.weekyear() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.weekyear() 1201
org.joda.time.chrono.BaseChronology.weekyear() 177
org.joda.time.chrono.BaseChronology.weekyear() org.joda.time.chrono.BaseChronology.weekyears()
169 170
169 org.joda.time.field.DelegatedDurationField.isSupported()
169 131
169 181
274 java.lang.Object.clinit()
274 org.joda.time.chrono.ISOChronology.clinit()
274 497
259 260
215 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
215 218
215 166
215 java.lang.Object.clinit()
215 org.joda.time.chrono.ISOChronology.clinit()
215 498
215 org.joda.time.DateTimeZone.clinit()
215 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3297
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3096
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3433
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 736
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3278
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3098
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3097
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 3351
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 1656
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) 1439
org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
org.joda.time.MonthDay.clinit() 505
org.joda.time.MonthDay.clinit() java.lang.Object.clinit()
org.joda.time.MonthDay.clinit() 696
org.joda.time.MonthDay.clinit() 509
org.joda.time.MonthDay.clinit() 147
org.joda.time.MonthDay.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.MonthDay.clinit() 699
org.joda.time.MonthDay.clinit() org.joda.time.MonthDay.clinit()
org.joda.time.MonthDay.clinit() 152
org.joda.time.MonthDay.clinit() org.joda.time.format.DateTimeFormat.clinit()
org.joda.time.MonthDay.clinit() 2162
org.joda.time.MonthDay.clinit() 881
org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long) 3496
2162 java.lang.Object.clinit()
2162 2163
2162 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2448 java.lang.Object.clinit()
2448 org.joda.time.format.FormatUtils.clinit()
2448 1252
19 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
19 sun.util.PreHashedMap.get(java.lang.Object)
19 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
19 java.util.jar.Attributes.get(java.lang.Object)
19 19
19 21
19 java.util.Collections$CheckedMap.get(java.lang.Object)
19 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
19 java.util.IdentityHashMap.get(java.lang.Object)
19 java.util.HashMap.get(java.lang.Object)
19 java.security.Provider.get(java.lang.Object)
19 java.util.Collections$SynchronizedMap.get(java.lang.Object)
19 sun.misc.SoftCache.get(java.lang.Object)
19 java.util.AbstractMap.get(java.lang.Object)
19 java.util.LinkedHashMap.get(java.lang.Object)
19 java.util.Hashtable.get(java.lang.Object)
19 java.util.WeakHashMap.get(java.lang.Object)
19 java.text.AttributedString$AttributeMap.get(java.lang.Object)
19 java.lang.String.equals(java.lang.Object)
19 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
19 java.lang.ref.SoftReference.get()
19 java.util.TreeMap.get(java.lang.Object)
19 java.util.Collections$SingletonMap.get(java.lang.Object)
19 java.util.Collections$EmptyMap.get(java.lang.Object)
597 598
370 371
370 373
org.joda.time.format.FormatUtils.clinit() java.lang.Object.clinit()
org.joda.time.format.FormatUtils.clinit() java.lang.Math.log(double)
org.joda.time.format.FormatUtils.clinit() org.joda.time.format.FormatUtils.clinit()
org.joda.time.format.FormatUtils.clinit() java.lang.Math.clinit()
3533 java.lang.Object.clinit()
3533 156
3533 org.joda.time.DateTimeFieldType.clinit()
3533 508
3533 3485
2504 1788
2504 org.joda.time.format.PeriodFormatterBuilder.clinit()
2504 1768
2504 2506
2504 1779
2504 org.joda.time.format.PeriodFormat.clinit()
2504 2505
2504 java.util.ResourceBundle.getString(java.lang.String)
2504 2510
2504 2508
2504 java.lang.Object.clinit()
2504 2509
2504 1778
2504 1787
2504 2512
2504 1790
2504 1761
2504 1780
478 java.lang.Object.clinit()
478 org.joda.time.chrono.CopticChronology.clinit()
478 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.IslamicChronology.hashCode() 1386
org.joda.time.chrono.IslamicChronology.hashCode() org.joda.time.chrono.IslamicChronology$LeapYearPatternType.hashCode()
org.joda.time.chrono.IslamicChronology.hashCode() org.joda.time.chrono.IslamicChronology.getLeapYearPatternType()
3429 3406
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.StringBuilder()
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.DateTimeZoneBuilder$Rule.toString() java.lang.StringBuilder.append(int)
900 java.lang.Math.abs(int)
900 336
900 3288
900 java.lang.Math.signum(float)
900 3286
900 291
900 475
900 351
900 java.lang.Object.clinit()
900 350
900 340
900 java.lang.Math.clinit()
900 552
900 378
900 1382
1791 java.util.Collections$SynchronizedCollection.size()
1791 sun.security.jca.ProviderList$3.get(int)
1791 java.util.SubList.size()
1791 java.util.Collections$CheckedList.get(int)
1791 java.util.Collections$UnmodifiableCollection.size()
1791 java.lang.IllegalStateException(java.lang.String)
1791 java.util.Collections$CopiesList.get(int)
1791 java.util.Arrays$ArrayList.size()
1791 java.util.Collections$CheckedList.subList(int,int)
1791 java.util.Arrays$ArrayList.get(int)
1791 java.util.Vector.get(int)
1791 java.util.SubList.get(int)
1791 java.util.Vector.subList(int,int)
1791 java.util.LinkedList.get(int)
1791 java.util.Collections$SingletonList.size()
1791 1797
1791 java.util.Collections$CopiesList.subList(int,int)
1791 sun.security.jca.ProviderList$ServiceList.get(int)
1791 java.util.ArrayList$SubList.size()
1791 sun.security.jca.ProviderList$ServiceList.size()
1791 java.util.Collections$UnmodifiableList.subList(int,int)
1791 java.util.LinkedList.size()
1791 java.util.Collections$SynchronizedList.get(int)
1791 1783
1791 java.util.Collections$EmptyList.size()
1791 java.util.Collections$SingletonList.get(int)
1791 1792
1791 java.util.ArrayList.get(int)
1791 java.util.Collections$CheckedRandomAccessList.subList(int,int)
1791 java.lang.Object.clinit()
1791 java.util.Vector.size()
1791 1794
1791 java.util.Collections$CopiesList.size()
1791 sun.security.jca.ProviderList$3.size()
1791 java.util.SubList.subList(int,int)
1791 java.util.ArrayList$SubList.subList(int,int)
1791 java.util.ArrayList.subList(int,int)
1791 1795
1791 java.util.ArrayList$SubList.get(int)
1791 org.joda.time.format.PeriodFormatterBuilder.clinit()
1791 java.util.ArrayList.size()
1791 java.util.Collections$SynchronizedList.subList(int,int)
1791 1796
1791 java.util.RandomAccessSubList.subList(int,int)
1791 java.lang.Throwable.clinit()
1791 java.util.Collections$CheckedCollection.size()
1791 java.util.Collections$SynchronizedRandomAccessList.subList(int,int)
1791 java.util.AbstractList.subList(int,int)
1791 1791
1791 java.util.Collections$EmptyList.get(int)
1791 java.util.Collections$UnmodifiableRandomAccessList.subList(int,int)
1791 java.util.Collections$UnmodifiableList.get(int)
1791 1793
org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception) java.lang.Throwable.printStackTrace()
org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception) javax.xml.transform.TransformerException.printStackTrace()
3498 java.lang.Object.clinit()
3498 java.lang.Throwable.clinit()
3498 java.lang.IllegalArgumentException(java.lang.String)
750 742
org.joda.time.chrono.BaseChronology.yearOfCentury() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.yearOfCentury() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.yearOfCentury() 1201
org.joda.time.chrono.BaseChronology.yearOfCentury() 179
org.joda.time.chrono.BaseChronology.yearOfCentury() 138
org.joda.time.chrono.BaseChronology.yearOfCentury() org.joda.time.chrono.BaseChronology.years()
48 java.lang.Object.clinit()
48 org.joda.time.DurationFieldType.clinit()
1693 970
3428 3406
1027 java.lang.Object.clinit()
1027 831
1027 org.joda.time.chrono.ISOChronology.clinit()
1027 org.joda.time.DateTimeUtils.clinit()
1027 497
1027 586
2140 1508
2140 1093
2140 1058
2140 103
2140 2140
2140 1092
72 java.lang.Object.clinit()
72 org.joda.time.DateTimeFieldType.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 214
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 342
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 960
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 3410
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 429
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() org.joda.time.chrono.ISOChronology.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 997
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 371
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 995
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 338
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 996
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 457
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 1103
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 330
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 831
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 992
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 994
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 1104
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 991
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 384
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 3240
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 329
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 334
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 1106
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 290
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 201
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() org.joda.time.DateTimeUtils.clinit()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit() 993
88 java.lang.Object.clinit()
88 org.joda.time.chrono.BasicChronology.clinit()
1722 1807
1722 1073
1722 org.joda.time.base.BasePeriod$1.getValue(int)
1723 java.lang.Object.clinit()
1723 570
1723 org.joda.time.PeriodType.clinit()
1723 1722
618 java.lang.Object()
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) 1319
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) 3261
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) 1239
org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale) 3413
org.joda.time.base.BaseSingleFieldPeriod.compareTo(java.lang.Object) 2600
1711 2597
1711 2598
1711 569
1711 1807
1711 1073
1711 org.joda.time.base.BasePeriod$1.getValue(int)
1711 1074
129 130
129 java.lang.Object.clinit()
129 java.lang.Throwable.clinit()
129 java.lang.IllegalArgumentException(java.lang.String)
515 java.lang.Object()
3568 java.nio.CharBuffer.toString()
3568 java.lang.StringBuffer.toString()
3568 org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)
3568 java.lang.StringBuilder.toString()
3568 java.lang.String.toString()
1347 3293
1347 3286
1347 291
1347 1348
2320 1097
2600 java.lang.Object.clinit()
2600 java.lang.StringBuilder()
2600 java.lang.Throwable.clinit()
2600 java.lang.StringBuilder.append(java.lang.String)
2600 java.lang.StringBuilder.append(java.lang.Object)
2600 java.lang.Object.getClass()
2600 java.lang.ClassCastException(java.lang.String)
2600 java.lang.StringBuilder.toString()
2600 1808
335 336
335 3288
335 3286
335 291
335 1382
707 702
707 java.lang.Object.clinit()
707 java.lang.Throwable.clinit()
707 java.lang.IllegalArgumentException(java.lang.String)
707 708
707 3498
707 646
707 701
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 3399
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1375
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 3350
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1080
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1084
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.field.DividedDateTimeField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1380
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1079
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1376
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 1081
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long) 118
3768 java.lang.Object.clinit()
3768 3769
842 838
64 230
64 70
64 org.joda.time.field.UnsupportedDurationField.isPrecise()
64 69
64 org.joda.time.field.DelegatedDurationField.getUnitMillis()
64 java.lang.Throwable.clinit()
64 java.lang.IllegalArgumentException(java.lang.String)
64 239
64 1699
64 67
64 246
64 231
64 java.lang.Object.clinit()
64 org.joda.time.field.DelegatedDurationField.isPrecise()
64 3237
64 65
64 1823
64 388
64 68
2391 51
2391 java.lang.Object.clinit()
2391 org.joda.time.PeriodType.clinit()
2391 567
2391 57
2391 org.joda.time.DurationFieldType.clinit()
2391 59
3526 603
3526 java.lang.Object.clinit()
3526 79
3526 org.joda.time.DateTimeFieldType.clinit()
152 java.lang.Object.clinit()
152 org.joda.time.DateTimeFieldType.clinit()
358 130
358 org.joda.time.field.DelegatedDurationField.getType()
358 org.joda.time.field.UnsupportedDurationField.getType()
358 234
358 224
143 java.lang.Object.clinit()
143 org.joda.time.DateTimeFieldType.clinit()
3198 java.io.PrintStream.println(java.lang.String)
3198 org.joda.time.PeriodType.clinit()
3198 214
3198 java.lang.StringBuilder.append(java.lang.Object)
3198 org.joda.time.Period.clinit()
3198 36
3198 java.util.ArrayList.get(int)
3198 java.lang.System.clinit()
3198 1721
3198 java.lang.Object.clinit()
3198 1723
3198 3194
3198 3760
3198 java.lang.StringBuilder()
3198 585
3198 org.joda.time.chrono.ISOChronology.clinit()
3198 3136
3198 java.lang.String.equals(java.lang.Object)
3198 31
3198 org.joda.time.tz.ZoneInfoLogger.clinit()
3198 java.util.ArrayList.size()
3198 java.lang.Throwable.clinit()
3198 3193
3198 3200
3198 java.lang.IllegalArgumentException(java.lang.String)
3198 32
3198 java.lang.StringBuilder.toString()
3198 java.lang.String.intern()
3198 3189
3198 892
3198 org.joda.time.base.BasePeriod.clinit()
3198 java.lang.String.clinit()
3198 java.text.DateFormatSymbols.getZoneStrings()
3198 2391
3198 java.lang.IllegalArgumentException()
3198 1953
3198 java.text.DateFormatSymbols(java.util.Locale)
3198 3759
3198 java.lang.StringBuilder.append(java.lang.String)
3198 org.joda.time.DateTimeZone.clinit()
3198 java.util.Locale.clinit()
3198 java.text.DateFormatSymbols.clinit()
3198 3199
341 java.lang.Object.clinit()
341 297
341 org.joda.time.chrono.BasicGJChronology.clinit()
341 org.joda.time.chrono.BasicChronology.clinit()
341 337
3427 3406
2516 java.lang.Object.clinit()
2516 java.util.Locale.equals(java.lang.Object)
2516 2501
2516 org.joda.time.format.PeriodFormat.clinit()
2516 2513
2516 1795
1901 729
929 231
929 230
929 70
929 org.joda.time.field.DelegatedDurationField.getUnitMillis()
929 239
929 246
929 388
929 68
org.joda.time.convert.ReadableIntervalConverter.clinit() 855
org.joda.time.convert.ReadableIntervalConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.ReadableIntervalConverter.clinit() org.joda.time.convert.ReadableIntervalConverter.clinit()
org.joda.time.tz.CachedDateTimeZone.clinit() java.lang.Object.clinit()
org.joda.time.tz.CachedDateTimeZone.clinit() java.lang.Integer.getInteger(java.lang.String)
org.joda.time.tz.CachedDateTimeZone.clinit() org.joda.time.tz.CachedDateTimeZone.clinit()
org.joda.time.tz.CachedDateTimeZone.clinit() java.lang.Integer.clinit()
org.joda.time.tz.CachedDateTimeZone.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.tz.CachedDateTimeZone.clinit() java.lang.Integer.intValue()
1333 1347
1333 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
1333 1450
1333 3121
1333 3281
1333 1333
1333 382
1333 1404
1333 3425
1333 3122
1333 276
1333 3255
1666 3298
1666 java.lang.Object.clinit()
1666 1750
1666 3276
1666 1082
1666 1667
3305 1430
3305 3438
3305 3349
3305 org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
3305 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
3305 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
3305 org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
3305 3305
3305 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
680 505
680 java.lang.Object.clinit()
680 681
680 509
680 147
680 org.joda.time.DateTimeFieldType.clinit()
680 152
680 595
680 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
295 539
295 333
295 java.lang.Object.clinit()
295 296
295 476
295 298
295 553
678 505
678 java.lang.Object.clinit()
678 509
678 669
678 643
678 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
678 677
714 715
714 java.lang.Object.clinit()
714 695
714 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
964 586
3706 sun.text.CompactByteArray.clone()
3706 javax.crypto.Mac.clone()
3706 javax.naming.Reference.clone()
3706 java.util.Hashtable.clone()
3706 sun.security.krb5.internal.KerberosTime.clone()
3706 java.util.jar.Manifest.clone()
3706 sun.security.krb5.internal.Ticket.clone()
3706 sun.security.krb5.EncryptedData.clone()
3706 sun.text.IntHashtable.clone()
3706 sun.net.ProgressSource.clone()
3706 java.util.EnumSet.clone()
3706 sun.net.www.protocol.http.AuthenticationInfo.clone()
3706 sun.security.util.BitArray.clone()
3706 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
3706 java.security.SignatureSpi.clone()
3706 java.util.SimpleTimeZone.clone()
3706 java.util.JapaneseImperialCalendar.clone()
3706 sun.security.x509.GeneralSubtrees.clone()
3706 java.util.IdentityHashMap.clone()
3706 java.util.ArrayList.clone()
3706 sun.text.normalizer.NormalizerBase.clone()
3706 sun.security.krb5.internal.ETypeInfo.clone()
3706 javax.naming.CompositeName.clone()
3706 java.util.Locale.clone()
3706 java.security.Signature$Delegate.clone()
3706 sun.security.krb5.internal.TicketFlags.clone()
3706 sun.security.provider.MD4.clone()
3706 java.util.TreeSet.clone()
3706 java.util.Hashtable$Entry.clone()
3706 java.text.MessageFormat.clone()
3706 java.lang.Object.clone()
3706 sun.security.krb5.EncryptionKey.clone()
3706 java.text.DecimalFormat.clone()
3706 java.text.SimpleDateFormat.clone()
3706 java.util.Date.clone()
3706 sun.security.krb5.PrincipalName.clone()
3706 sun.net.www.MimeEntry.clone()
3706 sun.util.calendar.CalendarDate.clone()
3706 java.util.GregorianCalendar.clone()
3706 java.util.Vector.clone()
3706 sun.security.krb5.internal.AuthorizationData.clone()
3706 java.net.HttpCookie.clone()
3706 sun.security.krb5.internal.crypto.crc32.clone()
3706 java.util.zip.ZipEntry.clone()
3706 java.security.MessageDigest$Delegate.clone()
3706 sun.util.calendar.ZoneInfo.clone()
3706 sun.text.normalizer.CharacterIteratorWrapper.clone()
3706 java.text.DateFormatSymbols.clone()
3706 java.util.HashSet.clone()
3706 sun.util.calendar.ImmutableGregorianDate.clone()
3706 java.text.AttributedString$AttributedStringIterator.clone()
3706 java.text.RuleBasedBreakIterator.clone()
3706 sun.security.krb5.internal.LastReqEntry.clone()
3706 java.text.DecimalFormatSymbols.clone()
3706 java.text.DigitList.clone()
3706 java.text.RuleBasedCollator.clone()
3706 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
3706 java.text.ChoiceFormat.clone()
3706 java.lang.Thread.clone()
3706 1488
3706 sun.security.krb5.Realm.clone()
3706 java.util.ResourceBundle$CacheKey.clone()
3706 sun.security.krb5.internal.ETypeInfo2.clone()
3706 java.util.LinkedList.clone()
3706 2557
3706 java.text.StringCharacterIterator.clone()
3706 sun.security.x509.NameConstraintsExtension.clone()
3706 java.util.ArrayDeque.clone()
3706 java.util.jar.Attributes.clone()
3706 sun.security.krb5.internal.HostAddress.clone()
3706 sun.security.krb5.internal.PAData.clone()
3706 java.util.TreeMap.clone()
3706 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
3706 java.util.BitSet.clone()
3706 sun.security.krb5.internal.AuthorizationDataEntry.clone()
3706 java.lang.Enum.clone()
3706 java.util.AbstractMap.clone()
3706 sun.security.provider.PolicyParser$GrantEntry.clone()
3706 java.util.HashMap.clone()
3706 java.util.JumboEnumSet.clone()
3706 sun.security.krb5.internal.HostAddresses.clone()
3706 2357
3707 3689
3707 2440
3707 2517
3707 3707
940 java.lang.Object.clinit()
940 941
940 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1150 1457
1150 1149
1150 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1150 364
1150 932
1150 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1150 1150
1150 1454
1150 3341
1150 365
1150 3514
1150 1058
1150 3496
1150 1455
1150 1593
1150 934
1150 118
1150 3435
1150 286
1150 1648
694 505
694 java.lang.Object.clinit()
694 509
694 643
694 686
694 692
694 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2441 java.lang.String.length()
731 342
731 3410
731 960
731 732
731 java.lang.Object.clinit()
731 429
731 997
731 371
731 995
731 338
731 996
731 489
731 457
731 1103
731 330
731 992
731 994
731 1104
731 org.joda.time.format.FormatUtils.clinit()
731 991
731 384
731 329
731 3240
731 334
731 2195
731 1106
731 290
731 993
1446 3291
1446 1447
1446 3243
1446 3264
1416 java.lang.Object.clinit()
1416 java.lang.Throwable.clinit()
1416 java.lang.Integer.clinit()
1416 3230
1416 114
1416 java.lang.Integer.parseInt(java.lang.String)
1447 1464
1447 342
1447 3241
1447 3266
1447 1391
1447 3410
1447 960
1447 195
1447 429
1447 1448
1447 3242
1447 997
1447 1471
1447 371
1447 200
1447 995
1447 338
1447 3432
1447 996
1447 457
1447 1103
1447 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
1447 992
1447 330
1447 994
1447 1104
1447 991
1447 384
1447 329
1447 3240
1447 1446
1447 334
1447 1106
1447 3300
1447 290
1447 1390
1447 993
1447 3344
1969 org.joda.time.chrono.BaseChronology.dayOfMonth()
1969 java.lang.Throwable.clinit()
1969 org.joda.time.chrono.BaseChronology.monthOfYear()
1969 184
1969 java.lang.StringBuilder.toString()
1969 java.lang.StringBuilder.append(int)
1969 java.lang.IndexOutOfBoundsException(java.lang.String)
1969 java.lang.Object.clinit()
1969 195
1969 java.lang.StringBuilder()
1969 201
1969 200
1969 java.lang.StringBuilder.append(java.lang.String)
1969 org.joda.time.chrono.BaseChronology.millisOfDay()
1969 org.joda.time.chrono.BaseChronology.year()
362 294
362 290
org.joda.time.chrono.GregorianChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.GregorianChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.GregorianChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.GregorianChronology.clinit() org.joda.time.chrono.GregorianChronology.clinit()
org.joda.time.chrono.GregorianChronology.clinit() 91
org.joda.time.chrono.GregorianChronology.clinit() org.joda.time.chrono.BasicGJChronology.clinit()
org.joda.time.chrono.GregorianChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.GregorianChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
774 java.lang.Object.clinit()
774 775
282 1046
282 277
282 285
282 282
282 905
282 283
755 208
1798 1799
1798 java.lang.Object.clinit()
1798 java.lang.Object.equals(java.lang.Object)
1798 java.util.HashSet()
1798 java.util.HashSet.add(java.lang.Object)
1798 java.util.HashSet.clinit()
950 951
855 838
576 570
576 1719
576 577
1338 java.lang.Throwable.getMessage()
1338 java.lang.Object.clinit()
1338 795
1338 java.lang.Throwable.clinit()
1338 java.lang.IllegalArgumentException(java.lang.String)
1338 1024
336 294
336 297
336 337
137 81
137 118
1102 java.lang.Object.clinit()
1102 org.joda.time.chrono.BuddhistChronology.clinit()
2434 2515
2434 2433
2434 2435
2434 2434
2434 2441
942 3454
942 950
942 3568
942 3649
942 java.nio.CharBuffer.length()
942 917
942 525
942 949
942 java.lang.StringBuffer.length()
942 942
942 916
942 3551
942 3655
942 943
942 3641
942 1054
942 java.lang.String.length()
942 java.lang.StringBuilder.length()
942 3490
942 922
942 924
981 587
981 268
2507 1774
3258 org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
3258 1315
3258 1058
3258 org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
3258 3418
3258 3258
3258 118
3258 1314
3416 3406
664 505
664 java.lang.Object.clinit()
664 654
664 509
664 643
664 656
664 641
664 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3261 org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
3261 1319
3261 1058
3261 org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
3261 3261
3261 118
3261 1239
3261 3413
126 452
126 81
126 3428
126 1212
126 359
126 410
126 3062
126 448
126 479
126 116
126 432
126 141
126 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
126 129
126 244
126 383
126 407
126 133
126 1269
126 436
126 3061
126 1411
126 83
126 127
126 1210
126 117
126 212
126 2000
126 140
126 109
126 318
126 132
126 128
126 1211
126 3424
126 1004
126 453
126 957
126 380
126 213
126 java.lang.Object.clinit()
126 1435
126 321
126 409
126 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
126 java.lang.Throwable.clinit()
126 java.lang.IllegalArgumentException(java.lang.String)
126 134
126 119
126 319
126 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
126 406
126 3213
126 454
126 241
126 1388
126 402
126 408
126 2067
126 1999
126 247
126 403
org.joda.time.format.PeriodFormatterBuilder$Literal.clinit() java.lang.Object.clinit()
org.joda.time.format.PeriodFormatterBuilder$Literal.clinit() 1766
org.joda.time.format.PeriodFormatterBuilder$Literal.clinit() org.joda.time.format.PeriodFormatterBuilder$Literal.clinit()
504 98
1032 java.lang.Object.clinit()
1032 514
1032 518
1032 940
166 97
2271 org.joda.time.chrono.BaseChronology.millisOfSecond()
2271 org.joda.time.chrono.BaseChronology.hourOfDay()
2271 java.lang.Throwable.clinit()
2271 org.joda.time.chrono.BaseChronology.secondOfMinute()
2271 java.lang.StringBuilder.toString()
2271 java.lang.StringBuilder.append(int)
2271 java.lang.IndexOutOfBoundsException(java.lang.String)
2271 java.lang.Object.clinit()
2271 187
2271 org.joda.time.chrono.BaseChronology.minuteOfHour()
2271 java.lang.StringBuilder()
2271 189
2271 java.lang.StringBuilder.append(java.lang.String)
2271 185
2271 182
1789 1769
1079 342
1079 3396
1079 1112
1079 198
1079 1226
1079 org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
1079 1375
1079 429
1079 org.joda.time.field.DividedDateTimeField.add(long,long)
1079 903
1079 371
1079 338
1079 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1079 1104
1079 3235
1079 384
1079 1350
1079 3350
1079 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
1079 3272
1079 3240
1079 329
1079 334
1079 1106
1079 1079
1079 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1079 424
1079 org.joda.time.chrono.GJChronology.clinit()
1079 3399
1079 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1079 895
1079 3410
1079 960
1079 java.lang.Object.clinit()
1079 1084
1079 org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
1079 997
1079 995
1079 1081
1079 996
1079 1472
1079 457
1079 1103
1079 330
1079 992
1079 370
1079 994
1079 991
1079 1080
1079 1458
1079 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
1079 org.joda.time.field.DividedDateTimeField.add(long,int)
1079 1380
1079 201
1079 290
1079 900
1079 3347
1079 423
1079 1376
1079 993
1079 3268
3180 java.lang.Object()
2854 1308
2854 3015
2854 2805
2854 2901
2854 3075
2854 2962
2854 org.joda.time.field.DelegatedDateTimeField.getName()
2854 3393
2595 823
253 177
1325 3511
1325 1326
1325 1462
1325 org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale)
1325 org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)
1325 1423
1325 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale)
1325 1442
1325 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale)
1325 1325
1325 3423
3139 3140
3139 java.lang.Object()
438 495
438 385
438 753
438 219
438 478
438 1102
438 2211
438 org.joda.time.chrono.ZonedChronology.withUTC()
438 2258
438 org.joda.time.chrono.LimitChronology.withUTC()
438 523
438 749
438 269
2087 1971
1422 3411
1422 1422
1422 1320
1422 org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale)
1422 1420
1422 1240
1422 3280
3349 1430
3349 3438
3349 3349
3349 org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
3349 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
3349 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
3349 org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
3349 3305
3349 118
3349 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
275 java.lang.Object.clinit()
275 498
275 org.joda.time.DateTimeZone.clinit()
275 276
275 284
207 208
3410 3406
2752 java.lang.Object.clinit()
2752 45
2752 org.joda.time.DurationFieldType.clinit()
881 java.lang.Object.clinit()
881 882
881 org.joda.time.format.DateTimeFormat.clinit()
889 1046
889 1965
889 java.lang.Object.clinit()
889 277
889 890
889 java.lang.Throwable.clinit()
889 1335
889 285
889 1045
889 36
889 226
889 905
889 283
1794 java.lang.Object()
1299 789
1299 1144
1299 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
1299 1173
1299 792
1299 1906
1299 java.lang.Object.equals(java.lang.Object)
1299 781
1299 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
1299 2272
1299 584
1299 988
1299 787
1299 1107
771 java.lang.Object.clinit()
771 772
771 java.lang.Throwable.clinit()
771 java.lang.IllegalArgumentException(java.lang.String)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 1214
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3120
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 1138
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3071
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 2926
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3640
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 118
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3427
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) java.lang.Object.clinit()
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) 103
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) 498
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) 227
org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone) 220
86 java.lang.Object.clinit()
86 org.joda.time.DateTimeFieldType.clinit()
1209 org.joda.time.chrono.BaseChronology.dayOfMonth()
1209 java.lang.Throwable.clinit()
1209 org.joda.time.chrono.BaseChronology.monthOfYear()
1209 java.lang.StringBuilder.append(int)
1209 java.lang.StringBuilder.toString()
1209 java.lang.IndexOutOfBoundsException(java.lang.String)
1209 java.lang.Object.clinit()
1209 195
1209 java.lang.StringBuilder()
1209 201
1209 200
1209 java.lang.StringBuilder.append(java.lang.String)
1209 org.joda.time.chrono.BaseChronology.year()
2887 2023
2887 657
2887 java.lang.Object.clinit()
1623 java.lang.Object.clinit()
1623 1361
1623 1360
1623 589
1623 1363
747 208
2380 java.lang.Object.clinit()
2380 java.lang.Throwable.clinit()
2380 java.lang.IllegalArgumentException(java.lang.String)
2138 344
org.joda.time.tz.UTCProvider.clinit() java.lang.Object.clinit()
org.joda.time.tz.UTCProvider.clinit() org.joda.time.tz.UTCProvider.clinit()
org.joda.time.tz.UTCProvider.clinit() java.util.Collections.clinit()
org.joda.time.tz.UTCProvider.clinit() java.util.Collections.singleton(java.lang.Object)
org.joda.time.base.AbstractPartial.compareTo(java.lang.Object) 2014
org.joda.time.base.AbstractPartial.compareTo(java.lang.Object) 2183
org.joda.time.base.AbstractPartial.compareTo(java.lang.Object) 2018
org.joda.time.base.AbstractPartial.compareTo(java.lang.Object) 2311
1458 1472
1458 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1458 3396
1458 370
1458 895
1458 1112
1458 1226
1458 1350
1458 1458
1458 org.joda.time.field.DividedDateTimeField.add(long,int)
1458 900
1458 3347
1458 903
1458 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1458 3268
1458 118
1408 1343
1408 3303
1408 3254
1408 1408
1408 org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long)
1408 org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long)
1408 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(long)
1408 276
1408 3429
723 3470
723 725
723 625
723 3480
723 620
723 3543
723 606
723 java.lang.StringBuilder.toString()
723 607
723 726
723 1233
723 3501
723 3524
723 java.lang.Object.clinit()
723 3486
723 666
723 638
723 java.lang.StringBuilder(int)
723 724
222 228
222 java.lang.Object.clinit()
222 java.util.LinkedHashMap.get(java.lang.Object)
222 java.util.HashMap.containsKey(java.lang.Object)
222 170
222 java.util.HashMap.put(java.lang.Object,java.lang.Object)
222 org.joda.time.field.DelegatedDurationField.isSupported()
222 java.util.HashMap.get(java.lang.Object)
222 131
222 181
222 226
2018 1143
2018 2019
2018 2050
2018 1215
2018 java.lang.Throwable.clinit()
2018 2304
2018 1208
2018 1966
2018 1145
2018 2270
2018 2647
2018 1967
2018 2049
2018 2180
2018 java.lang.Object.clinit()
2018 2045
2018 2164
2018 2645
2018 2638
2018 java.lang.ClassCastException(java.lang.String)
2018 2636
2018 1132
708 java.lang.Object.clinit()
708 3499
3344 1464
3344 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3344 3266
3344 3241
3344 1391
3344 1446
3344 3300
3344 1448
3344 3242
3344 1471
3344 1390
3344 118
3344 3432
3344 3344
1047 342
1047 3410
1047 960
1047 429
1047 997
1047 371
1047 587
1047 995
1047 338
1047 996
1047 org.joda.time.chrono.BaseChronology.year()
1047 457
1047 1103
1047 330
1047 992
1047 994
1047 1104
1047 991
1047 384
1047 329
1047 3240
1047 588
1047 334
1047 1106
1047 290
1047 201
1047 993
357 449
357 480
357 357
357 123
357 256
357 124
357 251
357 245
357 250
357 243
357 242
357 248
357 211
357 3395
357 249
357 389
357 236
357 253
357 459
357 254
342 71
3757 java.lang.Object.clinit()
3757 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
3757 java.util.Collections$CheckedCollection.add(java.lang.Object)
3757 java.util.ArrayList.clinit()
3757 java.util.AbstractList.add(java.lang.Object)
3757 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
3757 java.util.Vector.add(java.lang.Object)
3757 java.util.LinkedList.add(java.lang.Object)
3757 java.util.ArrayList()
3757 java.util.ArrayList.add(java.lang.Object)
3757 java.lang.Object()
1375 3399
1375 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1375 1375
1375 3350
1375 org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
1375 1080
1375 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
1375 276
1375 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
1375 284
1375 1084
1375 org.joda.time.field.DividedDateTimeField.add(long,long)
1375 1380
1375 org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
1375 1079
1375 1376
1375 1354
1375 1081
org.joda.time.chrono.BaseChronology.years() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.years() 57
org.joda.time.chrono.BaseChronology.years() 162
org.joda.time.chrono.BaseChronology.years() org.joda.time.DurationFieldType.clinit()
340 294
340 477
340 341
340 554
739 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
739 3433
739 java.lang.StringBuffer(int)
739 java.lang.StringBuffer.clinit()
739 java.lang.StringBuffer.toString()
739 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
739 36
739 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
739 592
739 java.lang.Object.clinit()
739 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
739 514
739 org.joda.time.field.RemainderDateTimeField.remainder(long)
739 3278
739 656
739 1900
739 3097
739 1656
739 3297
739 org.joda.time.chrono.BaseChronology.dayOfYear()
739 3096
739 736
739 385
739 740
739 java.lang.StringBuffer.append(char)
739 196
739 java.lang.StringBuffer.append(int)
739 387
739 3098
739 3351
739 java.lang.StringBuffer.append(java.lang.String)
739 268
739 1439
739 org.joda.time.chrono.GJChronology.clinit()
739 org.joda.time.field.DividedDateTimeField.remainder(long)
367 375
367 368
1223 1014
91 java.lang.Object.clinit()
91 92
91 org.joda.time.chrono.GregorianChronology.clinit()
91 org.joda.time.chrono.BasicGJChronology.clinit()
91 org.joda.time.chrono.BasicChronology.clinit()
244 java.lang.Object.clinit()
244 162
244 54
244 org.joda.time.DurationFieldType.clinit()
907 909
907 3168
907 908
907 org.joda.time.UTCDateTimeZone.previousTransition(long)
907 907
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() org.joda.time.tz.ZoneInfoCompiler$Zone.toString()
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.StringBuilder()
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.ZoneInfoCompiler$Zone.toString() java.lang.StringBuilder.append(int)
973 java.lang.Object.clinit()
973 java.lang.StringBuilder()
973 java.lang.ArithmeticException(java.lang.String)
973 java.lang.Throwable.clinit()
973 java.lang.StringBuilder.append(java.lang.String)
973 java.lang.StringBuilder.toString()
973 java.lang.StringBuilder.append(int)
973 java.lang.StringBuilder.append(long)
3400 3398
384 369
324 325
3717 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
3717 java.util.Collections$CheckedCollection.add(java.lang.Object)
3717 java.util.AbstractList.add(java.lang.Object)
3717 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
3717 java.util.Vector.add(java.lang.Object)
3717 java.util.LinkedList.add(java.lang.Object)
3717 java.util.ArrayList.add(java.lang.Object)
777 750
777 780
777 770
777 778
777 754
777 776
777 java.lang.StringBuilder.toString()
777 777
777 738
777 741
777 java.lang.Object.clinit()
777 org.joda.time.DateTimeZone$LazyInit$1.toString()
777 java.lang.StringBuilder()
777 739
777 779
777 java.lang.StringBuilder.append(char)
777 103
777 746
777 java.lang.StringBuilder.append(java.lang.String)
777 1114
777 743
777 745
3386 3273
3386 1749
3386 1930
3386 1368
3386 225
3386 1748
3386 3402
3386 1700
3386 3386
3386 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
127 241
127 479
127 128
127 134
127 247
127 359
127 410
127 244
127 127
127 448
127 454
127 3213
org.joda.time.DurationFieldType.clinit() 43
org.joda.time.DurationFieldType.clinit() java.lang.Object.clinit()
org.joda.time.DurationFieldType.clinit() org.joda.time.DurationFieldType.clinit()
163 41
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 1222
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 304
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 3756
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 3296
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 1515
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 2016
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 938
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 386
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) java.lang.Object.clinit()
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 3239
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 3295
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 439
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 1506
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 103
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 3265
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 498
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone) 1068
844 838
2000 383
2000 407
2000 1211
2000 133
2000 3424
2000 119
2000 436
2000 453
2000 1004
2000 1411
2000 1212
2000 3062
2000 213
2000 117
2000 1388
2000 2000
2000 408
2000 1435
2000 141
2000 409
2000 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object) 989
615 java.lang.Object.clinit()
615 156
615 org.joda.time.DateTimeFieldType.clinit()
615 596
2925 1136
2925 3431
2925 3119
2925 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
2925 2925
2925 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
3105 981
3753 java.lang.String.equals(java.lang.Object)
318 452
318 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
318 132
318 1269
318 3428
318 3061
318 957
318 83
318 319
318 380
318 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
318 406
318 1210
318 212
318 402
318 116
318 432
318 140
318 321
318 2067
318 1999
318 403
318 318
1767 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
1767 java.util.Collections$CheckedCollection.add(java.lang.Object)
1767 java.util.AbstractList.add(java.lang.Object)
1767 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
1767 java.util.Vector.add(java.lang.Object)
1767 java.util.LinkedList.add(java.lang.Object)
1767 java.util.ArrayList.add(java.lang.Object)
3241 1464
3241 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3241 3266
3241 3241
3241 1391
3241 1446
3241 3300
3241 1448
3241 1058
3241 3242
3241 1471
3241 1390
3241 118
3241 3432
3241 3344
895 3397
895 128
895 1162
895 3382
895 134
895 896
895 359
895 448
895 127
895 1061
895 454
895 org.joda.time.field.DelegatedDurationField.add(long,int)
895 241
895 1111
895 479
895 org.joda.time.field.DecoratedDurationField.add(long,int)
895 1062
895 901
895 247
895 244
1440 java.lang.Object.clinit()
1440 1441
1440 1242
1440 org.joda.time.chrono.GJLocaleSymbols.clinit()
453 383
453 407
453 1211
453 133
453 3424
453 119
453 436
453 453
453 1004
453 1411
453 1212
453 3062
453 213
453 117
453 1388
453 2000
453 408
453 1435
453 141
453 409
453 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
647 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
647 java.util.Collections$CheckedCollection.add(java.lang.Object)
647 java.util.AbstractList.add(java.lang.Object)
647 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
647 java.util.Vector.add(java.lang.Object)
647 java.util.LinkedList.add(java.lang.Object)
647 java.util.ArrayList.add(java.lang.Object)
732 org.joda.time.chrono.BaseChronology.yearOfCentury()
732 org.joda.time.chrono.BaseChronology.dayOfMonth()
732 192
732 198
732 205
732 187
732 org.joda.time.chrono.BaseChronology.yearOfEra()
732 org.joda.time.chrono.BaseChronology.weekOfWeekyear()
732 org.joda.time.chrono.BaseChronology.minuteOfDay()
732 200
732 org.joda.time.chrono.BaseChronology.millisOfDay()
732 185
732 191
732 190
732 org.joda.time.chrono.BaseChronology.dayOfYear()
732 org.joda.time.chrono.BaseChronology.clockhourOfDay()
732 188
732 org.joda.time.chrono.BaseChronology.secondOfMinute()
732 196
732 org.joda.time.chrono.BaseChronology.minuteOfHour()
732 java.lang.InternalError()
732 org.joda.time.chrono.BaseChronology.hourOfDay()
732 org.joda.time.chrono.BaseChronology.weekyear()
732 org.joda.time.chrono.BaseChronology.centuryOfEra()
732 274
732 org.joda.time.chrono.BaseChronology.secondOfDay()
732 184
732 203
732 195
732 java.lang.Object.clinit()
732 204
732 189
732 202
732 194
732 182
732 org.joda.time.chrono.BaseChronology.year()
732 org.joda.time.chrono.BaseChronology.millisOfSecond()
732 java.lang.Throwable.clinit()
732 org.joda.time.chrono.BaseChronology.monthOfYear()
732 197
732 org.joda.time.chrono.BaseChronology.weekyearOfCentury()
732 org.joda.time.chrono.BaseChronology.era()
732 org.joda.time.chrono.BaseChronology.halfdayOfDay()
732 org.joda.time.chrono.BaseChronology.clockhourOfHalfday()
732 org.joda.time.chrono.BaseChronology.hourOfHalfday()
732 201
732 org.joda.time.DateTimeUtils.clinit()
732 186
732 org.joda.time.chrono.BaseChronology.dayOfWeek()
732 193
732 199
684 505
684 java.lang.Object.clinit()
684 73
684 681
684 509
684 org.joda.time.DateTimeFieldType.clinit()
684 506
684 77
684 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
684 75
2605 java.lang.Object.clinit()
2605 java.lang.System.currentTimeMillis()
2605 java.lang.System.clinit()
3141 1046
3141 3145
3141 277
3141 3153
3141 3515
3141 285
3141 3142
3141 3144
3141 905
3141 283
775 767
775 3445
775 768
775 762
775 org.joda.time.field.DelegatedDateTimeField.getWrappedField()
775 1377
775 1378
775 java.lang.Object.clinit()
775 org.joda.time.field.StrictDateTimeField.isLenient()
775 763
775 765
775 org.joda.time.field.StrictDateTimeField(org.joda.time.DateTimeField)
775 org.joda.time.chrono.GJChronology$CutoverField.isLenient()
775 766
775 769
775 org.joda.time.field.LenientDateTimeField.isLenient()
org.joda.time.field.StrictDateTimeField(org.joda.time.DateTimeField) 315
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) 1397
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) 3436
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) 3352
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long) 118
1023 java.lang.Throwable.getMessage()
1023 java.lang.Object.clinit()
1023 795
1023 java.lang.Throwable.clinit()
1023 java.lang.IllegalArgumentException(java.lang.String)
1023 1024
728 java.lang.Object.clinit()
728 org.joda.time.chrono.ISOChronology.clinit()
728 497
728 302
728 588
284 1046
284 456
284 277
284 285
284 905
284 283
562 568
562 java.lang.Object.clinit()
562 559
562 563
562 org.joda.time.DateTimeUtils.clinit()
562 274
759 760
org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int) 344
1398 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
1398 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
1398 363
1398 3302
1398 3345
1398 276
1398 284
1398 3304
1398 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
1398 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
1398 1399
1398 1398
1398 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
1398 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
1398 362
1398 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
1398 1354
1398 3434
1398 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit() java.lang.Object.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit() org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
729 755
729 3482
729 744
729 520
729 219
729 207
729 1102
729 java.lang.Object.clinit()
729 751
729 2258
729 org.joda.time.chrono.LimitChronology.withUTC()
729 749
729 724
729 905
729 304
729 495
729 3503
729 747
729 385
729 753
729 3530
729 3525
729 733
729 3544
729 478
729 737
729 1237
729 731
729 1046
729 2211
729 277
729 org.joda.time.chrono.ZonedChronology.withUTC()
729 522
729 730
729 285
729 387
729 org.joda.time.DateTimeZone.clinit()
729 523
729 1251
729 226
729 269
729 3519
729 3471
729 734
729 283
2301 2023
2301 java.lang.Object.clinit()
2301 2302
789 20
789 789
789 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
789 1173
789 792
789 451
789 1906
789 java.lang.Object.equals(java.lang.Object)
789 1040
789 781
789 3126
789 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
789 103
789 790
789 2272
789 584
789 988
789 226
789 787
789 1107
146 64
146 java.lang.Object.clinit()
146 147
146 org.joda.time.DateTimeFieldType.clinit()
444 130
444 org.joda.time.field.DelegatedDurationField.getType()
444 org.joda.time.field.UnsupportedDurationField.getType()
444 234
444 224
1173 989
374 java.lang.Object.clinit()
374 java.lang.Integer.clinit()
374 java.lang.Throwable.clinit()
374 114
374 404
374 java.lang.Integer.valueOf(int)
374 1023
374 3355
78 java.lang.Object.clinit()
78 org.joda.time.DateTimeFieldType.clinit()
3516 java.lang.Object.clinit()
3516 org.joda.time.DateTimeFieldType.clinit()
3516 152
3516 1230
3352 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
3352 1397
3352 org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
3352 org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
3352 3436
3352 3352
3352 org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
3352 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
3352 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
3352 118
org.joda.time.convert.ReadableDurationConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.ReadableDurationConverter.clinit() 853
org.joda.time.convert.ReadableDurationConverter.clinit() org.joda.time.convert.ReadableDurationConverter.clinit()
927 3059
927 170
927 org.joda.time.field.DelegatedDurationField.compareTo(java.lang.Object)
927 org.joda.time.field.DelegatedDurationField.isSupported()
927 131
927 181
927 3361
927 928
144 64
144 java.lang.Object.clinit()
144 145
144 org.joda.time.DateTimeFieldType.clinit()
63 230
63 70
63 org.joda.time.field.UnsupportedDurationField.isPrecise()
63 69
63 org.joda.time.field.DelegatedDurationField.getUnitMillis()
63 java.lang.Throwable.clinit()
63 java.lang.IllegalArgumentException(java.lang.String)
63 239
63 71
63 1699
63 67
63 246
63 231
63 java.lang.Object.clinit()
63 64
63 org.joda.time.field.DelegatedDurationField.isPrecise()
63 3237
63 1823
63 388
63 68
org.joda.time.LocalTime.clinit() 61
org.joda.time.LocalTime.clinit() 1090
org.joda.time.LocalTime.clinit() javax.security.auth.Subject$SecureSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() 48
org.joda.time.LocalTime.clinit() java.util.TreeSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.Collections$SetFromMap.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.Collections$SynchronizedCollection.add(java.lang.Object)
org.joda.time.LocalTime.clinit() 49
org.joda.time.LocalTime.clinit() java.util.HashSet()
org.joda.time.LocalTime.clinit() java.util.RegularEnumSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() javax.security.auth.Subject$ClassSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.AbstractCollection.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.JumboEnumSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.Collections$CheckedMap$CheckedEntrySet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.HashSet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() org.joda.time.DurationFieldType.clinit()
org.joda.time.LocalTime.clinit() java.util.HashSet.clinit()
org.joda.time.LocalTime.clinit() java.lang.Object.clinit()
org.joda.time.LocalTime.clinit() java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
org.joda.time.LocalTime.clinit() org.joda.time.LocalTime.clinit()
org.joda.time.LocalTime.clinit() java.util.Collections$CheckedCollection.add(java.lang.Object)
org.joda.time.LocalTime.clinit() sun.nio.ch.Util$2.add(java.lang.Object)
org.joda.time.LocalTime.clinit() java.util.Hashtable$EntrySet.add(java.lang.Object)
org.joda.time.LocalTime.clinit() 45
111 java.lang.Object.clinit()
111 81
111 org.joda.time.DateTimeFieldType.clinit()
111 112
3279 org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale)
3279 3416
3279 3259
3279 3509
3279 1440
3279 1316
3279 1417
3279 3279
3279 1460
3279 1419
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3294
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1986
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1987
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1998
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 959
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1985
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1401
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1348
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) java.lang.Object.clinit()
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3293
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 106
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1988
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2027
org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2788
1513 414
831 java.lang.Object.clinit()
831 2605
831 org.joda.time.DateTimeUtils.clinit()
831 832
831 3118
567 java.lang.Object()
3185 417
3185 214
3185 342
3185 435
3185 455
3185 373
3185 3410
3185 960
3185 1281
3185 java.lang.Object.clinit()
3185 429
3185 430
3185 org.joda.time.chrono.ISOChronology.clinit()
3185 422
3185 997
3185 1273
3185 371
3185 2120
3185 893
3185 995
3185 338
3185 996
3185 379
3185 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3185 421
3185 457
3185 1103
3185 330
3185 992
3185 994
3185 1104
3185 1275
3185 org.joda.time.field.StrictDateTimeField.set(long,int)
3185 991
3185 384
3185 3439
3185 329
3185 3240
3185 3513
3185 2119
3185 334
3185 1106
3185 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3185 290
3185 201
3185 419
3185 420
3185 1277
3185 993
3185 1379
2514 java.lang.Object()
3069 643
3069 org.joda.time.DateTimeFieldType.clinit()
3069 java.lang.ProcessEnvironment$StringEntrySet.remove(java.lang.Object)
3069 java.util.HashMap$EntrySet.remove(java.lang.Object)
3069 158
3069 sun.nio.ch.Util$2.remove(java.lang.Object)
3069 java.util.WeakHashMap$KeySet.remove(java.lang.Object)
3069 java.util.IdentityHashMap$Values.remove(java.lang.Object)
3069 3609
3069 java.util.Collections$CheckedMap$CheckedEntrySet.remove(java.lang.Object)
3069 java.util.ArrayDeque.remove(java.lang.Object)
3069 623
3069 java.util.concurrent.SynchronousQueue.remove(java.lang.Object)
3069 java.util.Collections$AsLIFOQueue.remove(java.lang.Object)
3069 java.util.HashSet.remove(java.lang.Object)
3069 java.util.concurrent.ConcurrentHashMap$EntrySet.remove(java.lang.Object)
3069 java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object)
3069 java.util.RegularEnumSet.remove(java.lang.Object)
3069 619
3069 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3069 java.util.Collections$SynchronizedCollection.remove(java.lang.Object)
3069 java.util.AbstractCollection.remove(java.lang.Object)
3069 java.util.JumboEnumSet.remove(java.lang.Object)
3069 java.util.IdentityHashMap$EntrySet.remove(java.lang.Object)
3069 java.util.Collections$CheckedCollection.remove(java.lang.Object)
3069 java.lang.ProcessEnvironment$StringValues.remove(java.lang.Object)
3069 java.util.TreeSet.remove(java.lang.Object)
3069 java.util.concurrent.ConcurrentHashMap$KeySet.remove(java.lang.Object)
3069 java.util.TreeMap$Values.remove(java.lang.Object)
3069 java.util.Collections$UnmodifiableCollection.remove(java.lang.Object)
3069 java.util.IdentityHashMap$KeySet.remove(java.lang.Object)
3069 java.util.HashMap$KeySet.remove(java.lang.Object)
3069 java.util.TreeMap$EntrySet.remove(java.lang.Object)
3069 java.util.TreeMap$NavigableSubMap$EntrySetView.remove(java.lang.Object)
3069 java.lang.Object.clinit()
3069 156
3069 3068
3069 java.lang.ProcessEnvironment$StringKeySet.remove(java.lang.Object)
3069 java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)
3069 java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object)
3069 java.util.Hashtable$KeySet.remove(java.lang.Object)
3069 sun.misc.SoftCache$EntrySet.remove(java.lang.Object)
3069 java.util.Vector.remove(java.lang.Object)
3069 java.util.Collections$SetFromMap.remove(java.lang.Object)
3069 java.util.LinkedList.remove(java.lang.Object)
3069 145
3069 java.util.WeakHashMap$EntrySet.remove(java.lang.Object)
3069 600
3069 java.util.TreeMap$KeySet.remove(java.lang.Object)
3069 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remove(java.lang.Object)
3069 javax.security.auth.Subject$SecureSet.remove(java.lang.Object)
3069 3002
3069 java.util.ArrayList.remove(java.lang.Object)
3069 java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)
3069 java.util.Hashtable$EntrySet.remove(java.lang.Object)
210 java.lang.Object.clinit()
210 81
210 201
210 org.joda.time.DateTimeFieldType.clinit()
210 165
210 112
210 org.joda.time.chrono.GregorianChronology.clinit()
210 org.joda.time.chrono.BasicGJChronology.clinit()
210 org.joda.time.chrono.BasicChronology.clinit()
59 java.lang.Object.clinit()
59 org.joda.time.DurationFieldType.clinit()
838 java.lang.Object()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap$1$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.security.Provider.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() javax.security.auth.Subject$SecureSet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SingletonList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.net.www.MessageHeader$HeaderIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap$2$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SynchronizedMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.net.www.HeaderParser$ParserIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.SoftCache.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ArrayBlockingQueue$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractSequentialList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.JumboEnumSet$EnumSetIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedList$ListItr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ServiceLoader$LazyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.String.indexOf(int)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedList$DescendingIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.JumboEnumSet$EnumSetIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedList$DescendingIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap$2$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap$HashIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedHashMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList$SubList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap$1$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.String.substring(int)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Hashtable.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayDeque$DescendingIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Hashtable$Enumerator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedList.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() javax.security.auth.Subject$SecureSet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Vector.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableList$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$EmptyMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.cs.FastCharsetProvider$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$EmptyMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedList$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Vector$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList$SubList$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.SoftCache.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableCollection.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.SoftCache$EntrySet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList$SubList$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.net.www.HeaderParser$ParserIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.cs.FastCharsetProvider$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.AbstractPath$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedList$ListItr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$EmptyIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Scanner.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedCollection$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayDeque$DescendingIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedHashMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedList$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SingletonMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$EmptyList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SynchronizedCollection.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayDeque$DeqIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedHashMap$LinkedHashIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.LinkedBlockingQueue$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.Math.max(int,int)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SingletonMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedCollection.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringEntrySet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap$1$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.String.length()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringValues$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap$1$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringKeySet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$DescendingKeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$PrivateEntryIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList(java.util.Collection)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.Service$LazyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Scanner.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.IdentityHashMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedCollection.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Hashtable$Enumerator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.RegularEnumSet$EnumSetIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() 3523
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.WeakHashMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.security.jca.ProviderList$ServiceList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.util.PreHashedMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.SubList$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() 3151
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$EmptyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SynchronizedCollection.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedHashMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ServiceLoader$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$ValueIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap$2$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringValues$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.AbstractPath$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.SubList.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$EntryIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.jar.Attributes.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.jar.Attributes.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringEnvironment.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.security.Provider.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.LinkedHashMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections.sort(java.util.List)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableList$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.String.substring(int,int)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.nio.charset.Charset$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableCollection$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.SubList$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableCollection$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.RegularEnumSet$EnumSetIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Hashtable.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.SoftCache$EntrySet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap$KeyIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.security.jca.ProviderList$ServiceList$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$1.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractMap$2$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Hashtable.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ServiceLoader$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.security.jca.ProviderList$ServiceList$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SynchronizedMap.containsKey(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ServiceLoader$LazyIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Vector$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayDeque$DeqIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.Object.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$CheckedCollection$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractList.add(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractList$Itr.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.lang.Math.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.misc.Service$LazyIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.nio.charset.Charset$1.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.net.www.MessageHeader$HeaderIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Vector.iterator()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.text.AttributedString$AttributeMap.get(java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.ArrayList()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.TreeMap.put(java.lang.Object,java.lang.Object)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.HashMap$HashIterator.hasNext()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit() java.util.AbstractList$Itr.hasNext()
420 379
420 421
420 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
420 417
420 435
420 1275
420 org.joda.time.field.StrictDateTimeField.set(long,int)
420 455
420 3439
420 3513
420 373
420 2119
420 1281
420 430
420 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
420 422
420 419
420 1273
420 420
420 2120
420 1277
420 1379
883 613
883 1178
883 3505
883 885
883 3527
883 java.lang.String.charAt(int)
883 3529
883 3521
883 631
883 3516
883 org.joda.time.format.DateTimeFormat.clinit()
883 627
883 633
883 884
883 java.lang.Object.clinit()
883 java.lang.StringBuilder()
883 1026
883 1229
883 java.lang.String(java.lang.String)
883 java.lang.String.substring(int)
883 623
883 635
883 3484
883 3508
883 595
883 3478
883 java.lang.Throwable.clinit()
883 3492
883 java.lang.IllegalArgumentException(java.lang.String)
883 619
883 3533
883 600
883 java.lang.StringBuilder.toString()
883 3520
883 3507
883 3493
883 java.lang.String.clinit()
883 3517
883 602
883 629
883 3518
883 3526
883 java.lang.StringBuilder.append(java.lang.String)
883 615
883 617
883 java.lang.String.length()
883 1047
2804 3015
2804 2805
2804 2901
2804 3075
2804 114
2804 2962
2804 404
2804 3355
309 java.lang.Object.clinit()
309 103
309 104
309 313
2151 224
3399 1076
3399 3400
3399 1078
3399 org.joda.time.field.DecoratedDurationField.add(long,long)
3399 1077
3399 org.joda.time.field.DelegatedDurationField.add(long,long)
3399 1087
3399 1085
3399 1164
3399 3385
3399 3213
2469 164
2469 java.lang.Object.hashCode()
2469 569
2469 1073
2469 org.joda.time.base.BasePeriod$1.getValue(int)
2469 1074
1153 587
1153 268
1417 java.lang.Object.clinit()
1417 1242
1417 org.joda.time.chrono.GJLocaleSymbols.clinit()
1417 1418
217 java.lang.String.hashCode()
217 36
400 401
151 549
151 java.lang.Object.clinit()
151 108
151 org.joda.time.DateTimeFieldType.clinit()
151 153
151 312
151 152
151 154
151 470
151 471
1787 1769
1152 java.lang.Object.clinit()
1152 org.joda.time.DateTimeUtils.clinit()
1152 274
1152 302
1152 588
2791 java.lang.Object.clinit()
2791 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
691 505
691 java.lang.Object.clinit()
691 509
691 643
691 686
691 689
691 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
458 223
458 216
458 org.joda.time.field.UnsupportedDurationField.hashCode()
458 458
458 556
458 java.lang.Object.hashCode()
458 232
458 org.joda.time.field.DelegatedDurationField.hashCode()
458 217
458 233
458 93
512 611
30 java.lang.Object()
1215 java.lang.Object.clinit()
1215 org.joda.time.YearMonthDay.clinit()
385 386
385 java.lang.Object.clinit()
385 org.joda.time.DateTimeZone.clinit()
938 java.lang.Object.clinit()
938 304
938 215
938 org.joda.time.chrono.ISOChronology.clinit()
938 498
938 org.joda.time.DateTimeZone.clinit()
600 java.lang.Object.clinit()
600 508
600 601
org.joda.time.chrono.BaseChronology.weekyearOfCentury() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.weekyearOfCentury() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.weekyearOfCentury() 1201
org.joda.time.chrono.BaseChronology.weekyearOfCentury() 177
org.joda.time.chrono.BaseChronology.weekyearOfCentury() org.joda.time.chrono.BaseChronology.weekyears()
org.joda.time.chrono.BaseChronology.weekyearOfCentury() 159
682 597
1614 588
2114 java.io.PrintStream.append(java.lang.CharSequence)
2114 java.lang.StringBuffer.append(java.lang.CharSequence)
2114 java.io.StringWriter.append(char)
2114 java.lang.StringBuilder.append(java.lang.CharSequence)
2114 java.io.PrintStream.append(char)
2114 java.lang.StringBuffer.append(char)
2114 java.io.Writer.append(java.lang.CharSequence)
2114 java.io.PrintWriter.append(java.lang.CharSequence)
2114 java.io.Writer.append(char)
2114 java.nio.CharBuffer.append(java.lang.CharSequence)
2114 java.lang.StringBuilder.append(char)
2114 java.nio.CharBuffer.append(char)
2114 java.io.StringWriter.append(java.lang.CharSequence)
2114 2115
2114 java.io.PrintWriter.append(char)
org.joda.time.field.DelegatedDurationField.isPrecise() org.joda.time.field.UnsupportedDurationField.isPrecise()
org.joda.time.field.DelegatedDurationField.isPrecise() 69
org.joda.time.field.DelegatedDurationField.isPrecise() org.joda.time.field.DelegatedDurationField.isPrecise()
org.joda.time.field.DelegatedDurationField.isPrecise() 3237
org.joda.time.field.DelegatedDurationField.isPrecise() 1699
org.joda.time.field.DelegatedDurationField.isPrecise() 1823
org.joda.time.field.DelegatedDurationField.isPrecise() 67
394 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
394 411
394 java.lang.Object.clinit()
394 439
394 org.joda.time.chrono.BuddhistChronology.clinit()
394 498
394 org.joda.time.DateTimeZone.clinit()
394 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
394 398
394 395
394 org.joda.time.chrono.GJChronology.clinit()
org.joda.time.chrono.BaseChronology.centuries() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.centuries() 162
org.joda.time.chrono.BaseChronology.centuries() 58
org.joda.time.chrono.BaseChronology.centuries() org.joda.time.DurationFieldType.clinit()
1367 128
1367 134
1367 1368
1367 359
1367 1700
1367 3386
1367 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
1367 448
1367 127
1367 454
1367 3273
1367 241
1367 479
1367 1749
1367 1930
1367 1748
1367 247
1367 3402
1367 244
2357 java.lang.Object.clinit()
2357 java.lang.Throwable.clinit()
2357 java.lang.InternalError(java.lang.String)
2357 java.lang.Object.clone()
61 java.lang.Object.clinit()
61 org.joda.time.DurationFieldType.clinit()
org.joda.time.UTCDateTimeZone.clinit() org.joda.time.UTCDateTimeZone.clinit()
org.joda.time.UTCDateTimeZone.clinit() java.lang.Object.clinit()
org.joda.time.UTCDateTimeZone.clinit() 4
org.joda.time.UTCDateTimeZone.clinit() org.joda.time.DateTimeZone.clinit()
902 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
902 342
902 3396
902 895
902 1112
902 1226
902 3410
902 960
902 429
902 997
902 903
902 371
902 194
902 995
902 338
902 996
902 1472
902 457
902 1103
902 992
902 330
902 370
902 994
902 1104
902 991
902 1350
902 384
902 1458
902 329
902 3240
902 334
902 org.joda.time.field.DividedDateTimeField.add(long,int)
902 1106
902 290
902 900
902 3347
902 org.joda.time.chrono.BaseChronology.dayOfWeek()
902 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
902 993
902 3268
11 java.io.File.clinit()
11 java.io.FileInputStream(java.io.File)
11 java.lang.Object.clinit()
11 java.security.AccessController.doPrivileged(java.security.PrivilegedAction)
11 java.io.FileInputStream.clinit()
11 12
11 java.lang.Throwable.clinit()
11 java.lang.Object.toString()
11 java.lang.StringBuilder.append(java.lang.String)
11 java.lang.StringBuilder(int)
11 13
11 java.io.IOException(java.lang.String)
11 java.lang.StringBuilder.toString()
11 java.io.File(java.io.File,java.lang.String)
11 java.lang.String.concat(java.lang.String)
2439 java.lang.Object.clinit()
2439 java.lang.Math.log(double)
2439 2439
2439 org.joda.time.format.FormatUtils.clinit()
2439 java.lang.Math.clinit()
3383 3364
3383 org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
3383 org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
3383 3348
3383 3383
3383 225
3383 org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
3383 3404
3383 org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
3383 org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
3383 1369
2038 2050
2038 791
2038 303
2038 1208
2038 1385
2038 1966
2038 2647
2038 1967
2038 2180
2038 2045
2038 2164
2038 org.joda.time.chrono.JulianChronology.hashCode()
2038 1096
2038 2645
2038 2638
2038 2636
2038 1143
2038 2019
2038 1936
2038 782
2038 1384
2038 1215
2038 2046
2038 2304
2038 java.lang.Object.hashCode()
2038 1134
2038 org.joda.time.chrono.GregorianChronology.hashCode()
2038 793
2038 org.joda.time.chrono.BuddhistChronology.hashCode()
2038 288
2038 2270
2038 1145
2038 org.joda.time.chrono.IslamicChronology.hashCode()
2038 2049
2038 org.joda.time.chrono.EthiopicChronology.hashCode()
2038 1968
2038 1132
2038 788
1137 452
1137 132
1137 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
1137 1269
1137 3061
1137 957
1137 83
1137 319
1137 380
1137 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
1137 1210
1137 212
1137 402
1137 116
1137 432
1137 140
1137 321
1137 2067
1137 1999
2443 2436
703 667
703 639
703 608
703 621
703 3481
703 org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength()
703 704
703 1234
703 3654
703 609
703 703
703 org.joda.time.format.DateTimeFormat$StyleFormatter.estimateParsedLength()
703 3487
703 706
2518 3714
2518 2443
2518 2518
2518 org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)
2518 2442
656 657
656 java.lang.Object.clinit()
641 505
641 java.lang.Object.clinit()
641 509
641 600
641 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1091 1093
1091 495
1091 753
1091 385
1091 274
1091 219
1091 2140
1091 1092
1091 478
1091 272
1091 1102
1091 java.lang.Object.clinit()
1091 2211
1091 1508
1091 org.joda.time.chrono.ZonedChronology.withUTC()
1091 org.joda.time.DateTimeUtils.clinit()
1091 2258
1091 org.joda.time.chrono.LimitChronology.withUTC()
1091 749
1091 523
1091 269
3763 3764
3763 java.util.StringTokenizer.nextToken()
org.joda.time.format.PeriodFormat.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.format.PeriodFormat.clinit() java.lang.Object.clinit()
org.joda.time.format.PeriodFormat.clinit() org.joda.time.format.PeriodFormat.clinit()
org.joda.time.format.PeriodFormat.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
834 java.lang.Object.clinit()
834 835
316 317
688 505
688 java.lang.Object.clinit()
688 509
688 643
688 686
688 680
688 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3107 1308
3107 java.lang.Object.clinit()
3107 java.lang.StringBuilder()
3107 java.lang.StringBuilder.append(char)
3107 java.lang.StringBuilder.append(java.lang.String)
3107 java.lang.StringBuilder.toString()
930 1149
930 1414
930 org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
930 3341
930 3233
930 1415
930 3495
930 1455
930 1593
930 934
930 3435
930 286
930 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
930 931
930 1457
930 org.joda.time.field.DividedDateTimeField.roundFloor(long)
930 364
930 3441
930 932
930 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
930 933
930 1454
930 1150
930 org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
930 365
930 3514
930 3496
930 3231
930 1648
2302 java.lang.Object.clinit()
2302 2303
2302 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3182 3183
3182 34
3182 java.util.ArrayList.clinit()
3182 java.util.ArrayList.size()
3182 java.lang.Throwable.clinit()
3182 3738
3182 3200
3182 3201
3182 3195
3182 org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit()
3182 java.util.ArrayList.get(int)
3182 3189
3182 3184
3182 3192
3182 java.lang.Object.clinit()
3182 3194
3182 3197
3182 java.lang.IllegalArgumentException()
3182 org.joda.time.tz.CachedDateTimeZone.clinit()
3182 3190
3182 org.joda.time.DateTimeZone.clinit()
3182 java.util.ArrayList()
3182 3191
3182 3198
3182 3199
2028 java.io.Writer.append(char)
2028 java.nio.CharBuffer.append(char)
2028 java.lang.StringBuilder.append(char)
2028 java.io.StringWriter.append(char)
2028 java.io.PrintWriter.append(char)
2028 java.lang.StringBuffer.append(char)
2028 java.io.PrintStream.append(char)
2158 68
org.joda.time.chrono.IslamicChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.IslamicChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.IslamicChronology.clinit() 393
org.joda.time.chrono.IslamicChronology.clinit() org.joda.time.chrono.IslamicChronology.clinit()
org.joda.time.chrono.IslamicChronology.clinit() 542
org.joda.time.chrono.IslamicChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.IslamicChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.IslamicChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.IslamicChronology.clinit() 543
1762 java.util.Collections$SynchronizedCollection.clear()
1762 java.lang.Object.clinit()
1762 java.util.Vector.clear()
1762 java.util.ArrayList.clinit()
1762 java.util.Collections$CheckedCollection.clear()
1762 java.util.LinkedList.clear()
1762 java.util.AbstractList.clear()
1762 java.util.Collections$UnmodifiableCollection.clear()
1762 java.util.ArrayList()
1762 java.util.ArrayList.clear()
529 sun.text.CompactByteArray.clone()
529 org.joda.time.DateTimeFieldType.clinit()
529 sun.security.krb5.internal.KerberosTime.clone()
529 java.util.Hashtable.clone()
529 sun.security.krb5.internal.Ticket.clone()
529 sun.text.IntHashtable.clone()
529 410
529 sun.security.util.BitArray.clone()
529 java.util.SimpleTimeZone.clone()
529 java.util.IdentityHashMap.clone()
529 java.util.JapaneseImperialCalendar.clone()
529 sun.security.krb5.internal.ETypeInfo.clone()
529 sun.text.normalizer.NormalizerBase.clone()
529 java.util.Locale.clone()
529 479
529 sun.security.krb5.internal.TicketFlags.clone()
529 sun.security.provider.MD4.clone()
529 106
529 java.text.MessageFormat.clone()
529 244
529 java.lang.Object.clone()
529 1965
529 java.text.SimpleDateFormat.clone()
529 sun.security.krb5.PrincipalName.clone()
529 org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String)
529 930
529 java.util.GregorianCalendar.clone()
529 127
529 org.joda.time.DurationFieldType.clinit()
529 529
529 java.util.Vector.clone()
529 java.net.HttpCookie.clone()
529 51
529 java.text.DateFormatSymbols.clone()
529 java.util.HashSet.clone()
529 sun.util.calendar.ImmutableGregorianDate.clone()
529 java.text.AttributedString$AttributedStringIterator.clone()
529 java.text.RuleBasedBreakIterator.clone()
529 sun.security.krb5.internal.LastReqEntry.clone()
529 java.lang.StringBuilder()
529 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
529 java.text.RuleBasedCollator.clone()
529 1488
529 java.util.ResourceBundle$CacheKey.clone()
529 sun.security.krb5.internal.ETypeInfo2.clone()
529 134
529 java.util.LinkedList.clone()
529 2557
529 java.util.ArrayDeque.clone()
529 824
529 918
529 sun.security.krb5.internal.PAData.clone()
529 3213
529 1046
529 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
529 277
529 sun.security.krb5.internal.AuthorizationDataEntry.clone()
529 java.util.JumboEnumSet.clone()
529 sun.security.krb5.internal.HostAddresses.clone()
529 283
529 javax.crypto.Mac.clone()
529 javax.naming.Reference.clone()
529 java.util.jar.Manifest.clone()
529 sun.security.krb5.EncryptedData.clone()
529 java.lang.StringBuilder.append(java.lang.Object)
529 sun.net.ProgressSource.clone()
529 359
529 sun.net.www.protocol.http.AuthenticationInfo.clone()
529 java.util.EnumSet.clone()
529 530
529 java.security.SignatureSpi.clone()
529 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
529 448
529 sun.security.x509.GeneralSubtrees.clone()
529 927
529 java.util.ArrayList.clone()
529 javax.naming.CompositeName.clone()
529 java.security.Signature$Delegate.clone()
529 java.lang.StringBuilder.append(char)
529 java.util.Hashtable$Entry.clone()
529 java.util.TreeSet.clone()
529 1045
529 sun.security.krb5.EncryptionKey.clone()
529 java.text.DecimalFormat.clone()
529 java.util.Date.clone()
529 sun.net.www.MimeEntry.clone()
529 sun.util.calendar.CalendarDate.clone()
529 java.lang.StringBuilder.toString()
529 59
529 890
529 285
529 java.lang.StringBuilder.append(java.lang.String)
529 sun.security.krb5.internal.AuthorizationData.clone()
529 3171
529 sun.security.krb5.internal.crypto.crc32.clone()
529 java.util.zip.ZipEntry.clone()
529 sun.util.calendar.ZoneInfo.clone()
529 java.security.MessageDigest$Delegate.clone()
529 sun.text.normalizer.CharacterIteratorWrapper.clone()
529 128
529 java.lang.Object.clinit()
529 java.text.DecimalFormatSymbols.clone()
529 java.text.DigitList.clone()
529 java.text.ChoiceFormat.clone()
529 java.lang.Thread.clone()
529 905
529 sun.security.krb5.Realm.clone()
529 java.lang.Throwable.clinit()
529 java.text.StringCharacterIterator.clone()
529 sun.security.x509.NameConstraintsExtension.clone()
529 java.util.jar.Attributes.clone()
529 sun.security.krb5.internal.HostAddress.clone()
529 454
529 java.util.TreeMap.clone()
529 241
529 java.util.BitSet.clone()
529 java.lang.Enum.clone()
529 java.util.AbstractMap.clone()
529 java.lang.Integer.intValue()
529 247
529 sun.security.provider.PolicyParser$GrantEntry.clone()
529 java.util.HashMap.clone()
529 2357
1277 417
1277 342
1277 435
1277 455
1277 374
1277 373
1277 3410
1277 960
1277 1281
1277 java.lang.Object.clinit()
1277 429
1277 430
1277 422
1277 997
1277 1273
1277 371
1277 2120
1277 995
1277 338
1277 118
1277 996
1277 379
1277 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1277 421
1277 457
1277 1103
1277 330
1277 992
1277 994
1277 1104
1277 1275
1277 org.joda.time.field.StrictDateTimeField.set(long,int)
1277 991
1277 1278
1277 384
1277 3439
1277 329
1277 3240
1277 3513
1277 2119
1277 334
1277 1106
1277 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1277 290
1277 419
1277 420
1277 1277
1277 993
1277 1379
3689 3690
3689 java.lang.String.length()
3640 1143
3640 2050
3640 1215
3640 org.joda.time.DateTimeFieldType.clinit()
3640 1208
3640 1966
3640 2270
3640 2647
3640 1967
3640 java.lang.Object.clinit()
3640 2045
3640 156
3640 2164
3640 2645
3640 2638
3640 375
3640 2636
3640 1132
52 java.lang.Object.clinit()
52 org.joda.time.DurationFieldType.clinit()
679 505
679 java.lang.Object.clinit()
679 509
679 643
679 670
679 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
679 677
3478 java.lang.Object.clinit()
3478 3479
3478 646
org.joda.time.field.UnsupportedDurationField.hashCode() java.lang.String.hashCode()
org.joda.time.field.UnsupportedDurationField.hashCode() 3236
360 356
304 755
304 304
304 744
304 522
304 751
304 747
304 387
304 226
304 207
92 218
92 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
92 92
92 java.lang.Throwable.clinit()
92 java.lang.IllegalArgumentException(java.lang.String)
92 94
92 java.lang.StringBuilder.toString()
92 java.lang.StringBuilder.append(int)
92 java.lang.Object.clinit()
92 java.lang.StringBuilder()
92 498
92 java.lang.StringBuilder.append(java.lang.String)
92 org.joda.time.DateTimeZone.clinit()
92 org.joda.time.chrono.GregorianChronology.clinit()
92 org.joda.time.chrono.BasicGJChronology.clinit()
92 org.joda.time.chrono.BasicChronology.clinit()
92 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
933 379
933 421
933 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
933 417
933 435
933 1275
933 org.joda.time.field.StrictDateTimeField.set(long,int)
933 455
933 3439
933 3513
933 373
933 2119
933 1281
933 430
933 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
933 422
933 419
933 1273
933 420
933 2120
933 1277
933 1379
org.joda.time.chrono.GregorianChronology.hashCode() 1386
2026 java.lang.Object.clinit()
2026 1986
2026 2195
2026 1987
2026 1998
2026 org.joda.time.format.FormatUtils.clinit()
2026 1988
2026 2027
2026 1985
2026 2788
2026 1401
2026 489
3690 java.lang.String.clinit()
3690 java.lang.Object.clinit()
3690 java.lang.String.valueOf(int)
3690 java.util.regex.Pattern.matcher(java.lang.CharSequence)
3690 java.util.regex.Matcher.matches()
908 909
908 java.lang.Object.clinit()
908 java.util.Arrays.clinit()
908 java.util.Arrays.binarySearch(long[],long)
org.joda.time.chrono.BaseChronology.weeks() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.weeks() 52
org.joda.time.chrono.BaseChronology.weeks() 162
org.joda.time.chrono.BaseChronology.weeks() org.joda.time.DurationFieldType.clinit()
941 java.lang.Object.clinit()
941 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
692 505
692 java.lang.Object.clinit()
692 681
692 145
692 509
692 org.joda.time.DateTimeFieldType.clinit()
692 600
692 615
692 158
692 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3243 1464
3243 342
3243 3241
3243 3266
3243 1391
3243 3410
3243 960
3243 195
3243 429
3243 1448
3243 3242
3243 997
3243 1471
3243 371
3243 200
3243 995
3243 338
3243 3432
3243 996
3243 457
3243 1103
3243 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3243 992
3243 330
3243 994
3243 1104
3243 991
3243 384
3243 329
3243 3240
3243 1446
3243 334
3243 1106
3243 3300
3243 290
3243 1390
3243 993
3243 3344
1354 1046
1354 java.lang.Object.clinit()
1354 277
1354 java.lang.ArithmeticException(java.lang.String)
1354 java.lang.Throwable.clinit()
1354 285
1354 905
1354 283
315 316
3471 3482
3471 3503
3471 3530
3471 3525
3471 733
3471 3544
3471 737
3471 1237
3471 731
3471 730
3471 1251
3471 3471
3471 3519
3471 734
3174 java.util.ArrayList.size()
3174 3175
3174 java.util.ArrayList.get(int)
3276 371
3276 1666
3276 3098
3276 375
1512 1513
1144 1143
1144 2050
1144 2019
1144 2046
1144 1215
1144 2304
1144 1134
1144 589
1144 1208
1144 1966
1144 288
1144 1145
1144 2270
1144 2647
1144 1967
1144 2049
1144 2180
1144 java.lang.Object.clinit()
1144 2045
1144 2164
1144 1096
1144 2645
1144 2638
1144 1968
1144 2636
1144 1132
3296 java.lang.Object.clinit()
3296 744
3296 498
3296 org.joda.time.DateTimeZone.clinit()
3296 org.joda.time.chrono.JulianChronology.clinit()
3296 org.joda.time.chrono.BasicGJChronology.clinit()
3296 org.joda.time.chrono.BasicChronology.clinit()
3296 306
1404 936
3521 java.lang.Object.clinit()
3521 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit()
3521 646
456 1428
456 java.lang.Throwable.clinit()
456 281
456 1335
456 36
456 3167
456 org.joda.time.UTCDateTimeZone.nextTransition(long)
456 1046
456 java.lang.Object.clinit()
456 277
456 java.lang.ArithmeticException(java.lang.String)
456 285
456 891
456 905
456 283
278 java.lang.Object.clinit()
278 org.joda.time.tz.CachedDateTimeZone.clinit()
278 org.joda.time.DateTimeZone.clinit()
278 279
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) 3346
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) 3306
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) 3437
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long) 1432
1253 java.lang.Object.clinit()
1253 214
1253 1254
1253 org.joda.time.chrono.ISOChronology.clinit()
510 604
510 java.lang.Object.clinit()
510 java.util.ArrayList.size()
510 java.util.ArrayList.get(int)
577 571
3490 java.nio.StringCharBuffer.subSequence(int,int)
3490 java.lang.StringBuffer.charAt(int)
3490 java.nio.ByteBufferAsCharBufferRB.subSequence(int,int)
3490 java.lang.StringBuffer.toString()
3490 java.lang.String.charAt(int)
3490 java.nio.CharBuffer.length()
3490 java.nio.DirectCharBufferU.subSequence(int,int)
3490 java.nio.DirectCharBufferRU.subSequence(int,int)
3490 java.lang.StringBuffer.length()
3490 java.lang.Object.clinit()
3490 java.nio.ByteBufferAsCharBufferL.subSequence(int,int)
3490 java.lang.Math.clinit()
3490 java.lang.String.subSequence(int,int)
3490 java.lang.StringBuilder.length()
3490 java.nio.CharBuffer.charAt(int)
3490 java.lang.StringBuffer.subSequence(int,int)
3490 java.lang.Integer.clinit()
3490 java.nio.ByteBufferAsCharBufferRL.subSequence(int,int)
3490 java.lang.Math.min(int,int)
3490 java.lang.Integer.parseInt(java.lang.String)
3490 java.nio.HeapCharBufferR.subSequence(int,int)
3490 3491
3490 java.lang.StringBuilder.toString()
3490 java.nio.DirectCharBufferS.subSequence(int,int)
3490 java.lang.String.toString()
3490 918
3490 java.nio.DirectCharBufferRS.subSequence(int,int)
3490 java.nio.HeapCharBuffer.subSequence(int,int)
3490 java.nio.CharBuffer.toString()
3490 java.lang.Integer.intValue()
3490 java.lang.StringBuilder.charAt(int)
3490 java.lang.String.length()
3490 java.nio.ByteBufferAsCharBufferB.subSequence(int,int)
3490 java.lang.StringBuilder.subSequence(int,int)
1457 1149
1457 1457
1457 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1457 364
1457 932
1457 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1457 1150
1457 1454
1457 3341
1457 365
1457 3514
1457 3496
1457 1455
1457 1593
1457 934
1457 118
1457 3435
1457 286
1457 1648
3157 java.lang.Object.clinit()
3157 java.lang.String.equalsIgnoreCase(java.lang.String)
3157 org.joda.time.DateTimeZone.clinit()
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2030
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2031
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2118
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2025
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2028
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2114
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) 2026
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
1011 java.lang.Object.clinit()
1011 org.joda.time.DateTimeUtils.clinit()
1011 274
1350 1472
1350 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1350 3396
1350 370
1350 895
1350 1112
1350 1226
1350 1350
1350 1458
1350 276
1350 284
1350 org.joda.time.field.DividedDateTimeField.add(long,int)
1350 900
1350 3347
1350 903
1350 1354
1350 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1350 3268
733 java.io.Writer.append(char)
733 java.nio.CharBuffer.append(char)
733 java.lang.StringBuilder.append(char)
733 java.io.StringWriter.append(char)
733 java.io.PrintWriter.append(char)
733 java.lang.StringBuffer.append(char)
733 java.io.PrintStream.append(char)
org.joda.time.chrono.JulianChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.JulianChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.JulianChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.JulianChronology.clinit() org.joda.time.chrono.JulianChronology.clinit()
org.joda.time.chrono.JulianChronology.clinit() org.joda.time.chrono.BasicGJChronology.clinit()
org.joda.time.chrono.JulianChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.JulianChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.JulianChronology.clinit() 306
381 1347
381 1450
381 382
381 1404
353 354
1935 303
1935 791
1935 1361
1935 1936
1935 782
1935 java.lang.Object.hashCode()
1935 org.joda.time.chrono.GregorianChronology.hashCode()
1935 1385
1935 1363
1935 org.joda.time.chrono.BuddhistChronology.hashCode()
1935 793
1935 org.joda.time.chrono.IslamicChronology.hashCode()
1935 org.joda.time.chrono.JulianChronology.hashCode()
1935 org.joda.time.chrono.EthiopicChronology.hashCode()
1935 1360
1935 788
155 java.lang.Object.clinit()
155 156
155 108
155 547
155 310
155 org.joda.time.DateTimeFieldType.clinit()
155 107
155 468
95 96
604 3470
604 639
604 667
604 725
604 625
604 org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength()
604 704
604 620
604 3543
604 java.util.ArrayList.isEmpty()
604 1234
604 java.util.ArrayList.get(int)
604 3501
604 1233
604 java.lang.Object.clinit()
604 3486
604 3524
604 3654
604 609
604 703
604 638
604 java.util.ArrayList.contains(java.lang.Object)
604 3487
604 605
604 java.lang.Object()
604 621
604 java.util.ArrayList.size()
604 java.util.ArrayList.clinit()
604 608
604 3481
604 3480
604 606
604 607
604 666
604 org.joda.time.format.DateTimeFormat$StyleFormatter.estimateParsedLength()
604 java.util.ArrayList()
604 706
3551 3454
3551 3568
3551 3649
3551 917
3551 525
3551 949
3551 942
3551 916
3551 3551
3551 3655
3551 3455
3551 3545
3551 3641
3551 1054
3551 645
3551 3490
3551 922
3551 924
890 909
890 1428
890 3168
890 281
890 3167
890 org.joda.time.UTCDateTimeZone.previousTransition(long)
890 org.joda.time.UTCDateTimeZone.nextTransition(long)
890 1046
890 277
890 908
890 285
890 891
890 905
890 907
890 283
1318 2228
1318 1195
1318 2086
1318 2320
1318 3261
1318 1613
1318 2319
1318 1612
1318 3413
1318 org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
1318 1497
1318 1498
1318 2229
1318 1319
1318 1194
1318 org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
1318 1239
1318 2087
3190 3194
3190 java.util.ArrayList.remove(int)
3190 java.util.ArrayList.size()
3190 3193
3190 3190
3190 org.joda.time.tz.DateTimeZoneBuilder$Transition.withMillis(long)
3190 java.util.ArrayList.add(java.lang.Object)
3190 java.util.ArrayList.get(int)
3190 3189
356 java.lang.Object.clinit()
356 358
356 353
427 java.lang.Object.clinit()
427 428
427 347
427 org.joda.time.chrono.JulianChronology.clinit()
427 org.joda.time.chrono.BasicGJChronology.clinit()
427 org.joda.time.chrono.BasicChronology.clinit()
314 315
314 318
743 742
1439 3297
1439 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
1439 3096
1439 3433
1439 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
1439 736
1439 276
1439 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
1439 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
1439 org.joda.time.field.RemainderDateTimeField.remainder(long)
1439 3278
1439 3098
1439 3097
1439 3351
1439 1656
1439 1439
1439 org.joda.time.field.DividedDateTimeField.remainder(long)
org.joda.time.chrono.BaseChronology.hourOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.hourOfDay() 173
org.joda.time.chrono.BaseChronology.hourOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.hourOfDay() 77
org.joda.time.chrono.BaseChronology.hourOfDay() 1201
org.joda.time.chrono.BaseChronology.hourOfDay() org.joda.time.chrono.BaseChronology.hours()
667 666
206 755
206 744
206 122
206 128
206 org.joda.time.DateTimeFieldType.clinit()
206 359
206 137
206 410
206 207
206 448
206 java.lang.Object.clinit()
206 479
206 751
206 136
206 244
206 138
206 org.joda.time.chrono.ISOYearOfEraDateTimeField.clinit()
206 304
206 134
206 121
206 747
206 127
206 159
206 3213
206 454
206 241
206 522
206 103
206 387
206 org.joda.time.DateTimeZone.clinit()
206 247
206 226
149 java.lang.Object.clinit()
149 org.joda.time.DateTimeFieldType.clinit()
org.joda.time.Period.clinit() org.joda.time.base.BasePeriod.clinit()
org.joda.time.Period.clinit() java.lang.Object.clinit()
org.joda.time.Period.clinit() 561
org.joda.time.Period.clinit() org.joda.time.Period.clinit()
897 java.lang.Object.clinit()
897 java.lang.StringBuilder()
897 java.lang.ArithmeticException(java.lang.String)
897 java.lang.Throwable.clinit()
897 java.lang.StringBuilder.append(java.lang.String)
897 java.lang.StringBuilder.toString()
897 java.lang.StringBuilder.append(long)
1432 1149
1432 342
1432 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
1432 3302
1432 960
1432 3341
1432 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
1432 429
1432 997
1432 371
1432 1455
1432 1593
1432 995
1432 338
1432 996
1432 934
1432 286
1432 1103
1432 457
1432 1457
1432 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
1432 992
1432 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1432 1104
1432 994
1432 364
1432 991
1432 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1432 932
1432 384
1432 363
1432 1150
1432 1454
1432 3345
1432 3240
1432 334
1432 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
1432 1399
1432 3514
1432 365
1432 290
1432 1398
1432 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
1432 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
1432 3496
1432 362
1432 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
1432 993
1432 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
951 952
951 java.lang.Object.clinit()
951 953
951 954
951 955
951 956
951 948
1172 789
1172 1144
1172 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
1172 1173
1172 792
1172 1906
1172 java.lang.Object.equals(java.lang.Object)
1172 781
1172 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
1172 2272
1172 584
1172 988
1172 787
1172 1107
997 1103
997 457
997 330
997 992
997 342
997 1104
997 994
997 1004
997 991
997 384
997 3240
997 329
997 960
997 3410
997 334
997 429
997 1106
997 290
997 997
997 371
997 995
997 338
997 993
997 996
997 118
3297 3297
3297 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
3297 3096
3297 3433
3297 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
3297 736
3297 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
3297 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
3297 org.joda.time.field.RemainderDateTimeField.remainder(long)
3297 3278
3297 3098
3297 3097
3297 3351
3297 1656
3297 1439
3297 org.joda.time.field.DividedDateTimeField.remainder(long)
15 java.util.concurrent.ConcurrentHashMap()
15 java.lang.Object.clinit()
15 16
15 java.lang.ref.SoftReference(java.lang.Object)
15 org.joda.time.DateTimeZone.clinit()
15 java.lang.ref.Reference.clinit()
15 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
15 java.io.DataInputStream(java.io.InputStream)
15 java.util.concurrent.ConcurrentHashMap.clinit()
15 java.io.FilterInputStream.close()
113 114
113 115
113 404
113 3355
3507 84
3507 603
3507 java.lang.Object.clinit()
3507 org.joda.time.DateTimeFieldType.clinit()
345 java.lang.Object.clinit()
345 java.lang.Integer.clinit()
345 java.lang.Throwable.clinit()
345 java.lang.Integer.valueOf(int)
345 1023
882 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
882 505
882 java.lang.Object.clinit()
882 509
882 java.lang.Throwable.clinit()
882 java.lang.IllegalArgumentException(java.lang.String)
882 883
882 java.lang.String.length()
882 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
882 org.joda.time.format.DateTimeFormat.clinit()
882 java.util.concurrent.ConcurrentHashMap.size()
2209 823
1790 sun.text.CompactByteArray.clone()
1790 1798
1790 javax.crypto.Mac.clone()
1790 javax.naming.Reference.clone()
1790 java.util.Hashtable.clone()
1790 java.util.jar.Manifest.clone()
1790 sun.security.krb5.internal.KerberosTime.clone()
1790 sun.security.krb5.internal.Ticket.clone()
1790 sun.security.krb5.EncryptedData.clone()
1790 sun.text.IntHashtable.clone()
1790 sun.net.ProgressSource.clone()
1790 java.util.EnumSet.clone()
1790 sun.net.www.protocol.http.AuthenticationInfo.clone()
1790 sun.security.util.BitArray.clone()
1790 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
1790 java.security.SignatureSpi.clone()
1790 java.util.SimpleTimeZone.clone()
1790 java.util.JapaneseImperialCalendar.clone()
1790 java.util.IdentityHashMap.clone()
1790 sun.security.x509.GeneralSubtrees.clone()
1790 java.util.ArrayList.clone()
1790 sun.text.normalizer.NormalizerBase.clone()
1790 sun.security.krb5.internal.ETypeInfo.clone()
1790 javax.naming.CompositeName.clone()
1790 java.util.Locale.clone()
1790 java.security.Signature$Delegate.clone()
1790 sun.security.krb5.internal.TicketFlags.clone()
1790 sun.security.provider.MD4.clone()
1790 java.util.TreeSet.clone()
1790 java.util.Hashtable$Entry.clone()
1790 java.text.MessageFormat.clone()
1790 java.lang.Object.clone()
1790 sun.security.krb5.EncryptionKey.clone()
1790 java.text.DecimalFormat.clone()
1790 java.text.SimpleDateFormat.clone()
1790 java.util.Date.clone()
1790 sun.security.krb5.PrincipalName.clone()
1790 sun.net.www.MimeEntry.clone()
1790 sun.util.calendar.CalendarDate.clone()
1790 java.util.GregorianCalendar.clone()
1790 java.util.Vector.clone()
1790 sun.security.krb5.internal.AuthorizationData.clone()
1790 java.net.HttpCookie.clone()
1790 sun.security.krb5.internal.crypto.crc32.clone()
1790 java.util.zip.ZipEntry.clone()
1790 java.security.MessageDigest$Delegate.clone()
1790 sun.util.calendar.ZoneInfo.clone()
1790 sun.text.normalizer.CharacterIteratorWrapper.clone()
1790 java.text.DateFormatSymbols.clone()
1790 java.util.HashSet.clone()
1790 sun.util.calendar.ImmutableGregorianDate.clone()
1790 java.text.AttributedString$AttributedStringIterator.clone()
1790 java.text.RuleBasedBreakIterator.clone()
1790 java.lang.Object.clinit()
1790 sun.security.krb5.internal.LastReqEntry.clone()
1790 java.text.DecimalFormatSymbols.clone()
1790 java.text.DigitList.clone()
1790 java.text.RuleBasedCollator.clone()
1790 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
1790 java.text.ChoiceFormat.clone()
1790 java.lang.Thread.clone()
1790 1488
1790 sun.security.krb5.Realm.clone()
1790 org.joda.time.format.PeriodFormatterBuilder.clinit()
1790 java.util.ResourceBundle$CacheKey.clone()
1790 sun.security.krb5.internal.ETypeInfo2.clone()
1790 java.util.LinkedList.clone()
1790 2557
1790 java.text.StringCharacterIterator.clone()
1790 sun.security.x509.NameConstraintsExtension.clone()
1790 java.util.ArrayDeque.clone()
1790 java.util.jar.Attributes.clone()
1790 sun.security.krb5.internal.HostAddress.clone()
1790 sun.security.krb5.internal.PAData.clone()
1790 java.util.TreeMap.clone()
1790 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
1790 java.util.BitSet.clone()
1790 sun.security.krb5.internal.AuthorizationDataEntry.clone()
1790 1791
1790 java.lang.Enum.clone()
1790 java.util.AbstractMap.clone()
1790 java.util.HashMap.clone()
1790 sun.security.provider.PolicyParser$GrantEntry.clone()
1790 java.util.JumboEnumSet.clone()
1790 sun.security.krb5.internal.HostAddresses.clone()
1790 2357
485 java.lang.Object.clinit()
485 java.lang.StringBuilder()
485 490
485 java.lang.Throwable.clinit()
485 486
485 java.lang.IllegalArgumentException(java.lang.String)
485 java.lang.StringBuilder.append(java.lang.String)
485 org.joda.time.DateTimeZone.clinit()
485 java.lang.StringBuilder.toString()
485 java.lang.StringBuilder.append(int)
3552 java.util.Locale.equals(java.lang.Object)
887 1057
887 1262
887 415
887 889
887 473
887 550
887 416
887 103
887 538
887 887
887 3115
887 888
264 java.lang.Object()
3685 sun.text.CompactByteArray.clone()
3685 javax.crypto.Mac.clone()
3685 javax.naming.Reference.clone()
3685 java.util.Hashtable.clone()
3685 sun.security.krb5.internal.KerberosTime.clone()
3685 java.util.jar.Manifest.clone()
3685 sun.security.krb5.internal.Ticket.clone()
3685 sun.security.krb5.EncryptedData.clone()
3685 sun.text.IntHashtable.clone()
3685 sun.net.ProgressSource.clone()
3685 java.util.EnumSet.clone()
3685 sun.net.www.protocol.http.AuthenticationInfo.clone()
3685 sun.security.util.BitArray.clone()
3685 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
3685 java.security.SignatureSpi.clone()
3685 java.util.SimpleTimeZone.clone()
3685 java.util.JapaneseImperialCalendar.clone()
3685 sun.security.x509.GeneralSubtrees.clone()
3685 java.util.IdentityHashMap.clone()
3685 java.util.ArrayList.clone()
3685 sun.text.normalizer.NormalizerBase.clone()
3685 sun.security.krb5.internal.ETypeInfo.clone()
3685 javax.naming.CompositeName.clone()
3685 java.util.Locale.clone()
3685 java.security.Signature$Delegate.clone()
3685 sun.security.krb5.internal.TicketFlags.clone()
3685 sun.security.provider.MD4.clone()
3685 java.util.TreeSet.clone()
3685 java.util.Hashtable$Entry.clone()
3685 java.text.MessageFormat.clone()
3685 java.lang.Object.clone()
3685 sun.security.krb5.EncryptionKey.clone()
3685 java.text.DecimalFormat.clone()
3685 java.text.SimpleDateFormat.clone()
3685 java.util.Date.clone()
3685 sun.security.krb5.PrincipalName.clone()
3685 sun.net.www.MimeEntry.clone()
3685 sun.util.calendar.CalendarDate.clone()
3685 java.util.GregorianCalendar.clone()
3685 java.util.Vector.clone()
3685 sun.security.krb5.internal.AuthorizationData.clone()
3685 java.net.HttpCookie.clone()
3685 sun.security.krb5.internal.crypto.crc32.clone()
3685 java.util.zip.ZipEntry.clone()
3685 java.security.MessageDigest$Delegate.clone()
3685 sun.util.calendar.ZoneInfo.clone()
3685 sun.text.normalizer.CharacterIteratorWrapper.clone()
3685 java.text.DateFormatSymbols.clone()
3685 java.util.HashSet.clone()
3685 sun.util.calendar.ImmutableGregorianDate.clone()
3685 java.text.AttributedString$AttributedStringIterator.clone()
3685 java.text.RuleBasedBreakIterator.clone()
3685 sun.security.krb5.internal.LastReqEntry.clone()
3685 java.text.DecimalFormatSymbols.clone()
3685 java.text.DigitList.clone()
3685 java.text.RuleBasedCollator.clone()
3685 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
3685 java.text.ChoiceFormat.clone()
3685 java.lang.Thread.clone()
3685 1488
3685 sun.security.krb5.Realm.clone()
3685 java.util.ResourceBundle$CacheKey.clone()
3685 sun.security.krb5.internal.ETypeInfo2.clone()
3685 java.util.LinkedList.clone()
3685 2557
3685 java.text.StringCharacterIterator.clone()
3685 sun.security.x509.NameConstraintsExtension.clone()
3685 java.util.ArrayDeque.clone()
3685 java.util.jar.Attributes.clone()
3685 sun.security.krb5.internal.HostAddress.clone()
3685 sun.security.krb5.internal.PAData.clone()
3685 java.util.TreeMap.clone()
3685 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
3685 java.util.BitSet.clone()
3685 sun.security.krb5.internal.AuthorizationDataEntry.clone()
3685 java.lang.Enum.clone()
3685 java.util.AbstractMap.clone()
3685 sun.security.provider.PolicyParser$GrantEntry.clone()
3685 java.util.HashMap.clone()
3685 java.util.JumboEnumSet.clone()
3685 sun.security.krb5.internal.HostAddresses.clone()
3685 2357
520 3756
520 org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
520 org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
520 3296
520 274
520 2016
520 938
520 org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
520 java.lang.Object.clinit()
520 386
520 org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
520 3239
520 3295
520 org.joda.time.DateTimeUtils.clinit()
520 3265
520 1068
435 java.lang.Object.clinit()
435 342
435 436
435 374
435 83
1370 java.lang.Object.clinit()
1370 java.lang.StringBuilder()
1370 java.lang.ArithmeticException(java.lang.String)
1370 java.lang.Throwable.clinit()
1370 java.lang.StringBuilder.append(java.lang.String)
1370 java.lang.StringBuilder.toString()
1370 java.lang.StringBuilder.append(long)
2438 576
2438 1073
2438 org.joda.time.base.BasePeriod$1.getValue(int)
526 java.lang.StringBuffer.length()
526 java.nio.CharBuffer.charAt(int)
526 java.lang.Object.clinit()
526 java.lang.StringBuffer.charAt(int)
526 java.lang.String.charAt(int)
526 java.nio.CharBuffer.length()
526 java.lang.Math.clinit()
526 java.lang.Math.min(int,int)
526 java.lang.StringBuilder.charAt(int)
526 java.lang.String.length()
526 java.lang.StringBuilder.length()
1057 1057
1057 1262
1057 415
1057 473
1057 550
1057 416
1057 1058
1057 103
1057 538
1057 887
1057 3115
1057 888
org.joda.time.chrono.BaseChronology.millisOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.millisOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.millisOfDay() 1201
org.joda.time.chrono.BaseChronology.millisOfDay() 168
org.joda.time.chrono.BaseChronology.millisOfDay() org.joda.time.chrono.BaseChronology.millis()
org.joda.time.chrono.BaseChronology.millisOfDay() 72
853 838
782 303
782 791
782 1936
782 782
782 java.lang.Object.hashCode()
782 org.joda.time.chrono.GregorianChronology.hashCode()
782 1385
782 org.joda.time.chrono.BuddhistChronology.hashCode()
782 793
782 org.joda.time.chrono.IslamicChronology.hashCode()
782 org.joda.time.chrono.JulianChronology.hashCode()
782 org.joda.time.chrono.EthiopicChronology.hashCode()
782 103
782 788
3059 3060
961 3286
961 377
961 291
1785 sun.security.jca.ProviderList$3.get(int)
1785 java.util.Collections$SynchronizedCollection.size()
1785 java.util.SubList.size()
1785 sun.security.jca.ProviderList$ServiceList.size()
1785 java.util.Collections$CheckedList.get(int)
1785 java.util.Collections$UnmodifiableCollection.size()
1785 java.util.LinkedList.size()
1785 java.util.Collections$SynchronizedList.get(int)
1785 java.util.Collections$CopiesList.get(int)
1785 java.util.Collections$SingletonList.get(int)
1785 java.util.Collections$EmptyList.size()
1785 java.util.ArrayList.add(java.lang.Object)
1785 java.util.Arrays$ArrayList.size()
1785 java.util.ArrayList.get(int)
1785 java.util.Vector.size()
1785 java.util.Arrays$ArrayList.get(int)
1785 java.util.Collections$CopiesList.size()
1785 sun.security.jca.ProviderList$3.size()
1785 java.util.AbstractList.add(java.lang.Object)
1785 java.util.Vector.get(int)
1785 java.util.ArrayList$SubList.get(int)
1785 java.util.SubList.get(int)
1785 java.util.ArrayList.size()
1785 java.util.LinkedList.get(int)
1785 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
1785 java.util.Collections$SingletonList.size()
1785 java.util.Collections$CheckedCollection.size()
1785 java.util.LinkedList.add(java.lang.Object)
1785 sun.security.jca.ProviderList$ServiceList.get(int)
1785 3717
1785 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
1785 java.util.Collections$CheckedCollection.add(java.lang.Object)
1785 java.util.ArrayList$SubList.size()
1785 java.util.Vector.add(java.lang.Object)
1785 java.util.Collections$EmptyList.get(int)
1785 java.util.Collections$UnmodifiableList.get(int)
377 294
3653 java.lang.StringBuffer.length()
3653 java.nio.CharBuffer.charAt(int)
3653 java.lang.StringBuffer.charAt(int)
3653 java.nio.CharBuffer.length()
3653 java.lang.String.charAt(int)
3653 java.lang.StringBuilder.charAt(int)
3653 java.lang.String.length()
3653 java.lang.StringBuilder.length()
3517 java.lang.Object.clinit()
3517 508
3517 507
org.joda.time.tz.ZoneInfoLogger$1ialValue() java.lang.Boolean.clinit()
org.joda.time.tz.ZoneInfoLogger$1ialValue() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoLogger$1ialValue() org.joda.time.tz.ZoneInfoLogger$1ialValue()
2512 java.lang.Object.clinit()
2512 java.util.Locale.equals(java.lang.Object)
2512 2513
2512 1803
org.joda.time.chrono.GJLocaleSymbols.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.GJLocaleSymbols.clinit() java.lang.Object.clinit()
org.joda.time.chrono.GJLocaleSymbols.clinit() org.joda.time.chrono.GJLocaleSymbols.clinit()
org.joda.time.chrono.GJLocaleSymbols.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
3773 java.lang.Object.clinit()
3773 java.lang.StringBuilder()
3773 java.lang.String.substring(int)
3773 java.lang.String.indexOf(java.lang.String)
3773 java.lang.String.substring(int,int)
3773 java.lang.StringBuilder.append(java.lang.String)
3773 java.lang.String.indexOf(int)
3773 java.lang.StringBuilder.toString()
3773 java.lang.String.intern()
3773 java.lang.String.concat(java.lang.String)
2502 java.lang.Object.clinit()
2502 org.joda.time.format.PeriodFormat.clinit()
2502 2503
2502 java.util.ResourceBundle.clinit()
2502 3677
2502 2504
2502 java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1139
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2931
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3282
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 118
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3283
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3426
1382 294
473 474
3424 3406
org.joda.time.LocalTime.compareTo(java.lang.Object) 2311
923 java.lang.StringBuffer.length()
923 java.lang.Character.toUpperCase(char)
923 java.lang.Character.clinit()
923 java.nio.CharBuffer.charAt(int)
923 java.lang.Object.clinit()
923 java.lang.StringBuffer.charAt(int)
923 java.lang.Character.toLowerCase(char)
923 java.nio.CharBuffer.length()
923 java.lang.String.charAt(int)
923 java.lang.StringBuilder.charAt(int)
923 java.lang.String.length()
923 java.lang.StringBuilder.length()
566 51
566 61
566 java.lang.Object.clinit()
566 48
566 org.joda.time.PeriodType.clinit()
566 567
566 52
566 49
566 45
566 57
566 org.joda.time.DurationFieldType.clinit()
566 59
960 961
1229 java.lang.Object.clinit()
1229 145
1229 org.joda.time.DateTimeFieldType.clinit()
1229 1230
760 java.lang.Object.clinit()
760 103
760 761
1455 1149
1455 1457
1455 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1455 364
1455 932
1455 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1455 1150
1455 1454
1455 3341
1455 365
1455 3514
1455 3496
1455 1455
1455 1593
1455 934
1455 118
1455 3435
1455 286
1455 1648
237 175
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 417
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 342
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 435
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 455
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 429
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 430
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 371
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 338
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 421
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1104
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 384
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3439
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3240
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 329
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3513
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 334
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1106
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3303
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 420
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1277
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1379
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1343
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 960
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 373
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3410
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1281
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 422
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 997
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1273
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 2120
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 995
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 996
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 379
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 457
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1103
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 330
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 992
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 994
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1275
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) org.joda.time.field.StrictDateTimeField.set(long,int)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 991
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3429
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 2119
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 290
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 419
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 1408
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 3254
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long) 993
150 151
org.joda.time.LocalDate.compareTo(java.lang.Object) 2183
2711 java.lang.String.clinit()
2711 java.lang.Object.clinit()
2711 java.lang.StringBuilder()
2711 java.lang.String.valueOf(int)
2711 java.lang.StringBuilder.append(java.lang.String)
2711 java.lang.StringBuilder.toString()
2711 1808
924 java.lang.StringBuffer.length()
924 java.lang.Character.toUpperCase(char)
924 java.lang.Character.clinit()
924 java.nio.CharBuffer.charAt(int)
924 java.lang.Object.clinit()
924 java.lang.StringBuffer.charAt(int)
924 java.lang.Character.toLowerCase(char)
924 java.lang.String.charAt(int)
924 java.nio.CharBuffer.length()
924 java.lang.StringBuilder.charAt(int)
924 java.lang.String.length()
924 java.lang.StringBuilder.length()
457 1103
457 457
457 330
457 992
457 342
457 1104
457 994
457 991
457 384
457 3240
457 329
457 276
457 960
457 3410
457 334
457 429
457 1106
457 290
457 997
457 371
457 995
457 338
457 993
457 996
675 java.lang.Object.clinit()
675 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
992 1103
992 457
992 330
992 992
992 342
992 1104
992 994
992 991
992 384
992 3240
992 329
992 960
992 3410
992 334
992 429
992 1106
992 290
992 997
992 371
992 995
992 338
992 993
992 996
992 118
3758 sun.security.jca.ProviderList$3.get(int)
3758 java.util.Collections$CheckedList.get(int)
3758 java.lang.Throwable.clinit()
3758 java.util.Collections$SynchronizedList.get(int)
3758 java.util.LinkedList.get(int)
3758 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
3758 java.lang.IllegalArgumentException(java.lang.String)
3758 java.util.LinkedList.add(java.lang.Object)
3758 sun.security.jca.ProviderList$ServiceList.get(int)
3758 java.util.Collections$CopiesList.get(int)
3758 java.util.Collections$SingletonList.get(int)
3758 java.util.ArrayList.add(java.lang.Object)
3758 java.util.ArrayList.get(int)
3758 java.lang.Object.clinit()
3758 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
3758 java.util.Arrays$ArrayList.get(int)
3758 java.util.Collections$CheckedCollection.add(java.lang.Object)
3758 java.lang.String.equals(java.lang.Object)
3758 java.util.AbstractList.add(java.lang.Object)
3758 java.util.Vector.add(java.lang.Object)
3758 java.util.Collections$EmptyList.get(int)
3758 java.util.Vector.get(int)
3758 java.util.Collections$UnmodifiableList.get(int)
3758 java.util.ArrayList$SubList.get(int)
3758 java.util.SubList.get(int)
1033 java.lang.Object.clinit()
1033 java.lang.StringBuilder()
1033 java.lang.StringBuilder.append(char)
1033 java.lang.String.substring(int)
1033 java.lang.String.substring(int,int)
1033 java.lang.StringBuilder.append(java.lang.String)
1033 java.lang.StringBuilder.toString()
1033 java.lang.String.length()
1033 java.lang.String.concat(java.lang.String)
3193 java.lang.String.equals(java.lang.Object)
1275 418
1275 117
1275 java.lang.Object.clinit()
1275 374
1275 3286
1275 291
2952 java.lang.Object.clinit()
2952 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2211 771
2211 304
2211 495
2211 753
2211 385
2211 219
2211 478
2211 1102
2211 2211
2211 java.lang.Object.clinit()
2211 org.joda.time.chrono.ZonedChronology.withUTC()
2211 2258
2211 103
2211 org.joda.time.chrono.LimitChronology.withUTC()
2211 749
2211 org.joda.time.DateTimeZone.clinit()
2211 523
2211 269
499 19
499 3157
499 517
499 490
499 java.lang.Throwable.clinit()
499 486
499 java.lang.String.charAt(int)
499 java.lang.IllegalArgumentException(java.lang.String)
499 500
499 java.lang.StringBuilder.toString()
499 java.lang.Character.clinit()
499 java.lang.Object.clinit()
499 java.lang.StringBuilder()
499 java.util.TimeZone.getID()
499 java.lang.Character.isDigit(char)
499 java.lang.String.equals(java.lang.Object)
499 java.lang.String.substring(int)
499 498
499 java.lang.String.startsWith(java.lang.String)
499 java.lang.StringBuilder.append(java.lang.String)
499 org.joda.time.DateTimeZone.clinit()
499 3162
499 java.lang.String.length()
499 7
756 325
81 java.lang.Object.clinit()
81 405
81 java.lang.Throwable.clinit()
81 1203
81 java.lang.IllegalArgumentException(java.lang.String)
81 65
81 82
2432 java.lang.UnsupportedOperationException(java.lang.String)
2432 java.lang.Object.clinit()
2432 java.lang.Throwable.clinit()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1139
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2931
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3282
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3283
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 3426
3382 1076
3382 3400
3382 1078
3382 org.joda.time.field.DecoratedDurationField.add(long,long)
3382 1077
3382 org.joda.time.field.DelegatedDurationField.add(long,long)
3382 225
3382 1087
3382 1085
3382 1164
3382 3385
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo(java.lang.Object) 926
396 397
396 20
396 1040
396 3126
396 790
396 451
3425 3406
2435 3689
2435 java.lang.Object.clinit()
2435 java.lang.Math.abs(long)
2435 2439
2435 2440
2435 2517
2435 org.joda.time.format.FormatUtils.clinit()
2435 3707
2435 java.lang.Math.clinit()
2435 2436
2435 java.lang.Math.max(int,int)
2180 org.joda.time.chrono.BaseChronology.dayOfMonth()
2180 342
2180 java.lang.StringBuilder.append(int)
2180 960
2180 3410
2180 195
2180 java.lang.Object.clinit()
2180 429
2180 java.lang.StringBuilder()
2180 997
2180 371
2180 200
2180 995
2180 338
2180 996
2180 org.joda.time.chrono.BaseChronology.year()
2180 289
2180 457
2180 1103
2180 330
2180 992
2180 java.lang.Throwable.clinit()
2180 994
2180 1104
2180 org.joda.time.chrono.BaseChronology.monthOfYear()
2180 991
2180 384
2180 288
2180 java.lang.StringBuilder.toString()
2180 3240
2180 329
2180 java.lang.IndexOutOfBoundsException(java.lang.String)
2180 334
2180 1106
2180 290
2180 201
2180 java.lang.StringBuilder.append(java.lang.String)
2180 993
386 java.lang.Object.clinit()
386 262
386 498
386 387
386 org.joda.time.DateTimeZone.clinit()
386 740
386 org.joda.time.chrono.GJChronology.clinit()
2088 1968
28 java.io.ObjectInputStream.readUnsignedByte()
28 25
28 java.lang.Object.clinit()
28 java.io.DataInputStream.readByte()
28 java.io.ObjectInputStream.readByte()
28 java.io.ObjectInputStream$BlockDataInputStream.readUnsignedByte()
28 java.io.DataInputStream.readUnsignedByte()
28 java.io.ObjectInputStream.readBoolean()
28 java.io.DataInputStream.readBoolean()
28 29
28 java.io.ObjectInputStream$BlockDataInputStream.readBoolean()
28 java.io.ObjectInputStream$BlockDataInputStream.readByte()
3156 java.lang.Object.clinit()
3156 org.joda.time.tz.UTCProvider.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.StringBuilder()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.toString() java.lang.StringBuilder.append(int)
719 505
719 java.lang.Object.clinit()
719 720
719 705
719 696
719 509
719 643
719 709
719 699
719 640
719 600
719 707
719 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1246 java.lang.String.clinit()
1246 java.lang.Object.clinit()
1129 1130
2023 3470
2023 725
2023 625
2023 3480
2023 620
2023 3543
2023 606
2023 java.lang.StringBuilder.toString()
2023 607
2023 1233
2023 3501
2023 3524
2023 java.lang.Object.clinit()
2023 3486
2023 666
2023 638
2023 java.lang.StringBuilder(int)
2023 724
2023 2024
1735 java.io.PrintStream.append(java.lang.CharSequence)
1735 java.lang.Object.clinit()
1735 java.nio.CharBuffer.append(java.lang.CharSequence)
1735 java.lang.Long.toString(long)
1735 java.lang.StringBuffer.append(java.lang.CharSequence)
1735 org.joda.time.format.FormatUtils.clinit()
1735 java.io.StringWriter.append(java.lang.CharSequence)
1735 java.lang.StringBuilder.append(java.lang.CharSequence)
1735 java.lang.Long.clinit()
1735 1252
1735 java.io.Writer.append(java.lang.CharSequence)
1735 java.io.PrintWriter.append(java.lang.CharSequence)
405 405
405 1203
405 82
3300 372
3300 375
1058 java.lang.Object.clinit()
1058 java.lang.Throwable.clinit()
1058 3026
1058 587
2405 java.lang.Object.clinit()
2405 org.joda.time.PeriodType.clinit()
2405 567
2405 52
2405 org.joda.time.DurationFieldType.clinit()
3519 java.io.PrintStream.append(java.lang.CharSequence)
3519 java.nio.CharBuffer.append(java.lang.CharSequence)
3519 java.lang.StringBuffer.append(java.lang.CharSequence)
3519 java.io.StringWriter.append(java.lang.CharSequence)
3519 java.lang.StringBuilder.append(java.lang.CharSequence)
3519 java.io.Writer.append(java.lang.CharSequence)
3519 java.io.PrintWriter.append(java.lang.CharSequence)
398 97
3531 1103
3531 457
3531 330
3531 992
3531 342
3531 1104
3531 994
3531 991
3531 384
3531 3240
3531 329
3531 960
3531 3410
3531 334
3531 732
3531 429
3531 1106
3531 290
3531 997
3531 371
3531 995
3531 338
3531 993
3531 996
683 505
683 java.lang.Object.clinit()
683 73
683 681
683 509
683 org.joda.time.DateTimeFieldType.clinit()
683 506
683 77
683 635
683 600
683 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
683 75
3767 3767
3767 java.lang.Object.clinit()
3767 3764
1779 1769
744 208
260 java.lang.Object()
308 95
1204 795
3418 3406
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1986
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1987
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1998
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1988
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 2027
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1985
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 2788
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial) 1401
287 342
287 3410
287 960
287 429
287 997
287 371
287 995
287 338
287 996
287 org.joda.time.chrono.BaseChronology.year()
287 289
287 457
287 1103
287 330
287 992
287 994
287 1104
287 991
287 384
287 288
287 329
287 3240
287 334
287 1106
287 290
287 201
287 993
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) 1319
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) 3261
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) 1239
org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale) 3413
1764 java.lang.Object.clinit()
1764 java.lang.Throwable.clinit()
1764 java.lang.IllegalStateException(java.lang.String)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long) 1667
866 java.util.Date.getTime()
org.joda.time.chrono.LimitChronology.withUTC() org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.LimitChronology.withUTC() java.lang.Object.clinit()
org.joda.time.chrono.LimitChronology.withUTC() org.joda.time.DateTimeZone.clinit()
724 java.lang.UnsupportedOperationException(java.lang.String)
724 java.lang.Object.clinit()
724 java.lang.Throwable.clinit()
409 120
409 536
409 311
409 469
409 548
1824 1825
1824 3238
1824 1824
1824 3165
1824 org.joda.time.tz.DateTimeZoneBuilder$DSTZone.isFixed()
3681 sun.text.CompactByteArray.clone()
3681 javax.crypto.Mac.clone()
3681 javax.naming.Reference.clone()
3681 java.util.Hashtable.clone()
3681 java.util.jar.Manifest.clone()
3681 sun.security.krb5.internal.KerberosTime.clone()
3681 sun.security.krb5.internal.Ticket.clone()
3681 sun.text.IntHashtable.clone()
3681 sun.security.krb5.EncryptedData.clone()
3681 sun.net.ProgressSource.clone()
3681 java.util.EnumSet.clone()
3681 sun.net.www.protocol.http.AuthenticationInfo.clone()
3681 sun.security.util.BitArray.clone()
3681 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
3681 java.security.SignatureSpi.clone()
3681 java.util.SimpleTimeZone.clone()
3681 java.util.JapaneseImperialCalendar.clone()
3681 java.util.IdentityHashMap.clone()
3681 sun.security.x509.GeneralSubtrees.clone()
3681 java.util.ArrayList.clone()
3681 sun.text.normalizer.NormalizerBase.clone()
3681 sun.security.krb5.internal.ETypeInfo.clone()
3681 javax.naming.CompositeName.clone()
3681 java.util.Locale.clone()
3681 1774
3681 java.security.Signature$Delegate.clone()
3681 sun.security.krb5.internal.TicketFlags.clone()
3681 org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit()
3681 sun.security.provider.MD4.clone()
3681 java.util.TreeSet.clone()
3681 java.util.Hashtable$Entry.clone()
3681 java.text.MessageFormat.clone()
3681 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
3681 java.lang.Object.clone()
3681 sun.security.krb5.EncryptionKey.clone()
3681 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3681 java.text.DecimalFormat.clone()
3681 java.text.SimpleDateFormat.clone()
3681 java.util.Date.clone()
3681 sun.security.krb5.PrincipalName.clone()
3681 sun.net.www.MimeEntry.clone()
3681 sun.util.calendar.CalendarDate.clone()
3681 java.util.GregorianCalendar.clone()
3681 java.util.regex.Pattern.compile(java.lang.String)
3681 java.util.Vector.clone()
3681 java.util.Arrays.clinit()
3681 sun.security.krb5.internal.AuthorizationData.clone()
3681 java.net.HttpCookie.clone()
3681 sun.security.krb5.internal.crypto.crc32.clone()
3681 java.util.zip.ZipEntry.clone()
3681 java.security.MessageDigest$Delegate.clone()
3681 sun.util.calendar.ZoneInfo.clone()
3681 sun.text.normalizer.CharacterIteratorWrapper.clone()
3681 java.text.DateFormatSymbols.clone()
3681 java.util.HashSet.clone()
3681 sun.util.calendar.ImmutableGregorianDate.clone()
3681 java.util.Arrays.sort(java.lang.Object[],java.util.Comparator)
3681 java.util.regex.Pattern.clinit()
3681 java.text.AttributedString$AttributedStringIterator.clone()
3681 java.text.RuleBasedBreakIterator.clone()
3681 sun.security.krb5.internal.LastReqEntry.clone()
3681 java.lang.Object.clinit()
3681 java.text.DecimalFormatSymbols.clone()
3681 java.text.DigitList.clone()
3681 java.text.RuleBasedCollator.clone()
3681 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
3681 java.text.ChoiceFormat.clone()
3681 java.lang.Thread.clone()
3681 1488
3681 sun.security.krb5.Realm.clone()
3681 org.joda.time.format.PeriodFormatterBuilder.clinit()
3681 java.util.ResourceBundle$CacheKey.clone()
3681 sun.security.krb5.internal.ETypeInfo2.clone()
3681 java.util.LinkedList.clone()
3681 2557
3681 java.text.StringCharacterIterator.clone()
3681 3682
3681 sun.security.x509.NameConstraintsExtension.clone()
3681 java.util.ArrayDeque.clone()
3681 java.util.jar.Attributes.clone()
3681 sun.security.krb5.internal.HostAddress.clone()
3681 sun.security.krb5.internal.PAData.clone()
3681 java.util.TreeMap.clone()
3681 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
3681 java.util.BitSet.clone()
3681 sun.security.krb5.internal.AuthorizationDataEntry.clone()
3681 java.lang.Enum.clone()
3681 java.util.AbstractMap.clone()
3681 java.util.HashMap.clone()
3681 sun.security.provider.PolicyParser$GrantEntry.clone()
3681 java.util.JumboEnumSet.clone()
3681 sun.security.krb5.internal.HostAddresses.clone()
3681 2357
1766 java.lang.Object()
112 java.lang.Object.clinit()
112 org.joda.time.DateTimeFieldType.clinit()
3751 java.lang.Object.clinit()
3751 3754
3751 java.lang.IllegalArgumentException()
3751 java.lang.Throwable.clinit()
3751 3740
3751 java.lang.IllegalArgumentException(java.lang.String)
3751 3752
3751 java.util.StringTokenizer.countTokens()
3751 java.lang.String.intern()
3751 3753
3751 java.util.StringTokenizer.nextToken()
3751 java.lang.Object()
1372 1373
1372 3276
1372 org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
1372 3403
1372 1372
1372 org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
1372 org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
1372 org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
1372 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
1372 1750
1372 org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
1372 org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
1372 org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
1372 1354
1372 1667
3655 sun.security.jca.ProviderList$3.get(int)
3655 java.util.Collections$SynchronizedCollection.size()
3655 java.util.SubList.size()
3655 java.nio.StringCharBuffer.subSequence(int,int)
3655 java.util.Collections$CheckedList.get(int)
3655 java.nio.ByteBufferAsCharBufferRB.subSequence(int,int)
3655 java.util.Collections$UnmodifiableCollection.size()
3655 java.lang.StringBuffer.toString()
3655 java.nio.CharBuffer.length()
3655 java.nio.DirectCharBufferU.subSequence(int,int)
3655 java.util.Collections$CopiesList.get(int)
3655 java.util.Arrays$ArrayList.size()
3655 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3655 sun.misc.SoftCache.get(java.lang.Object)
3655 java.util.Arrays$ArrayList.get(int)
3655 java.nio.ByteBufferAsCharBufferL.subSequence(int,int)
3655 java.lang.StringBuilder.append(char)
3655 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3655 java.lang.String.subSequence(int,int)
3655 java.util.Vector.get(int)
3655 java.lang.StringBuilder.length()
3655 java.util.SubList.get(int)
3655 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3655 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3655 6
3655 java.util.Collections$CheckedMap.get(java.lang.Object)
3655 java.util.LinkedList.get(int)
3655 java.util.Collections$SingletonList.size()
3655 sun.security.jca.ProviderList$ServiceList.get(int)
3655 java.util.HashMap.get(java.lang.Object)
3655 java.nio.HeapCharBufferR.subSequence(int,int)
3655 java.lang.StringBuilder.toString()
3655 java.nio.DirectCharBufferS.subSequence(int,int)
3655 3653
3655 java.nio.DirectCharBufferRS.subSequence(int,int)
3655 java.util.ArrayList$SubList.size()
3655 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit()
3655 java.nio.CharBuffer.toString()
3655 java.util.Hashtable.get(java.lang.Object)
3655 java.lang.StringBuilder.append(java.lang.String)
3655 java.lang.StringBuilder.charAt(int)
3655 sun.security.jca.ProviderList$ServiceList.size()
3655 sun.util.PreHashedMap.get(java.lang.Object)
3655 java.lang.StringBuffer.charAt(int)
3655 java.util.Collections$SynchronizedList.get(int)
3655 java.util.LinkedList.size()
3655 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3655 java.lang.String.charAt(int)
3655 java.util.Collections$SingletonList.get(int)
3655 java.util.Collections$EmptyList.size()
3655 java.util.ArrayList.get(int)
3655 java.nio.DirectCharBufferRU.subSequence(int,int)
3655 java.lang.StringBuffer.length()
3655 java.util.Vector.size()
3655 java.lang.Object.clinit()
3655 java.util.AbstractMap.get(java.lang.Object)
3655 java.util.Collections$CopiesList.size()
3655 java.lang.StringBuilder()
3655 sun.security.jca.ProviderList$3.size()
3655 java.util.WeakHashMap.get(java.lang.Object)
3655 java.lang.Math.clinit()
3655 java.util.TreeMap.get(java.lang.Object)
3655 java.util.ArrayList$SubList.get(int)
3655 java.util.Collections$SingletonMap.get(java.lang.Object)
3655 java.nio.CharBuffer.charAt(int)
3655 java.util.jar.Attributes.get(java.lang.Object)
3655 java.util.ArrayList.size()
3655 java.lang.StringBuffer.subSequence(int,int)
3655 java.util.IdentityHashMap.get(java.lang.Object)
3655 java.util.Collections$CheckedCollection.size()
3655 java.nio.ByteBufferAsCharBufferRL.subSequence(int,int)
3655 java.lang.Math.min(int,int)
3655 java.security.Provider.get(java.lang.Object)
3655 3569
3655 java.lang.String.toString()
3655 java.nio.HeapCharBuffer.subSequence(int,int)
3655 java.util.LinkedHashMap.get(java.lang.Object)
3655 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3655 java.util.Collections$EmptyList.get(int)
3655 org.joda.time.DateTimeZone.clinit()
3655 java.util.Collections$UnmodifiableList.get(int)
3655 java.lang.String.length()
3655 java.nio.ByteBufferAsCharBufferB.subSequence(int,int)
3655 java.util.Collections$EmptyMap.get(java.lang.Object)
3655 java.lang.StringBuilder.subSequence(int,int)
2459 java.lang.Object.clinit()
2459 57
2459 org.joda.time.DurationFieldType.clinit()
1801 java.lang.Object.clinit()
1801 48
1801 org.joda.time.PeriodType.clinit()
1801 567
1801 org.joda.time.DurationFieldType.clinit()
419 407
419 java.lang.Object.clinit()
419 420
419 374
3483 3129
3483 3148
490 java.lang.Object.clinit()
490 org.joda.time.DateTimeZone.clinit()
490 491
org.joda.time.field.UnsupportedDurationField.toString() java.lang.Object.clinit()
org.joda.time.field.UnsupportedDurationField.toString() 3236
org.joda.time.field.UnsupportedDurationField.toString() java.lang.StringBuilder()
org.joda.time.field.UnsupportedDurationField.toString() java.lang.StringBuilder.append(char)
org.joda.time.field.UnsupportedDurationField.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.field.UnsupportedDurationField.toString() java.lang.StringBuilder.toString()
1062 3397
1062 org.joda.time.field.DelegatedDurationField.add(long,int)
1062 1111
1062 1083
1062 1162
1062 3382
1062 org.joda.time.field.DecoratedDurationField.add(long,int)
1062 1062
1062 901
1062 896
1062 1063
1062 1061
371 372
338 339
338 3289
338 1297
org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int) 344
3115 474
697 java.lang.Object.clinit()
697 698
697 org.joda.time.format.DateTimeParserInternalParser.getUnderlying()
3772 3774
3772 3773
642 599
642 505
642 java.lang.Object.clinit()
642 509
642 643
642 594
642 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2117 1422
2117 1320
2117 1420
2117 1240
2117 3280
1314 org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
1314 1315
1314 org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
1314 3418
1314 3258
1314 276
1314 1314
3273 3274
3639 643
3639 org.joda.time.DateTimeFieldType.clinit()
3639 java.lang.ProcessEnvironment$StringEntrySet.remove(java.lang.Object)
3639 java.util.HashMap$EntrySet.remove(java.lang.Object)
3639 sun.nio.ch.Util$2.remove(java.lang.Object)
3639 java.util.WeakHashMap$KeySet.remove(java.lang.Object)
3639 java.util.IdentityHashMap$Values.remove(java.lang.Object)
3639 java.util.Collections$CheckedMap$CheckedEntrySet.remove(java.lang.Object)
3639 java.util.ArrayDeque.remove(java.lang.Object)
3639 106
3639 java.util.concurrent.SynchronousQueue.remove(java.lang.Object)
3639 java.util.Collections$AsLIFOQueue.remove(java.lang.Object)
3639 java.util.HashSet.remove(java.lang.Object)
3639 java.util.concurrent.ConcurrentHashMap$EntrySet.remove(java.lang.Object)
3639 java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object)
3639 java.util.RegularEnumSet.remove(java.lang.Object)
3639 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3639 java.util.Collections$SynchronizedCollection.remove(java.lang.Object)
3639 java.util.AbstractCollection.remove(java.lang.Object)
3639 java.util.JumboEnumSet.remove(java.lang.Object)
3639 java.util.IdentityHashMap$EntrySet.remove(java.lang.Object)
3639 3067
3639 java.util.Collections$CheckedCollection.remove(java.lang.Object)
3639 java.lang.ProcessEnvironment$StringValues.remove(java.lang.Object)
3639 java.util.TreeSet.remove(java.lang.Object)
3639 java.util.concurrent.ConcurrentHashMap$KeySet.remove(java.lang.Object)
3639 149
3639 java.util.TreeMap$Values.remove(java.lang.Object)
3639 java.util.Collections$UnmodifiableCollection.remove(java.lang.Object)
3639 java.util.IdentityHashMap$KeySet.remove(java.lang.Object)
3639 java.util.HashMap$KeySet.remove(java.lang.Object)
3639 627
3639 java.util.TreeMap$EntrySet.remove(java.lang.Object)
3639 java.util.TreeMap$NavigableSubMap$EntrySetView.remove(java.lang.Object)
3639 java.lang.Object.clinit()
3639 java.lang.ProcessEnvironment$StringKeySet.remove(java.lang.Object)
3639 java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)
3639 java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object)
3639 java.util.Hashtable$KeySet.remove(java.lang.Object)
3639 sun.misc.SoftCache$EntrySet.remove(java.lang.Object)
3639 java.util.Vector.remove(java.lang.Object)
3639 java.util.Collections$SetFromMap.remove(java.lang.Object)
3639 java.util.LinkedList.remove(java.lang.Object)
3639 java.util.WeakHashMap$EntrySet.remove(java.lang.Object)
3639 600
3639 java.util.TreeMap$KeySet.remove(java.lang.Object)
3639 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remove(java.lang.Object)
3639 javax.security.auth.Subject$SecureSet.remove(java.lang.Object)
3639 3002
3639 java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)
3639 java.util.ArrayList.remove(java.lang.Object)
3639 java.util.Hashtable$EntrySet.remove(java.lang.Object)
1257 org.joda.time.chrono.BaseChronology.dayOfMonth()
1257 342
1257 3410
1257 960
1257 195
1257 429
1257 997
1257 371
1257 995
1257 338
1257 996
1257 289
1257 457
1257 1103
1257 330
1257 992
1257 994
1257 1104
1257 991
1257 384
1257 288
1257 329
1257 3240
1257 334
1257 1106
1257 290
1257 993
2027 732
2027 405
2027 1203
2027 82
2027 1968
3351 3297
3351 org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
3351 3096
3351 3433
3351 org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
3351 736
3351 org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
3351 org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
3351 org.joda.time.field.RemainderDateTimeField.remainder(long)
3351 3278
3351 3098
3351 3097
3351 3351
3351 1656
3351 118
3351 1439
3351 org.joda.time.field.DividedDateTimeField.remainder(long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) 3364
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) 3348
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) 3383
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) 3404
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long) 1369
545 96
628 505
628 java.lang.Object.clinit()
628 509
628 629
628 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.chrono.BaseChronology.centuryOfEra() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.centuryOfEra() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.centuryOfEra() 180
org.joda.time.chrono.BaseChronology.centuryOfEra() 121
org.joda.time.chrono.BaseChronology.centuryOfEra() 1201
org.joda.time.chrono.BaseChronology.centuryOfEra() org.joda.time.chrono.BaseChronology.centuries()
373 120
373 java.lang.Math.abs(int)
373 417
373 435
373 455
373 374
373 376
373 469
373 373
373 1281
373 548
373 java.lang.Object.clinit()
373 430
373 320
373 422
373 1273
373 371
373 2120
373 java.lang.Math.clinit()
373 194
373 348
373 375
373 379
373 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
373 421
373 551
373 366
373 1275
373 org.joda.time.field.StrictDateTimeField.set(long,int)
373 472
373 3439
373 369
373 3513
373 2119
373 537
373 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
373 1381
373 419
373 536
373 420
373 311
373 1277
373 1379
373 3290
306 java.lang.Object.clinit()
306 org.joda.time.chrono.JulianChronology.clinit()
306 org.joda.time.chrono.BasicGJChronology.clinit()
306 org.joda.time.chrono.BasicChronology.clinit()
306 307
1248 java.lang.String.clinit()
1248 java.lang.Object.clinit()
1248 java.lang.String.valueOf(int)
1248 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
1248 java.lang.String.intern()
354 449
354 480
354 357
354 123
354 128
354 359
354 114
354 410
354 251
354 250
354 448
354 243
354 248
354 211
354 479
354 3395
354 389
354 236
354 65
354 244
354 254
354 3355
354 256
354 124
354 134
354 245
354 127
354 454
354 3213
354 242
354 241
354 249
354 253
354 247
354 459
354 404
1307 1308
1307 1497
1307 2228
1307 1194
1307 2086
1307 2319
1307 1612
1307 org.joda.time.field.DelegatedDateTimeField.getName()
1307 3393
1202 66
1202 java.lang.Object.clinit()
1202 java.lang.IllegalArgumentException()
1202 java.lang.Throwable.clinit()
1656 934
257 481
257 3394
257 255
257 270
257 460
257 237
257 252
257 240
257 390
257 118
257 257
257 446
1488 java.lang.Object.clinit()
1488 java.lang.Throwable.clinit()
1488 java.lang.InternalError(java.lang.String)
1488 java.lang.Object.clone()
553 java.lang.Object.clinit()
553 java.lang.StringBuilder()
553 3287
553 java.lang.ArithmeticException(java.lang.String)
553 java.lang.Throwable.clinit()
553 java.lang.StringBuilder.append(java.lang.String)
553 java.lang.StringBuilder.toString()
553 java.lang.StringBuilder.append(int)
3228 java.lang.Object.clinit()
3228 java.lang.StringBuffer.clinit()
3228 java.lang.StringBuffer.toString()
3228 java.lang.StringBuffer.append(java.lang.String)
3228 java.lang.StringBuffer.append(char)
3228 java.lang.StringBuffer()
org.joda.time.field.StrictDateTimeField.set(long,int) java.lang.Object.clinit()
org.joda.time.field.StrictDateTimeField.set(long,int) 3281
org.joda.time.field.StrictDateTimeField.set(long,int) 3303
org.joda.time.field.StrictDateTimeField.set(long,int) 420
org.joda.time.field.StrictDateTimeField.set(long,int) 374
2557 java.lang.Object.clinit()
2557 java.lang.Throwable.clinit()
2557 java.lang.InternalError(java.lang.String)
2557 java.lang.Object.clone()
3436 3406
824 org.joda.time.chrono.BaseChronology.minutes()
824 274
824 171
824 177
824 org.joda.time.chrono.BaseChronology.weekyears()
824 org.joda.time.chrono.BaseChronology.days()
824 org.joda.time.chrono.BaseChronology.years()
824 161
824 java.lang.Object.clinit()
824 125
824 173
824 175
824 174
824 org.joda.time.chrono.BaseChronology.seconds()
824 org.joda.time.chrono.BaseChronology.millis()
824 172
824 java.lang.Throwable.clinit()
824 org.joda.time.chrono.BaseChronology.halfdays()
824 180
824 org.joda.time.chrono.BaseChronology.months()
824 178
824 179
824 org.joda.time.chrono.BaseChronology.hours()
824 176
824 org.joda.time.DateTimeUtils.clinit()
824 org.joda.time.chrono.BaseChronology.weeks()
824 java.lang.InternalError()
824 168
824 org.joda.time.chrono.BaseChronology.centuries()
781 789
781 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
781 1173
781 792
781 1906
781 java.lang.Object.equals(java.lang.Object)
781 781
781 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
781 103
781 2272
781 584
781 988
781 787
781 1107
402 452
402 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
402 132
402 1269
402 3428
402 3061
402 957
402 83
402 319
402 380
402 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
402 406
402 1210
402 212
402 402
402 116
402 432
402 140
402 321
402 2067
402 1999
402 403
402 318
3121 1347
3121 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
3121 1450
3121 3121
3121 3281
3121 1333
3121 382
3121 1404
3121 3425
3121 3122
3121 3255
org.joda.time.DateTimeUtils.clinit() java.lang.Object.clinit()
org.joda.time.DateTimeUtils.clinit() java.util.concurrent.atomic.AtomicReference.clinit()
org.joda.time.DateTimeUtils.clinit() org.joda.time.DateTimeUtils.clinit()
org.joda.time.DateTimeUtils.clinit() java.util.concurrent.atomic.AtomicReference()
org.joda.time.DateTimeUtils.clinit() 264
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) 1315
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) 3418
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) 3258
org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale) 1314
3752 java.lang.Object.clinit()
3752 java.lang.Integer.clinit()
3752 java.lang.String.equals(java.lang.Object)
3752 java.lang.Integer.parseInt(java.lang.String)
3752 java.lang.String.toLowerCase(java.util.Locale)
3752 java.util.Locale.clinit()
1999 452
1999 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
1999 132
1999 1269
1999 3428
1999 3061
1999 957
1999 83
1999 319
1999 380
1999 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
1999 406
1999 1210
1999 212
1999 402
1999 116
1999 432
1999 140
1999 321
1999 2067
1999 1999
1999 403
1999 318
445 357
445 443
445 359
445 410
445 252
445 243
445 448
445 250
445 211
445 248
445 479
445 1203
445 3394
445 236
445 255
445 java.util.HashMap.put(java.lang.Object,java.lang.Object)
445 244
445 254
445 270
445 447
445 java.util.HashMap.get(java.lang.Object)
445 245
445 127
445 405
445 253
445 459
445 446
445 449
445 480
445 123
445 128
445 460
445 251
445 240
445 java.lang.Object.clinit()
445 java.util.HashMap.containsKey(java.lang.Object)
445 3395
445 389
445 237
445 257
445 256
445 124
445 134
445 390
445 3213
445 454
445 242
445 481
445 java.util.LinkedHashMap.get(java.lang.Object)
445 241
445 249
445 247
445 82
591 java.lang.Object.clinit()
591 723
591 592
org.joda.time.field.DelegatedDurationField.compareTo(org.joda.time.DurationField) 3059
org.joda.time.field.DelegatedDurationField.compareTo(org.joda.time.DurationField) org.joda.time.field.DelegatedDurationField.compareTo(java.lang.Object)
org.joda.time.field.DelegatedDurationField.compareTo(org.joda.time.DurationField) 3361
org.joda.time.field.DelegatedDurationField.compareTo(org.joda.time.DurationField) 928
598 java.lang.Object()
936 350
936 336
936 3288
936 552
936 3286
936 291
936 475
936 1382
3423 3406
1720 61
1720 java.lang.Object.clinit()
1720 48
1720 org.joda.time.PeriodType.clinit()
1720 567
1720 49
1720 45
1720 org.joda.time.DurationFieldType.clinit()
102 103
102 104
org.joda.time.convert.LongConverter.clinit() org.joda.time.convert.LongConverter.clinit()
org.joda.time.convert.LongConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.LongConverter.clinit() 846
906 892
906 893
2520 java.lang.StringBuffer.append(java.lang.String)
327 java.lang.Object.clinit()
327 328
327 org.joda.time.chrono.GJChronology.clinit()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 1214
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3120
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 1138
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3071
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[])
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 2926
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3640
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial,int[]) 3427
589 java.lang.Character$Subset.equals(java.lang.Object)
589 java.text.AttributeEntry.equals(java.lang.Object)
589 sun.security.krb5.internal.HostAddresses.equals(java.lang.Object)
589 java.util.Locale.equals(java.lang.Object)
589 java.security.spec.EllipticCurve.equals(java.lang.Object)
589 java.util.AbstractMap$SimpleImmutableEntry.equals(java.lang.Object)
589 java.lang.ProcessEnvironment$StringEntrySet.equals(java.lang.Object)
589 java.io.File.equals(java.lang.Object)
589 792
589 java.lang.Enum.equals(java.lang.Object)
589 sun.security.krb5.PrincipalName.equals(java.lang.Object)
589 sun.security.krb5.internal.rcache.AuthTime.equals(java.lang.Object)
589 java.util.AbstractList.equals(java.lang.Object)
589 sun.util.locale.LocaleExtensions.equals(java.lang.Object)
589 java.util.Collections$SynchronizedList.equals(java.lang.Object)
589 sun.security.x509.CertificateExtensions.equals(java.lang.Object)
589 sun.security.x509.OIDName.equals(java.lang.Object)
589 java.security.BasicPermission.equals(java.lang.Object)
589 javax.security.auth.PrivateCredentialPermission.equals(java.lang.Object)
589 sun.text.IntHashtable.equals(java.lang.Object)
589 sun.security.x509.AccessDescription.equals(java.lang.Object)
589 java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.equals(java.lang.Object)
589 java.text.ChoiceFormat.equals(java.lang.Object)
589 3101
589 sun.security.x509.GeneralNames.equals(java.lang.Object)
589 java.net.InterfaceAddress.equals(java.lang.Object)
589 org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)
589 java.lang.ProcessEnvironment$Variable.equals(java.lang.Object)
589 java.math.MathContext.equals(java.lang.Object)
589 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
589 java.text.MessageFormat.equals(java.lang.Object)
589 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.equals(java.lang.Object)
589 sun.security.x509.GeneralSubtree.equals(java.lang.Object)
589 sun.misc.SoftCache$Entry.equals(java.lang.Object)
589 790
589 java.util.Collections$ReverseComparator2.equals(java.lang.Object)
589 java.util.jar.Manifest.equals(java.lang.Object)
589 java.text.DecimalFormatSymbols.equals(java.lang.Object)
589 java.net.Inet4Address.equals(java.lang.Object)
589 sun.security.jca.ProviderConfig.equals(java.lang.Object)
589 java.util.Collections$SynchronizedMap.equals(java.lang.Object)
589 java.text.DecimalFormat.equals(java.lang.Object)
589 sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl.equals(java.lang.Object)
589 sun.nio.fs.UnixUserPrincipals$User.equals(java.lang.Object)
589 sun.security.util.ObjectIdentifier.equals(java.lang.Object)
589 javax.naming.NameImpl.equals(java.lang.Object)
589 java.lang.Long.equals(java.lang.Object)
589 sun.security.x509.GeneralName.equals(java.lang.Object)
589 java.util.IdentityHashMap$EntryIterator$Entry.equals(java.lang.Object)
589 java.lang.reflect.WeakCache$LookupValue.equals(java.lang.Object)
589 sun.security.x509.AVA.equals(java.lang.Object)
589 java.util.HashMap$Entry.equals(java.lang.Object)
589 java.security.spec.ECFieldFp.equals(java.lang.Object)
589 3465
589 sun.security.krb5.Checksum.equals(java.lang.Object)
589 sun.util.locale.BaseLocale$Key.equals(java.lang.Object)
589 java.util.Collections$UnmodifiableList.equals(java.lang.Object)
589 java.lang.reflect.Proxy$Key2.equals(java.lang.Object)
589 sun.security.x509.RDN.equals(java.lang.Object)
589 java.security.cert.X509CRL.equals(java.lang.Object)
589 javax.security.auth.kerberos.KeyTab.equals(java.lang.Object)
589 3128
589 1505
589 java.text.DateFormatSymbols.equals(java.lang.Object)
589 java.net.InetSocketAddress.equals(java.lang.Object)
589 java.security.UnresolvedPermission.equals(java.lang.Object)
589 java.nio.charset.Charset.equals(java.lang.Object)
589 789
589 396
589 1173
589 java.net.InetSocketAddress$InetSocketAddressHolder.equals(java.lang.Object)
589 java.util.Vector.equals(java.lang.Object)
589 java.lang.ProcessEnvironment$StringEntry.equals(java.lang.Object)
589 sun.nio.ch.SocketOptionRegistry$RegistryKey.equals(java.lang.Object)
589 java.util.Collections$SynchronizedSet.equals(java.lang.Object)
589 java.util.Collections$EmptyMap.equals(java.lang.Object)
589 javax.security.auth.kerberos.KerberosPrincipal.equals(java.lang.Object)
589 java.lang.ProcessBuilder$Redirect.equals(java.lang.Object)
589 sun.util.calendar.ZoneInfo.equals(java.lang.Object)
589 javax.security.auth.kerberos.KerberosKey.equals(java.lang.Object)
589 java.lang.ProcessEnvironment$Value.equals(java.lang.Object)
589 java.net.InetAddress.equals(java.lang.Object)
589 java.lang.reflect.Constructor.equals(java.lang.Object)
589 java.security.cert.CertPath.equals(java.lang.Object)
589 java.math.BigDecimal.equals(java.lang.Object)
589 java.util.Collections$CheckedList.equals(java.lang.Object)
589 java.text.AttributedCharacterIterator$Attribute.equals(java.lang.Object)
589 3380
589 java.lang.ProcessEnvironment$StringValues.equals(java.lang.Object)
589 java.util.ResourceBundle$CacheKey.equals(java.lang.Object)
589 sun.text.CompactByteArray.equals(java.lang.Object)
589 sun.security.x509.Extension.equals(java.lang.Object)
589 java.lang.Short.equals(java.lang.Object)
589 java.util.WeakHashMap$Entry.equals(java.lang.Object)
589 1322
589 java.util.jar.JarVerifier$VerifierCodeSource.equals(java.lang.Object)
589 java.util.GregorianCalendar.equals(java.lang.Object)
589 sun.security.x509.X500Name.equals(java.lang.Object)
589 sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.equals(java.lang.Object)
589 sun.security.x509.IPAddressName.equals(java.lang.Object)
589 2151
589 sun.security.x509.EDIPartyName.equals(java.lang.Object)
589 sun.security.x509.GeneralSubtrees.equals(java.lang.Object)
589 java.security.cert.X509CRLEntry.equals(java.lang.Object)
589 java.nio.ByteBuffer.equals(java.lang.Object)
589 sun.util.calendar.Era.equals(java.lang.Object)
589 java.net.Proxy.equals(java.lang.Object)
589 java.security.Timestamp.equals(java.lang.Object)
589 java.util.PropertyPermission.equals(java.lang.Object)
589 java.util.Collections$CheckedMap.equals(java.lang.Object)
589 java.util.JumboEnumSet.equals(java.lang.Object)
589 java.nio.file.attribute.FileTime.equals(java.lang.Object)
589 java.text.RuleBasedCollationKey.equals(java.lang.Object)
589 1805
589 sun.security.x509.URIName.equals(java.lang.Object)
589 java.text.AttributedString$AttributedStringIterator.equals(java.lang.Object)
589 java.lang.Character.equals(java.lang.Object)
589 sun.security.x509.KeyIdentifier.equals(java.lang.Object)
589 java.security.spec.ECPoint.equals(java.lang.Object)
589 sun.security.x509.DistributionPoint.equals(java.lang.Object)
589 java.util.AbstractMap$SimpleEntry.equals(java.lang.Object)
589 1107
589 java.util.AbstractSet.equals(java.lang.Object)
589 java.text.FieldPosition.equals(java.lang.Object)
589 java.text.ParsePosition.equals(java.lang.Object)
589 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
589 java.security.AccessControlContext.equals(java.lang.Object)
589 sun.security.x509.CRLExtensions.equals(java.lang.Object)
589 sun.util.locale.BaseLocale.equals(java.lang.Object)
589 827
589 java.util.Hashtable.equals(java.lang.Object)
589 java.util.Collections$UnmodifiableMap.equals(java.lang.Object)
589 sun.nio.fs.UnixPath.equals(java.lang.Object)
589 java.text.StringCharacterIterator.equals(java.lang.Object)
589 796
589 sun.security.x509.AlgorithmId.equals(java.lang.Object)
589 java.util.AbstractMap.equals(java.lang.Object)
589 java.util.Date.equals(java.lang.Object)
589 java.util.Hashtable$Entry.equals(java.lang.Object)
589 sun.security.util.DerInputBuffer.equals(java.lang.Object)
589 java.security.spec.ECFieldF2m.equals(java.lang.Object)
589 584
589 sun.net.www.http.KeepAliveKey.equals(java.lang.Object)
589 java.io.ObjectStreamClass$WeakClassKey.equals(java.lang.Object)
589 sun.misc.ProxyGenerator$ConstantPool$IndirectEntry.equals(java.lang.Object)
589 sun.security.krb5.internal.KerberosTime.equals(java.lang.Object)
589 java.util.BitSet.equals(java.lang.Object)
589 20
589 1693
589 2372
589 3127
589 sun.security.x509.RFC822Name.equals(java.lang.Object)
589 java.text.PatternEntry.equals(java.lang.Object)
589 java.util.jar.Attributes.equals(java.lang.Object)
589 451
589 java.text.RuleBasedBreakIterator.equals(java.lang.Object)
589 java.net.Inet6Address$Inet6AddressHolder.equals(java.lang.Object)
589 java.nio.IntBuffer.equals(java.lang.Object)
589 java.lang.String.equals(java.lang.Object)
589 java.util.jar.Attributes$Name.equals(java.lang.Object)
589 1711
589 java.util.SimpleTimeZone.equals(java.lang.Object)
589 javax.naming.RefAddr.equals(java.lang.Object)
589 javax.naming.Reference.equals(java.lang.Object)
589 sun.security.util.Cache$EqualByteArray.equals(java.lang.Object)
589 org.joda.time.chrono.IslamicChronology$LeapYearPatternType.equals(java.lang.Object)
589 sun.security.util.BitArray.equals(java.lang.Object)
589 java.io.FilePermission.equals(java.lang.Object)
589 sun.security.x509.DNSName.equals(java.lang.Object)
589 java.lang.reflect.Method.equals(java.lang.Object)
589 sun.security.pkcs.PKCS8Key.equals(java.lang.Object)
589 2158
589 sun.security.x509.CertificatePolicyId.equals(java.lang.Object)
589 sun.security.x509.DistributionPointName.equals(java.lang.Object)
589 javax.security.auth.x500.X500Principal.equals(java.lang.Object)
589 3466
589 java.security.CodeSigner.equals(java.lang.Object)
589 java.text.DigitList.equals(java.lang.Object)
589 javax.security.auth.Subject.equals(java.lang.Object)
589 java.net.URI.equals(java.lang.Object)
589 sun.security.x509.X509Key.equals(java.lang.Object)
589 java.text.SimpleDateFormat.equals(java.lang.Object)
589 java.lang.StackTraceElement.equals(java.lang.Object)
589 java.util.Collections$SetFromMap.equals(java.lang.Object)
589 java.math.BigInteger.equals(java.lang.Object)
589 sun.security.provider.PolicyParser$PrincipalEntry.equals(java.lang.Object)
589 sun.util.BuddhistCalendar.equals(java.lang.Object)
589 1906
589 javax.naming.CompositeName.equals(java.lang.Object)
589 java.security.AllPermission.equals(java.lang.Object)
589 1040
589 java.net.SocketPermission.equals(java.lang.Object)
589 java.nio.DoubleBuffer.equals(java.lang.Object)
589 java.lang.Float.equals(java.lang.Object)
589 java.lang.reflect.Field.equals(java.lang.Object)
589 java.util.IdentityHashMap.equals(java.lang.Object)
589 java.security.CodeSource.equals(java.lang.Object)
589 java.nio.LongBuffer.equals(java.lang.Object)
589 sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.equals(java.lang.Object)
589 2802
589 397
589 781
589 sun.security.krb5.KrbException.equals(java.lang.Object)
589 java.util.JapaneseImperialCalendar.equals(java.lang.Object)
589 javax.crypto.spec.SecretKeySpec.equals(java.lang.Object)
589 java.lang.reflect.WeakCache$CacheValue.equals(java.lang.Object)
589 sun.util.calendar.CalendarDate.equals(java.lang.Object)
589 sun.security.krb5.internal.KRBError.equals(java.lang.Object)
589 sun.security.util.DerValue.equals(java.lang.Object)
589 sun.security.krb5.internal.HostAddress.equals(java.lang.Object)
589 sun.nio.fs.UnixFileKey.equals(java.lang.Object)
589 1192
589 java.nio.file.attribute.FileTime$DaysAndNanos.equals(java.lang.Object)
589 java.lang.Thread$WeakClassKey.equals(java.lang.Object)
589 java.net.URL.equals(java.lang.Object)
589 1144
589 794
589 java.net.HttpCookie.equals(java.lang.Object)
589 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.equals(java.lang.Object)
589 java.nio.ShortBuffer.equals(java.lang.Object)
589 sun.security.x509.X509CRLImpl$X509IssuerSerial.equals(java.lang.Object)
589 javax.security.auth.kerberos.KeyImpl.equals(java.lang.Object)
589 2272
589 988
589 sun.util.locale.InternalLocaleBuilder$CaseInsensitiveChar.equals(java.lang.Object)
589 787
589 1302
589 java.net.NetworkInterface.equals(java.lang.Object)
589 java.util.Collections$CheckedMap$CheckedEntrySet.equals(java.lang.Object)
589 sun.security.provider.PolicyFile$SelfPermission.equals(java.lang.Object)
589 java.nio.CharBuffer.equals(java.lang.Object)
589 java.lang.Object.equals(java.lang.Object)
589 java.util.RegularEnumSet.equals(java.lang.Object)
589 java.util.Locale$LocaleKey.equals(java.lang.Object)
589 java.util.Collections$CheckedSet.equals(java.lang.Object)
589 java.lang.Integer.equals(java.lang.Object)
589 sun.reflect.generics.reflectiveObjects.TypeVariableImpl.equals(java.lang.Object)
589 sun.security.x509.X509CertInfo.equals(java.lang.Object)
589 java.security.Provider$UString.equals(java.lang.Object)
589 java.lang.reflect.Proxy$KeyX.equals(java.lang.Object)
589 java.nio.FloatBuffer.equals(java.lang.Object)
589 java.text.RuleBasedCollator.equals(java.lang.Object)
589 sun.security.krb5.Realm.equals(java.lang.Object)
589 java.lang.Byte.equals(java.lang.Object)
589 1172
589 java.lang.Double.equals(java.lang.Object)
589 java.security.cert.Certificate.equals(java.lang.Object)
589 java.lang.Boolean.equals(java.lang.Object)
589 sun.security.x509.PolicyInformation.equals(java.lang.Object)
589 sun.misc.Signal.equals(java.lang.Object)
589 1299
589 java.util.Collections$EmptyList.equals(java.lang.Object)
589 sun.nio.ch.FileKey.equals(java.lang.Object)
589 1623
589 sun.security.x509.OtherName.equals(java.lang.Object)
589 java.net.Inet6Address.equals(java.lang.Object)
589 sun.util.PreHashedMap$2$1$1.equals(java.lang.Object)
589 java.util.TreeMap$Entry.equals(java.lang.Object)
589 sun.util.locale.InternalLocaleBuilder$CaseInsensitiveString.equals(java.lang.Object)
589 java.util.Collections$UnmodifiableSet.equals(java.lang.Object)
589 java.lang.reflect.Proxy$Key1.equals(java.lang.Object)
589 sun.security.provider.PolicyParser$PermissionEntry.equals(java.lang.Object)
589 java.io.ObjectStreamClass$FieldReflectorKey.equals(java.lang.Object)
589 3126
589 sun.nio.ch.Util$2.equals(java.lang.Object)
589 java.lang.reflect.WeakCache$CacheKey.equals(java.lang.Object)
589 3552
589 sun.util.calendar.ImmutableGregorianDate.equals(java.lang.Object)
589 java.security.Provider$ServiceKey.equals(java.lang.Object)
167 org.joda.time.chrono.BaseChronology.yearOfCentury()
167 org.joda.time.chrono.BaseChronology.dayOfMonth()
167 org.joda.time.chrono.BaseChronology.minutes()
167 192
167 198
167 171
167 205
167 177
167 org.joda.time.chrono.BaseChronology.years()
167 183
167 187
167 173
167 org.joda.time.chrono.BaseChronology.yearOfEra()
167 org.joda.time.chrono.BaseChronology.weekOfWeekyear()
167 org.joda.time.chrono.BaseChronology.minuteOfDay()
167 200
167 org.joda.time.chrono.BaseChronology.millis()
167 org.joda.time.chrono.BaseChronology.millisOfDay()
167 185
167 190
167 191
167 org.joda.time.chrono.BaseChronology.dayOfYear()
167 org.joda.time.chrono.BaseChronology.clockhourOfDay()
167 180
167 178
167 org.joda.time.chrono.BaseChronology.secondOfMinute()
167 188
167 179
167 196
167 org.joda.time.chrono.BaseChronology.minuteOfHour()
167 176
167 168
167 org.joda.time.chrono.BaseChronology.hourOfDay()
167 org.joda.time.chrono.BaseChronology.weekyear()
167 169
167 org.joda.time.chrono.BaseChronology.centuryOfEra()
167 184
167 org.joda.time.chrono.BaseChronology.secondOfDay()
167 203
167 org.joda.time.chrono.BaseChronology.weekyears()
167 org.joda.time.chrono.BaseChronology.days()
167 161
167 195
167 java.lang.Object.clinit()
167 125
167 175
167 204
167 189
167 174
167 202
167 194
167 org.joda.time.chrono.BaseChronology.seconds()
167 182
167 org.joda.time.chrono.BaseChronology.year()
167 org.joda.time.chrono.BaseChronology.millisOfSecond()
167 172
167 org.joda.time.chrono.BaseChronology.halfdays()
167 org.joda.time.chrono.BaseChronology.monthOfYear()
167 org.joda.time.chrono.BaseChronology.months()
167 197
167 org.joda.time.chrono.BaseChronology.era()
167 org.joda.time.chrono.BaseChronology.weekyearOfCentury()
167 org.joda.time.chrono.BaseChronology.hours()
167 org.joda.time.chrono.BaseChronology.halfdayOfDay()
167 org.joda.time.chrono.BaseChronology.clockhourOfHalfday()
167 org.joda.time.chrono.BaseChronology.hourOfHalfday()
167 201
167 org.joda.time.chrono.BaseChronology.weeks()
167 186
167 org.joda.time.chrono.BaseChronology.dayOfWeek()
167 193
167 199
167 org.joda.time.chrono.BaseChronology.centuries()
1721 java.lang.Object.clinit()
1721 570
1721 org.joda.time.PeriodType.clinit()
1721 1722
208 755
208 java.lang.Object.clinit()
208 304
208 744
208 522
208 751
208 103
208 747
208 387
208 org.joda.time.DateTimeZone.clinit()
208 226
208 207
org.joda.time.chrono.JulianChronology.hashCode() 1386
1775 sun.security.jca.ProviderList$3.get(int)
1775 java.util.Collections$SynchronizedCollection.size()
1775 java.util.SubList.size()
1775 sun.security.jca.ProviderList$ServiceList.size()
1775 java.util.Collections$CheckedList.get(int)
1775 java.util.Collections$UnmodifiableCollection.size()
1775 java.util.LinkedList.size()
1775 java.util.Collections$SynchronizedList.get(int)
1775 java.util.Arrays$ArrayList.set(int,java.lang.Object)
1775 1777
1775 java.lang.IllegalStateException(java.lang.String)
1775 java.util.Collections$CopiesList.get(int)
1775 java.util.Collections$SingletonList.get(int)
1775 java.util.Collections$EmptyList.size()
1775 java.util.ArrayList.set(int,java.lang.Object)
1775 java.util.Arrays$ArrayList.size()
1775 java.util.ArrayList.get(int)
1775 java.util.Vector.size()
1775 java.lang.Object.clinit()
1775 1764
1775 java.util.Arrays$ArrayList.get(int)
1775 java.util.Collections$CopiesList.size()
1775 sun.security.jca.ProviderList$3.size()
1775 java.util.AbstractList.set(int,java.lang.Object)
1775 java.util.ArrayList$SubList.set(int,java.lang.Object)
1775 java.util.Vector.get(int)
1775 java.util.ArrayList$SubList.get(int)
1775 java.util.SubList.get(int)
1775 java.util.ArrayList.size()
1775 java.util.Collections$CheckedList.set(int,java.lang.Object)
1775 java.lang.Throwable.clinit()
1775 java.util.LinkedList.get(int)
1775 1776
1775 java.util.Collections$SingletonList.size()
1775 java.util.Collections$SynchronizedList.set(int,java.lang.Object)
1775 java.util.Collections$CheckedCollection.size()
1775 sun.security.jca.ProviderList$ServiceList.get(int)
1775 java.util.LinkedList.set(int,java.lang.Object)
1775 java.util.ArrayList$SubList.size()
1775 java.util.Vector.set(int,java.lang.Object)
1775 java.util.Collections$UnmodifiableList.set(int,java.lang.Object)
1775 java.util.Collections$EmptyList.get(int)
1775 java.util.Collections$UnmodifiableList.get(int)
1775 java.util.SubList.set(int,java.lang.Object)
org.joda.time.field.DelegatedDurationField.compareTo(java.lang.Object) org.joda.time.field.DelegatedDurationField.compareTo(org.joda.time.DurationField)
org.joda.time.chrono.BuddhistChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.BuddhistChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.BuddhistChronology.clinit() 393
org.joda.time.chrono.BuddhistChronology.clinit() org.joda.time.chrono.BuddhistChronology.clinit()
org.joda.time.chrono.BuddhistChronology.clinit() 394
org.joda.time.chrono.BuddhistChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.BuddhistChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
3278 1149
3278 1457
3278 org.joda.time.field.DividedDateTimeField.roundFloor(long)
3278 364
3278 932
3278 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
3278 1454
3278 1150
3278 3341
3278 365
3278 3514
3278 3496
3278 1455
3278 1593
3278 934
3278 286
891 892
891 893
1900 1901
786 587
786 268
138 java.lang.Object.clinit()
138 org.joda.time.DateTimeFieldType.clinit()
1302 789
1302 1144
1302 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
1302 1173
1302 792
1302 1906
1302 java.lang.Object.equals(java.lang.Object)
1302 781
1302 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
1302 2272
1302 584
1302 988
1302 787
1302 1107
1428 1428
1428 281
1428 891
1428 3167
1428 org.joda.time.UTCDateTimeZone.nextTransition(long)
3744 3749
3744 java.io.File.clinit()
3744 java.lang.Object.clinit()
3744 3748
3744 java.io.File(java.lang.String)
3744 java.lang.String.equals(java.lang.Object)
3744 org.joda.time.tz.ZoneInfoLogger.clinit()
3744 org.joda.time.tz.ZoneInfoCompiler.printUsage()
3744 java.io.File(java.io.File,java.lang.String)
3744 3747
681 java.lang.Object.clinit()
681 java.lang.StringBuilder()
681 java.lang.Throwable.clinit()
681 java.lang.IllegalArgumentException(java.lang.String)
681 java.lang.StringBuilder.append(java.lang.String)
681 508
681 682
681 java.lang.StringBuilder.toString()
681 java.lang.StringBuilder.append(int)
3343 2860
3343 1987
3343 1998
3343 114
3343 1985
3343 1401
24 java.io.ObjectInputStream.readUTF()
24 java.lang.Throwable.clinit()
24 java.io.DataInputStream.readInt()
24 32
24 java.io.IOException(java.lang.String)
24 java.io.ObjectInputStream.readBoolean()
24 java.io.DataInputStream.readBoolean()
24 java.io.ObjectInputStream$BlockDataInputStream.readBoolean()
24 java.io.ObjectInputStream$BlockDataInputStream.readUnsignedShort()
24 java.lang.String.clinit()
24 java.io.ObjectInputStream.readUnsignedByte()
24 25
24 java.lang.Object.clinit()
24 java.io.ObjectInputStream.readInt()
24 java.io.ObjectInputStream$BlockDataInputStream.readInt()
24 java.io.DataInputStream.readUTF()
24 java.io.DataInputStream.readUnsignedShort()
24 java.io.ObjectInputStream.readUnsignedShort()
24 java.io.ObjectInputStream$BlockDataInputStream.readUnsignedByte()
24 java.io.DataInputStream.readUnsignedByte()
24 org.joda.time.DateTimeZone.clinit()
24 26
24 java.io.ObjectInputStream$BlockDataInputStream.readUTF()
1998 342
1998 960
1998 3410
1998 732
1998 java.lang.Object.clinit()
1998 429
1998 1971
1998 997
1998 371
1998 995
1998 338
1998 996
1998 457
1998 1103
1998 330
1998 992
1998 java.lang.Throwable.clinit()
1998 994
1998 1104
1998 java.lang.IllegalArgumentException(java.lang.String)
1998 991
1998 384
1998 3240
1998 329
1998 334
1998 1106
1998 290
1998 1968
1998 993
3708 2449
3708 3708
3708 2520
3708 3691
3441 3406
899 org.joda.time.chrono.BaseChronology.dayOfMonth()
899 417
899 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
899 3396
899 895
899 435
899 1112
899 1226
899 455
899 373
899 1281
899 195
899 430
899 422
899 903
899 1273
899 2120
899 200
899 1472
899 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
899 421
899 379
899 370
899 org.joda.time.chrono.BaseChronology.monthOfYear()
899 org.joda.time.field.StrictDateTimeField.set(long,int)
899 1275
899 1350
899 3439
899 1458
899 3513
899 2119
899 org.joda.time.field.DividedDateTimeField.add(long,int)
899 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
899 900
899 3347
899 419
899 420
899 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
899 1277
899 3268
899 1379
262 218
262 265
262 271
262 287
262 322
262 266
262 java.lang.Object.clinit()
262 org.joda.time.LocalDate.clinit()
262 91
262 org.joda.time.chrono.BasicGJChronology.clinit()
262 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
262 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
262 391
262 92
262 913
262 299
262 java.lang.Throwable.clinit()
262 java.lang.IllegalArgumentException(java.lang.String)
262 org.joda.time.chrono.JulianChronology.clinit()
262 307
262 262
262 org.joda.time.DateTimeUtils.clinit()
262 org.joda.time.DateTimeZone.clinit()
262 org.joda.time.chrono.GregorianChronology.clinit()
262 268
262 org.joda.time.chrono.BasicChronology.clinit()
262 org.joda.time.chrono.GJChronology.clinit()
464 218
464 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
464 411
464 org.joda.time.chrono.CopticChronology.clinit()
464 java.lang.Throwable.clinit()
464 java.lang.IllegalArgumentException(java.lang.String)
464 465
464 java.lang.StringBuilder.toString()
464 java.lang.StringBuilder.append(int)
464 java.lang.Object.clinit()
464 464
464 java.lang.StringBuilder()
464 439
464 498
464 java.lang.StringBuilder.append(java.lang.String)
464 org.joda.time.DateTimeZone.clinit()
464 org.joda.time.chrono.BasicChronology.clinit()
464 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
org.joda.time.chrono.ZonedChronology.withUTC() 103
660 java.lang.Object.clinit()
660 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3133 3135
3133 3132
3133 3739
3133 3134
3133 3164
3133 3133
1464 1295
1464 3287
1464 290
1464 297
1464 337
542 java.lang.Object()
3728 java.lang.Object.clinit()
3728 3729
3728 java.io.DataOutputStream(java.io.OutputStream)
3728 java.io.DataOutputStream.flush()
296 297
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) 1343
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) 3303
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) 3254
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) 1408
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long) 3429
org.joda.time.convert.StringConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.StringConverter.clinit() 840
org.joda.time.convert.StringConverter.clinit() org.joda.time.convert.StringConverter.clinit()
3159 3160
1846 java.lang.Object.clinit()
1846 org.joda.time.PeriodType.clinit()
1846 567
1846 49
1846 org.joda.time.DurationFieldType.clinit()
395 java.lang.Object.clinit()
395 262
395 org.joda.time.chrono.GJChronology.clinit()
1014 java.lang.Object.clinit()
1014 215
1014 org.joda.time.chrono.ISOChronology.clinit()
1014 586
org.joda.time.TimeOfDay.clinit() 1128
org.joda.time.TimeOfDay.clinit() org.joda.time.TimeOfDay.clinit()
org.joda.time.TimeOfDay.clinit() java.lang.Object.clinit()
org.joda.time.TimeOfDay.clinit() 73
org.joda.time.TimeOfDay.clinit() 62
org.joda.time.TimeOfDay.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.TimeOfDay.clinit() 77
org.joda.time.TimeOfDay.clinit() 75
935 294
935 477
935 341
935 554
366 367
366 3286
366 291
2425 577
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 3399
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1375
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 3350
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1080
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1084
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.field.DividedDateTimeField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1380
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1079
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1376
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 1081
org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long) 118
475 1295
25 java.io.DataInputStream.readLong()
25 java.io.ObjectInputStream.readUnsignedByte()
25 java.io.ObjectInputStream$BlockDataInputStream.readUnsignedByte()
25 java.io.DataInputStream.readUnsignedByte()
25 java.io.ObjectInputStream$BlockDataInputStream.readLong()
25 java.io.ObjectInputStream.readLong()
1381 351
1381 1295
1381 377
1381 291
1381 378
3411 3406
3002 600
2445 2519
2445 2447
2445 2444
2445 2445
2445 2446
3396 3397
3396 org.joda.time.field.DelegatedDurationField.add(long,int)
3396 1111
3396 1162
3396 3382
3396 org.joda.time.field.DecoratedDurationField.add(long,int)
3396 1062
3396 901
3396 896
3396 1061
3396 3213
3266 1464
3266 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3266 3266
3266 3241
3266 1391
3266 1446
3266 3300
3266 1448
3266 3242
3266 1471
3266 1390
3266 3432
3266 3344
699 702
699 java.lang.Object.clinit()
699 700
699 646
699 701
912 1464
912 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
912 3241
912 3266
912 3396
912 895
912 1112
912 1226
912 1391
912 1448
912 3242
912 903
912 1471
912 3432
912 org.joda.time.chrono.BaseChronology.year()
912 1472
912 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
912 370
912 1350
912 1458
912 899
912 1446
912 org.joda.time.field.DividedDateTimeField.add(long,int)
912 201
912 3300
912 900
912 3347
912 1390
912 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
912 3268
912 3344
55 56
54 java.lang.Object.clinit()
54 org.joda.time.DurationFieldType.clinit()
488 java.lang.Object.clinit()
488 org.joda.time.format.FormatUtils.clinit()
488 489
556 java.lang.String.hashCode()
556 36
1415 379
1415 1436
1415 421
1415 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1415 417
1415 435
1415 1275
1415 455
1415 3513
1415 373
1415 2119
1415 1281
1415 1467
1415 430
1415 1416
1415 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1415 422
1415 1273
1415 1277
3450 755
3450 342
3450 1512
3450 520
3450 3296
3450 386
3450 942
3450 org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
3450 429
3450 371
3450 3641
3450 587
3450 338
3450 3490
3450 1068
3450 3568
3450 937
3450 1104
3450 519
3450 2016
3450 384
3450 329
3450 3240
3450 525
3450 588
3450 949
3450 org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
3450 334
3450 1106
3450 3551
3450 3295
3450 522
3450 285
3450 1054
3450 387
3450 226
3450 521
3450 3756
3450 744
3450 274
3450 1039
3450 207
3450 3410
3450 960
3450 1531
3450 java.lang.Object.clinit()
3450 751
3450 997
3450 995
3450 905
3450 996
3450 org.joda.time.chrono.BaseChronology.year()
3450 924
3450 3454
3450 925
3450 457
3450 1492
3450 1103
3450 304
3450 330
3450 992
3450 org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
3450 3649
3450 java.lang.Throwable.clinit()
3450 org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
3450 994
3450 java.lang.IllegalArgumentException(java.lang.String)
3450 747
3450 991
3450 938
3450 917
3450 1046
3450 3239
3450 916
3450 277
3450 3655
3450 201
3450 290
3450 org.joda.time.DateTimeUtils.clinit()
3450 3265
3450 org.joda.time.DateTimeZone.clinit()
3450 java.lang.Integer.intValue()
3450 485
3450 993
3450 922
3450 283
org.joda.time.field.DecoratedDurationField.add(long,int) 3397
org.joda.time.field.DecoratedDurationField.add(long,int) org.joda.time.field.DelegatedDurationField.add(long,int)
org.joda.time.field.DecoratedDurationField.add(long,int) 1111
org.joda.time.field.DecoratedDurationField.add(long,int) 1162
org.joda.time.field.DecoratedDurationField.add(long,int) 3382
org.joda.time.field.DecoratedDurationField.add(long,int) org.joda.time.field.DecoratedDurationField.add(long,int)
org.joda.time.field.DecoratedDurationField.add(long,int) 1062
org.joda.time.field.DecoratedDurationField.add(long,int) 901
org.joda.time.field.DecoratedDurationField.add(long,int) 896
org.joda.time.field.DecoratedDurationField.add(long,int) 1061
1316 java.lang.Object.clinit()
1316 java.lang.Integer.toString(int)
1316 java.lang.Integer.clinit()
1930 3273
1930 1749
1930 1058
1930 1930
1930 1368
1930 225
1930 1748
1930 3402
1930 1700
1930 3386
1930 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
3484 java.lang.Object.clinit()
3484 org.joda.time.DateTimeFieldType.clinit()
3484 106
3484 508
3484 3485
139 115
2661 java.lang.Object.clinit()
2661 52
2661 org.joda.time.DurationFieldType.clinit()
3129 3146
3129 3132
3129 486
3129 3137
3129 3134
3129 java.util.Locale.getDefault()
3129 3159
3129 1046
3129 java.lang.Object.clinit()
3129 277
3129 3135
3129 3739
3129 285
3129 3164
3129 3141
3129 org.joda.time.DateTimeZone.clinit()
3129 java.util.Locale.clinit()
3129 905
3129 283
772 97
1397 1149
1397 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
1397 3302
1397 3341
1397 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
1397 1455
1397 1593
1397 934
1397 286
1397 1457
1397 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
1397 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1397 364
1397 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1397 932
1397 363
1397 1150
1397 1454
1397 3345
1397 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
1397 1399
1397 3514
1397 365
1397 1398
1397 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
1397 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
1397 3496
1397 362
1397 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
1397 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale) java.lang.String.length()
org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String) java.lang.Object.clinit()
org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String) java.lang.StringBuilder()
org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String) java.lang.StringBuilder.append(java.lang.String)
org.joda.time.IllegalFieldValueException.prependMessage(java.lang.String) java.lang.StringBuilder.toString()
3350 java.lang.Object.clinit()
3350 1104
3350 1376
3350 374
3286 3287
1232 java.lang.Object()
3234 java.lang.Object.clinit()
3234 java.lang.String.equalsIgnoreCase(java.lang.String)
3234 86
3234 org.joda.time.DateTimeFieldType.clinit()
3234 java.lang.Throwable.clinit()
3234 3230
3545 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3545 org.joda.time.format.DateTimeFormat$StyleFormatter.clinit()
3545 java.lang.Object.clinit()
3545 3548
3545 java.util.Locale.clinit()
3545 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
3545 3546
3545 org.joda.time.format.DateTimeFormat.clinit()
3545 java.util.Locale.getDefault()
3545 881
13 java.lang.Object.clinit()
13 java.lang.ClassLoader.getResourceAsStream(java.lang.String)
13 java.lang.ClassLoader.clinit()
13 java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
13 13
13 java.net.URLClassLoader.getResourceAsStream(java.lang.String)
13 java.util.ResourceBundle$RBClassLoader.getResourceAsStream(java.lang.String)
13 14
1379 3399
1379 755
1379 744
1379 219
1379 org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
1379 1375
1379 1370
1379 276
1379 207
1379 1102
1379 732
1379 java.lang.Object.clinit()
1379 1084
1379 org.joda.time.field.DividedDateTimeField.add(long,long)
1379 org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
1379 751
1379 2258
1379 org.joda.time.chrono.LimitChronology.withUTC()
1379 749
1379 1081
1379 304
1379 495
1379 330
1379 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1379 747
1379 385
1379 753
1379 3350
1379 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
1379 1080
1379 478
1379 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
1379 284
1379 2211
1379 1380
1379 org.joda.time.chrono.ZonedChronology.withUTC()
1379 522
1379 1079
1379 1376
1379 387
1379 523
1379 226
1379 269
1379 404
1313 2228
1313 1195
1313 2086
1313 2320
1313 3418
1313 1613
1313 2319
1313 1612
1313 1314
1313 org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
1313 1497
1313 1498
1313 1315
1313 2229
1313 1194
1313 org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
1313 3258
1313 2087
123 449
123 480
123 357
123 123
123 256
123 124
123 251
123 245
123 250
123 243
123 242
123 248
123 211
123 3395
123 249
123 389
123 236
123 253
123 459
123 254
3146 3147
896 java.lang.Object.clinit()
896 897
2505 java.lang.String.clinit()
2505 java.lang.Object.clinit()
2505 java.util.ResourceBundle.getString(java.lang.String)
2509 1769
439 441
439 java.lang.Object.clinit()
439 440
439 1506
439 java.lang.Throwable.clinit()
439 java.lang.IllegalArgumentException(java.lang.String)
439 785
849 java.lang.Object.clinit()
849 java.lang.Object()
2187 289
2187 3397
2187 1162
2187 3382
2187 896
2187 288
2187 2188
2187 org.joda.time.chrono.BaseChronology.days()
2187 1061
2187 org.joda.time.field.DelegatedDurationField.add(long,int)
2187 1111
2187 175
2187 1062
2187 org.joda.time.field.DecoratedDurationField.add(long,int)
2187 901
379 342
379 1269
379 384
379 374
379 83
379 957
379 380
379 381
379 433
379 960
379 java.lang.Object.clinit()
379 958
379 432
379 338
379 996
379 1270
1222 java.lang.Object.clinit()
1222 1002
1222 1223
1222 587
1222 268
229 231
229 230
229 70
229 org.joda.time.field.DelegatedDurationField.getUnitMillis()
229 239
229 246
229 388
229 68
857 838
3403 3364
3403 org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
3403 org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
3403 3348
3403 3383
3403 org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
3403 3404
3403 org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
3403 org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
3403 1369
3403 3213
300 216
300 556
300 301
300 217
300 93
277 278
277 282
3479 java.lang.Object()
2195 java.io.Writer.append(char)
2195 java.nio.CharBuffer.append(char)
2195 java.lang.StringBuilder.append(char)
2195 java.io.StringWriter.append(char)
2195 java.io.PrintWriter.append(char)
2195 java.lang.StringBuffer.append(char)
2195 java.io.PrintStream.append(char)
1953 1905
569 570
569 571
569 1719
1763 1767
1763 java.lang.Object.clinit()
1763 1764
1763 1766
1763 java.lang.Throwable.clinit()
1763 java.lang.IllegalArgumentException(java.lang.String)
1763 org.joda.time.format.PeriodFormatterBuilder$Literal.clinit()
492 java.lang.Object.clinit()
492 262
492 org.joda.time.DateTimeZone.clinit()
492 org.joda.time.chrono.GJChronology.clinit()
791 303
791 791
791 1936
791 782
791 java.lang.Object.hashCode()
791 org.joda.time.chrono.GregorianChronology.hashCode()
791 1385
791 793
791 217
791 org.joda.time.chrono.BuddhistChronology.hashCode()
791 org.joda.time.chrono.IslamicChronology.hashCode()
791 93
791 216
791 556
791 org.joda.time.chrono.JulianChronology.hashCode()
791 org.joda.time.chrono.EthiopicChronology.hashCode()
791 103
791 226
791 788
3132 278
3132 3133
546 128
546 134
546 359
546 410
546 127
546 448
546 3213
546 454
546 java.lang.Object.clinit()
546 241
546 479
546 151
546 org.joda.time.chrono.IslamicChronology.clinit()
546 103
546 104
546 247
546 org.joda.time.chrono.BasicChronology.clinit()
546 244
219 java.lang.Object.clinit()
219 org.joda.time.chrono.ISOChronology.clinit()
3122 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
3122 3281
3122 417
3122 342
3122 3396
3122 435
3122 1404
3122 1112
3122 455
3122 1226
3122 3425
3122 3122
3122 429
3122 430
3122 371
3122 903
3122 338
3122 3255
3122 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3122 421
3122 1347
3122 1450
3122 1104
3122 382
3122 384
3122 1350
3122 3439
3122 329
3122 3240
3122 3513
3122 334
3122 1106
3122 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3122 420
3122 1277
3122 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
3122 1379
3122 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
3122 895
3122 960
3122 3410
3122 373
3122 1281
3122 1333
3122 997
3122 422
3122 1273
3122 2120
3122 995
3122 996
3122 379
3122 1472
3122 1103
3122 457
3122 992
3122 330
3122 994
3122 370
3122 org.joda.time.field.StrictDateTimeField.set(long,int)
3122 1275
3122 991
3122 1458
3122 2119
3122 org.joda.time.field.DividedDateTimeField.add(long,int)
3122 3121
3122 290
3122 419
3122 3347
3122 900
3122 993
3122 3268
651 505
651 java.lang.Object.clinit()
651 628
651 509
651 643
651 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
651 630
3304 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
3304 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
3304 363
3304 3302
3304 3345
3304 3304
3304 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
3304 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
3304 1399
3304 1398
3304 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
3304 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
3304 362
3304 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
3304 3434
3304 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
3678 java.lang.Object.clinit()
3678 java.lang.IllegalArgumentException()
3678 org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit()
3678 1775
3678 java.lang.Throwable.clinit()
3678 3681
696 java.lang.Object.clinit()
696 697
2258 304
2258 495
2258 753
2258 385
2258 219
2258 478
2258 1102
2258 2211
2258 java.lang.Object.clinit()
2258 org.joda.time.chrono.ZonedChronology.withUTC()
2258 2258
2258 103
2258 org.joda.time.chrono.LimitChronology.withUTC()
2258 749
2258 org.joda.time.DateTimeZone.clinit()
2258 523
2258 757
2258 269
org.joda.time.chrono.BaseChronology.minuteOfDay() 172
org.joda.time.chrono.BaseChronology.minuteOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.minuteOfDay() org.joda.time.chrono.BaseChronology.minutes()
org.joda.time.chrono.BaseChronology.minuteOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.minuteOfDay() 76
org.joda.time.chrono.BaseChronology.minuteOfDay() 1201
65 66
65 java.lang.Object.clinit()
65 java.lang.Throwable.clinit()
65 java.lang.IllegalArgumentException(java.lang.String)
1748 3273
1748 1749
1748 1930
1748 1368
1748 1748
1748 3402
1748 1700
1748 1063
1748 3386
1748 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
2641 java.lang.Object.clinit()
2641 59
2641 org.joda.time.DurationFieldType.clinit()
720 505
720 java.lang.Object.clinit()
720 695
720 705
720 696
720 509
720 643
720 709
720 699
720 640
720 600
720 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3134 java.lang.Object.clinit()
3134 3135
3134 java.util.Arrays.clinit()
3134 java.util.Arrays.binarySearch(long[],long)
649 505
649 java.lang.Object.clinit()
649 509
649 643
649 614
649 616
649 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
74 java.lang.Object.clinit()
74 org.joda.time.DateTimeFieldType.clinit()
47 java.lang.Object.clinit()
47 41
47 java.lang.Throwable.clinit()
47 java.lang.IllegalArgumentException(java.lang.String)
1063 1046
1063 java.lang.Object.clinit()
1063 277
1063 java.lang.ArithmeticException(java.lang.String)
1063 java.lang.Throwable.clinit()
1063 285
1063 905
1063 283
329 330
466 96
1348 1295
1348 3287
1348 297
1348 337
1781 1782
323 342
323 352
323 192
323 327
323 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
323 198
323 359
323 410
323 205
323 361
323 448
323 167
323 3304
323 187
323 429
323 479
323 371
323 200
323 338
323 185
323 244
323 190
323 191
323 1104
323 188
323 363
323 384
323 324
323 3345
323 196
323 3240
323 329
323 127
323 334
323 1106
323 java.lang.IllegalArgumentException()
323 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
323 326
323 103
323 356
323 3434
323 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
323 128
323 184
323 3302
323 203
323 960
323 3410
323 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
323 java.lang.Object.clinit()
323 195
323 354
323 204
323 189
323 997
323 202
323 995
323 182
323 996
323 360
323 457
323 1103
323 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
323 330
323 992
323 java.lang.Throwable.clinit()
323 994
323 134
323 991
323 197
323 454
323 3213
323 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
323 241
323 1399
323 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
323 1398
323 290
323 201
323 355
323 186
323 362
323 193
323 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
323 247
323 199
323 993
323 268
323 227
702 667
702 639
702 608
702 621
702 3481
702 org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength()
702 704
702 1234
702 3654
702 609
702 703
702 org.joda.time.format.DateTimeFormat$StyleFormatter.estimateParsedLength()
702 3487
702 java.lang.Object()
702 706
2430 java.lang.Object.clinit()
2430 2431
2430 1759
661 651
661 505
661 java.lang.Object.clinit()
661 509
661 643
661 656
661 641
661 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
687 505
687 java.lang.Object.clinit()
687 509
687 685
687 643
687 680
687 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
563 java.lang.Object.clinit()
563 564
563 org.joda.time.DateTimeUtils.clinit()
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 3235
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 363
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 3302
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 3345
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 3304
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) java.lang.Object.clinit()
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 1399
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 1398
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 423
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 362
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) 3434
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long) org.joda.time.chrono.GJChronology.clinit()
3236 823
686 505
686 java.lang.Object.clinit()
686 509
686 643
686 684
686 641
686 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3068 java.lang.Object.clinit()
3068 java.lang.StringBuilder()
3068 java.lang.Throwable.clinit()
3068 java.lang.IllegalArgumentException(java.lang.String)
3068 java.lang.StringBuilder.append(java.lang.String)
3068 java.lang.StringBuilder.append(java.lang.Object)
3068 java.lang.StringBuilder.toString()
624 598
498 java.util.TimeZone.getDefault()
498 java.lang.Object.clinit()
498 6
498 java.util.TimeZone.clinit()
498 java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)
498 java.util.concurrent.atomic.AtomicReference.get()
498 org.joda.time.DateTimeZone.clinit()
498 499
498 java.lang.System.getProperty(java.lang.String)
498 java.lang.System.clinit()
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) 3430
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) 1137
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial)
717 505
717 java.lang.Object.clinit()
717 696
717 509
717 643
717 709
717 699
717 640
717 641
717 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3502 3482
3502 3503
3502 3530
3502 3525
3502 733
3502 3544
3502 737
3502 1237
3502 731
3502 730
3502 1251
3502 3471
3502 3519
3502 734
3364 java.lang.Object.clinit()
3364 1370
626 505
626 java.lang.Object.clinit()
626 509
626 600
626 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
626 627
1936 216
1936 java.lang.String.hashCode()
1936 301
1936 556
1936 387
1936 217
1936 740
1936 93
344 426
344 2002
344 1219
344 org.joda.time.DateTimeFieldType.clinit()
344 1530
344 2216
344 2138
344 72
344 345
344 2001
344 java.lang.Object.clinit()
344 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
344 103
344 346
344 343
344 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
917 java.nio.StringCharBuffer.subSequence(int,int)
917 java.lang.StringBuffer.charAt(int)
917 java.nio.ByteBufferAsCharBufferRB.subSequence(int,int)
917 java.lang.StringBuffer.toString()
917 java.lang.String.charAt(int)
917 java.nio.CharBuffer.length()
917 java.nio.DirectCharBufferU.subSequence(int,int)
917 java.nio.DirectCharBufferRU.subSequence(int,int)
917 java.lang.StringBuffer.length()
917 java.lang.Object.clinit()
917 java.nio.ByteBufferAsCharBufferL.subSequence(int,int)
917 java.lang.Math.clinit()
917 java.lang.String.subSequence(int,int)
917 java.lang.StringBuilder.length()
917 java.nio.CharBuffer.charAt(int)
917 java.lang.StringBuffer.subSequence(int,int)
917 java.lang.Integer.clinit()
917 java.nio.ByteBufferAsCharBufferRL.subSequence(int,int)
917 java.lang.Math.min(int,int)
917 java.lang.Integer.parseInt(java.lang.String)
917 java.nio.HeapCharBufferR.subSequence(int,int)
917 java.lang.StringBuilder.toString()
917 java.nio.DirectCharBufferS.subSequence(int,int)
917 java.lang.String.toString()
917 918
917 java.nio.DirectCharBufferRS.subSequence(int,int)
917 java.nio.HeapCharBuffer.subSequence(int,int)
917 java.nio.CharBuffer.toString()
917 java.lang.StringBuilder.charAt(int)
917 java.lang.String.length()
917 java.nio.ByteBufferAsCharBufferB.subSequence(int,int)
917 java.lang.StringBuilder.subSequence(int,int)
1401 2180
1401 2019
1401 2304
1401 1145
1401 1402
1401 2049
333 337
2684 51
2684 java.lang.Object.clinit()
2684 org.joda.time.DurationFieldType.clinit()
401 315
401 318
1390 1464
1390 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
1390 3266
1390 3241
1390 1391
1390 276
1390 1446
1390 3300
1390 1448
1390 3242
1390 1471
1390 1390
1390 3432
1390 3344
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) java.lang.Object.clinit()
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1986
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 156
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1987
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1998
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1988
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2027
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 375
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1985
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 2788
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial) 1401
3127 java.lang.String.equals(java.lang.Object)
3127 3128
410 241
410 479
410 128
410 134
410 247
410 359
410 410
410 244
410 127
410 448
410 454
410 3213
765 767
765 org.joda.time.field.StrictDateTimeField.isLenient()
765 3445
765 768
765 763
765 765
765 762
765 1377
765 org.joda.time.chrono.GJChronology$CutoverField.isLenient()
765 1378
765 766
765 769
765 org.joda.time.field.LenientDateTimeField.isLenient()
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 1366
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 3401
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 3274
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 3275
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 1666
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 1367
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
532 java.lang.Object.clinit()
532 org.joda.time.chrono.EthiopicChronology.clinit()
532 org.joda.time.chrono.BasicChronology.clinit()
532 533
623 603
623 java.lang.Object.clinit()
623 145
623 org.joda.time.DateTimeFieldType.clinit()
727 java.lang.Object.clinit()
727 831
727 org.joda.time.DateTimeUtils.clinit()
727 587
727 268
3162 java.lang.Character.clinit()
3162 java.lang.Object.clinit()
3162 java.lang.StringBuilder.setCharAt(int,char)
3162 java.lang.StringBuilder.charAt(int)
3162 java.lang.Character.digit(char,int)
3162 java.lang.StringBuilder.toString()
3162 java.lang.StringBuilder.length()
3162 java.lang.StringBuilder(java.lang.String)
375 368
1823 1825
1823 org.joda.time.field.UnsupportedDurationField.isPrecise()
1823 69
1823 3238
1823 org.joda.time.field.DelegatedDurationField.isPrecise()
1823 3237
1823 1699
1823 1824
1823 1823
1823 67
1823 3165
1823 org.joda.time.tz.DateTimeZoneBuilder$DSTZone.isFixed()
1090 1091
1090 java.lang.Object.clinit()
1090 214
1090 org.joda.time.chrono.ISOChronology.clinit()
1989 java.util.JumboEnumSet.contains(java.lang.Object)
1989 java.util.TreeSet.contains(java.lang.Object)
1989 org.joda.time.field.DelegatedDurationField.getUnitMillis()
1989 java.util.IdentityHashMap$EntrySet.contains(java.lang.Object)
1989 239
1989 java.util.Collections$UnmodifiableCollection.contains(java.lang.Object)
1989 java.lang.ProcessEnvironment$StringEntrySet.contains(java.lang.Object)
1989 java.util.RegularEnumSet.contains(java.lang.Object)
1989 246
1989 org.joda.time.chrono.BaseChronology.days()
1989 java.lang.Object.clinit()
1989 java.util.AbstractMap$1.contains(java.lang.Object)
1989 java.util.concurrent.ConcurrentHashMap$KeySet.contains(java.lang.Object)
1989 org.joda.time.LocalTime.clinit()
1989 175
1989 1096
1989 java.util.Collections$SetFromMap.contains(java.lang.Object)
1989 java.util.Collections$CheckedCollection.contains(java.lang.Object)
1989 java.util.WeakHashMap$KeySet.contains(java.lang.Object)
1989 java.util.IdentityHashMap$KeySet.contains(java.lang.Object)
1989 131
1989 java.util.TreeMap$NavigableSubMap$EntrySetView.contains(java.lang.Object)
1989 java.util.WeakHashMap$EntrySet.contains(java.lang.Object)
1989 68
1989 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.contains(java.lang.Object)
1989 java.lang.ProcessEnvironment$StringKeySet.contains(java.lang.Object)
1989 230
1989 70
1989 java.util.Hashtable$EntrySet.contains(java.lang.Object)
1989 java.util.TreeMap$KeySet.contains(java.lang.Object)
1989 java.util.Collections$EmptySet.contains(java.lang.Object)
1989 824
1989 java.util.Hashtable$KeySet.contains(java.lang.Object)
1989 java.util.concurrent.ConcurrentHashMap$EntrySet.contains(java.lang.Object)
1989 java.util.Collections$CheckedMap$CheckedEntrySet.contains(java.lang.Object)
1989 231
1989 sun.nio.ch.Util$2.contains(java.lang.Object)
1989 java.util.HashMap$KeySet.contains(java.lang.Object)
1989 170
1989 org.joda.time.field.DelegatedDurationField.isSupported()
1989 java.util.AbstractCollection.contains(java.lang.Object)
1989 181
1989 javax.security.auth.Subject$SecureSet.contains(java.lang.Object)
1989 java.util.Collections$SingletonSet.contains(java.lang.Object)
1989 java.util.TreeMap$EntrySet.contains(java.lang.Object)
1989 java.util.HashSet.contains(java.lang.Object)
1989 java.util.Collections$SynchronizedCollection.contains(java.lang.Object)
1989 388
1989 java.util.HashMap$EntrySet.contains(java.lang.Object)
280 java.lang.Object()
3731 902
3731 214
3731 417
3731 435
3731 455
3731 184
3731 373
3731 1281
3731 java.lang.Object.clinit()
3731 430
3731 org.joda.time.chrono.ISOChronology.clinit()
3731 422
3731 1273
3731 200
3731 2120
3731 379
3731 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3731 421
3731 org.joda.time.field.StrictDateTimeField.set(long,int)
3731 1275
3731 3439
3731 3513
3731 899
3731 2119
3731 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3731 201
3731 419
3731 420
3731 1277
3731 1379
630 505
630 java.lang.Object.clinit()
630 509
630 600
630 631
630 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2029 2023
2029 java.lang.Object.clinit()
2029 592
1240 java.lang.Object.clinit()
1240 1250
1240 1242
1240 org.joda.time.chrono.GJLocaleSymbols.clinit()
3523 java.lang.Enum(java.lang.String,int)
745 java.lang.Object.clinit()
745 304
745 java.lang.StringBuilder()
745 java.lang.StringBuilder.append(char)
745 java.lang.StringBuilder.append(java.lang.String)
745 36
745 java.lang.StringBuilder.toString()
2446 java.lang.StringBuffer.append(java.lang.String)
3638 603
3638 java.lang.Object.clinit()
3638 62
3638 org.joda.time.DateTimeFieldType.clinit()
1149 1149
1149 1457
1149 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1149 364
1149 932
1149 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1149 1150
1149 1454
1149 276
1149 284
1149 3341
1149 365
1149 3514
1149 3496
1149 1455
1149 1593
1149 1354
1149 934
1149 3435
1149 286
1149 1648
564 java.lang.Object.clinit()
564 org.joda.time.PeriodType.clinit()
564 566
3433 3406
3160 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
3160 java.security.Provider.put(java.lang.Object,java.lang.Object)
3160 sun.util.PreHashedMap.get(java.lang.Object)
3160 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3160 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3160 sun.misc.SoftCache.get(java.lang.Object)
3160 java.lang.Object.clinit()
3160 java.util.AbstractMap.get(java.lang.Object)
3160 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
3160 3140
3160 java.lang.StringBuilder()
3160 java.util.WeakHashMap.get(java.lang.Object)
3160 java.lang.String.equals(java.lang.Object)
3160 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3160 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
3160 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
3160 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3160 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
3160 java.util.TreeMap.get(java.lang.Object)
3160 java.util.Collections$SingletonMap.get(java.lang.Object)
3160 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
3160 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3160 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
3160 java.util.jar.Attributes.get(java.lang.Object)
3160 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3160 java.util.Collections$CheckedMap.get(java.lang.Object)
3160 1244
3160 java.util.IdentityHashMap.get(java.lang.Object)
3160 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
3160 java.util.HashMap.get(java.lang.Object)
3160 java.lang.StringBuilder.toString()
3160 java.security.Provider.get(java.lang.Object)
3160 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
3160 java.lang.String.clinit()
3160 java.text.DateFormatSymbols.getZoneStrings()
3160 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
3160 java.util.LinkedHashMap.get(java.lang.Object)
3160 java.util.Hashtable.get(java.lang.Object)
3160 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
3160 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
3160 org.joda.time.DateTimeUtils.clinit()
3160 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3160 java.lang.StringBuilder.append(java.lang.String)
3160 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3160 java.util.Locale.clinit()
3160 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
3160 java.util.Collections$EmptyMap.get(java.lang.Object)
265 java.lang.Object.clinit()
265 498
265 org.joda.time.DateTimeZone.clinit()
271 755
271 1149
271 org.joda.time.chrono.BaseChronology.dayOfMonth()
271 744
271 274
271 219
271 275
271 207
271 1102
271 3341
271 195
271 java.lang.Object.clinit()
271 751
271 2258
271 1455
271 1593
271 org.joda.time.chrono.LimitChronology.withUTC()
271 749
271 934
271 3435
271 286
271 1457
271 304
271 495
271 org.joda.time.field.DividedDateTimeField.roundFloor(long)
271 364
271 747
271 385
271 753
271 932
271 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
271 1150
271 1454
271 478
271 272
271 2211
271 365
271 3514
271 org.joda.time.chrono.ZonedChronology.withUTC()
271 522
271 org.joda.time.DateTimeUtils.clinit()
271 3496
271 387
271 org.joda.time.DateTimeZone.clinit()
271 523
271 226
271 269
271 1648
709 628
709 509
709 643
709 712
709 711
709 699
709 600
709 710
709 707
709 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
709 630
709 java.lang.Object.clinit()
709 505
709 705
709 632
709 635
2321 1096
851 838
989 325
989 756
989 755
989 20
989 744
989 747
989 324
989 752
989 451
989 207
989 748
989 208
989 1040
989 3126
989 326
989 751
989 790
989 java.lang.Object.getClass()
1369 java.lang.Object.clinit()
1369 1370
161 java.lang.Object.clinit()
161 162
161 54
161 org.joda.time.DurationFieldType.clinit()
1906 20
1906 1040
1906 3126
1906 387
1906 790
1906 740
1906 451
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 1366
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 3401
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 3274
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 3275
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 1666
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 1367
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) 118
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
2404 java.lang.Object.clinit()
2404 org.joda.time.PeriodType.clinit()
2404 567
2404 org.joda.time.DurationFieldType.clinit()
2404 59
3275 1366
3275 3401
3275 org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
3275 org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
3275 org.joda.time.field.DividedDateTimeField.getDifference(long,long)
3275 3274
3275 org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
3275 3275
3275 1666
3275 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
3275 1367
3275 org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
321 537
321 551
321 320
321 472
321 348
2120 407
2120 java.lang.Object.clinit()
2120 java.lang.Throwable.clinit()
2120 org.joda.time.DateTimeFieldType.clinit()
2120 java.lang.Integer.clinit()
2120 420
2120 106
2120 374
2120 java.lang.Integer.valueOf(int)
2120 1023
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.Writer.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.Object.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.nio.CharBuffer.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuilder.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.FormatUtils.clinit()
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.StringWriter.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.getTwoDigitYear(org.joda.time.ReadablePartial)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintWriter.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuffer.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintStream.append(char)
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 489
org.joda.time.format.PeriodFormatterBuilder.clinit() org.joda.time.format.PeriodFormatterBuilder.clinit()
org.joda.time.format.PeriodFormatterBuilder.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.format.PeriodFormatterBuilder.clinit() java.lang.Object.clinit()
org.joda.time.format.PeriodFormatterBuilder.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1464
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3266
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3241
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1391
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1446
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3300
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1448
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3242
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1471
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 1390
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3432
org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long) 3344
330 1103
330 457
330 330
330 992
330 342
330 994
330 1104
330 991
330 384
330 3240
330 329
330 960
330 3410
330 334
330 429
330 1106
330 290
330 997
330 371
330 995
330 338
330 993
330 996
3270 417
3270 342
3270 435
3270 198
3270 455
3270 429
3270 430
3270 org.joda.time.chrono.BaseChronology.weekOfWeekyear()
3270 371
3270 org.joda.time.chrono.BaseChronology.millisOfDay()
3270 338
3270 421
3270 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3270 1104
3270 384
3270 3439
3270 329
3270 3240
3270 3513
3270 334
3270 1106
3270 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3270 420
3270 1277
3270 1379
3270 org.joda.time.chrono.BaseChronology.weekyear()
3270 184
3270 373
3270 3410
3270 960
3270 1281
3270 422
3270 997
3270 1273
3270 2120
3270 194
3270 995
3270 996
3270 379
3270 1103
3270 457
3270 992
3270 330
3270 994
3270 org.joda.time.field.StrictDateTimeField.set(long,int)
3270 1275
3270 991
3270 197
3270 2119
3270 290
3270 419
3270 org.joda.time.chrono.BaseChronology.dayOfWeek()
3270 993
3492 603
3492 java.lang.Object.clinit()
3492 org.joda.time.DateTimeFieldType.clinit()
3492 112
2789 2023
2789 java.lang.Object.clinit()
2789 2790
758 97
676 505
676 java.lang.Object.clinit()
676 674
676 509
676 643
676 670
676 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3426 3406
org.joda.time.convert.ReadablePeriodConverter.clinit() org.joda.time.convert.ReadablePeriodConverter.clinit()
org.joda.time.convert.ReadablePeriodConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.ReadablePeriodConverter.clinit() 857
2802 2046
2802 3077
2802 1134
2802 589
2802 288
2802 3014
2802 java.lang.Object.clinit()
2802 2961
2802 2963
2802 3016
2802 1096
2802 3074
2802 2900
2802 2804
2802 2803
2802 1968
2802 2806
2802 2902
216 216
216 556
216 217
216 93
41 java.lang.Object()
837 838
3155 java.lang.Object()
901 java.lang.Object.clinit()
901 897
2277 java.lang.Object.clinit()
2277 262
2277 268
2277 259
2277 org.joda.time.chrono.GJChronology.clinit()
1414 3233
1414 1415
1414 1414
1414 3495
1414 3441
1414 org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
1414 org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
1414 276
1414 3231
1414 284
1414 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
3420 3406
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 3273
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 1749
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 1930
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 1368
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 1748
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 3402
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 1700
org.joda.time.field.DelegatedDurationField.getDifference(long,long) 3386
org.joda.time.field.DelegatedDurationField.getDifference(long,long) org.joda.time.field.DelegatedDurationField.getDifference(long,long)
3650 java.lang.Object.clinit()
3650 java.util.concurrent.atomic.AtomicReference.compareAndSet(java.lang.Object,java.lang.Object)
3650 org.joda.time.DateTimeUtils.clinit()
3650 java.util.concurrent.atomic.AtomicReference.get()
3650 3651
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) 1315
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getAsText(long,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) 3418
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) 3258
org.joda.time.field.DelegatedDateTimeField.getAsText(long,java.util.Locale) 1314
430 351
430 java.lang.Object.clinit()
430 350
430 552
430 374
430 431
430 3286
430 291
430 378
430 475
1026 1027
3406 java.lang.UnsupportedOperationException(java.lang.String)
3406 java.lang.Object.clinit()
3406 java.lang.StringBuilder()
3406 java.lang.Throwable.clinit()
3406 java.lang.StringBuilder.append(java.lang.String)
3406 java.lang.StringBuilder.append(java.lang.Object)
3406 java.lang.StringBuilder.toString()
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit() java.lang.Object.clinit()
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit() org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit()
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.clinit() 3680
org.joda.time.YearMonthDay.clinit() java.lang.Object.clinit()
org.joda.time.YearMonthDay.clinit() 147
org.joda.time.YearMonthDay.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.YearMonthDay.clinit() org.joda.time.YearMonthDay.clinit()
org.joda.time.YearMonthDay.clinit() 106
org.joda.time.YearMonthDay.clinit() 152
3495 1414
3495 3441
3495 3235
3495 org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
3495 org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
3495 java.lang.Object.clinit()
3495 3233
3495 1415
3495 423
3495 3495
3495 424
3495 3231
3495 org.joda.time.chrono.GJChronology.clinit()
3495 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
5 java.lang.Object.clinit()
5 java.lang.Throwable.clinit()
5 java.lang.IllegalArgumentException(java.lang.String)
5 java.lang.Object()
533 218
533 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
533 411
533 java.lang.Throwable.clinit()
533 java.lang.IllegalArgumentException(java.lang.String)
533 org.joda.time.chrono.EthiopicChronology.clinit()
533 534
533 java.lang.StringBuilder.toString()
533 java.lang.StringBuilder.append(int)
533 java.lang.Object.clinit()
533 java.lang.StringBuilder()
533 439
533 498
533 java.lang.StringBuilder.append(java.lang.String)
533 org.joda.time.DateTimeZone.clinit()
533 533
533 org.joda.time.chrono.BasicChronology.clinit()
533 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
787 778
787 789
787 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
787 589
787 1173
787 792
787 java.lang.Object.clinit()
787 1906
787 java.lang.Object.equals(java.lang.Object)
787 781
787 779
787 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
787 103
787 2272
787 988
787 584
787 787
787 1107
1499 588
3511 java.lang.Object.clinit()
3511 3512
3511 1242
3511 org.joda.time.chrono.GJLocaleSymbols.clinit()
3456 732
3456 org.joda.time.format.DateTimeParserBucket$SavedField(org.joda.time.DateTimeField,java.lang.String,java.util.Locale)
3456 919
637 java.lang.Object()
1242 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
1242 java.lang.Object.clinit()
1242 1243
1242 org.joda.time.chrono.GJLocaleSymbols.clinit()
1242 java.util.Locale.clinit()
1242 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
1242 java.util.Locale.getDefault()
519 java.lang.UnsupportedOperationException(java.lang.String)
519 java.lang.Object.clinit()
519 java.lang.Throwable.clinit()
235 238
235 357
235 359
235 410
235 252
235 243
235 448
235 250
235 211
235 248
235 479
235 1203
235 3394
235 236
235 255
235 java.util.HashMap.put(java.lang.Object,java.lang.Object)
235 244
235 254
235 270
235 java.util.HashMap.get(java.lang.Object)
235 245
235 127
235 405
235 253
235 226
235 459
235 446
235 449
235 480
235 123
235 128
235 460
235 251
235 240
235 java.lang.Object.clinit()
235 java.util.HashMap.containsKey(java.lang.Object)
235 3395
235 389
235 237
235 257
235 256
235 124
235 134
235 390
235 3213
235 454
235 242
235 481
235 java.util.LinkedHashMap.get(java.lang.Object)
235 241
235 249
235 222
235 247
235 82
636 637
636 java.lang.Object.clinit()
636 java.lang.IllegalArgumentException()
636 java.lang.Throwable.clinit()
636 java.lang.IllegalArgumentException(java.lang.String)
636 508
1106 330
96 java.lang.Object.clinit()
96 java.lang.StringBuilder()
96 java.lang.Throwable.clinit()
96 java.lang.IllegalArgumentException(java.lang.String)
96 java.lang.StringBuilder.append(java.lang.String)
96 97
96 java.lang.StringBuilder.toString()
96 java.lang.StringBuilder.append(int)
3518 603
3518 java.lang.Object.clinit()
3518 org.joda.time.DateTimeFieldType.clinit()
3518 78
3499 java.lang.Object()
2181 936
org.joda.time.chrono.GJChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.GJChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.GJChronology.clinit() 259
org.joda.time.chrono.GJChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.GJChronology.clinit() org.joda.time.chrono.GJChronology.clinit()
603 java.lang.Object.clinit()
603 597
603 java.lang.IllegalArgumentException()
603 java.lang.Throwable.clinit()
603 624
603 java.lang.IllegalArgumentException(java.lang.String)
603 508
3756 304
3756 3756
3756 org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
3756 org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
3756 3296
3756 2016
3756 938
3756 org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
3756 java.lang.Object.clinit()
3756 386
3756 org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
3756 3239
3756 3295
3756 2258
3756 103
3756 3265
3756 498
3756 org.joda.time.DateTimeZone.clinit()
3756 757
3756 1068
303 216
303 java.lang.String.hashCode()
303 304
303 556
303 217
303 93
1201 java.lang.Object.clinit()
1201 java.util.LinkedHashMap.get(java.lang.Object)
1201 java.util.HashMap.clinit()
1201 java.util.HashMap.put(java.lang.Object,java.lang.Object)
1201 java.util.HashMap.get(java.lang.Object)
1201 1202
1201 3213
1201 java.util.HashMap(int)
302 java.lang.Object.clinit()
302 214
302 org.joda.time.chrono.ISOChronology.clinit()
3524 java.lang.Object.clinit()
3524 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit()
4 5
2900 1145
2682 java.lang.Object.clinit()
2682 org.joda.time.PeriodType.clinit()
2682 2405
996 366
665 505
665 java.lang.Object.clinit()
665 654
665 509
665 643
665 640
665 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1492 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
1492 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
1492 3437
1492 3352
1492 3304
1492 3306
1492 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
1492 org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
1492 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
1492 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
1492 3435
1492 286
1492 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
1492 1457
1492 1397
1492 364
1492 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1492 363
1492 1454
1492 3345
1492 365
1492 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
1492 3496
1492 3434
1492 1648
1492 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
1492 org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
1492 1149
1492 1430
1492 3349
1492 org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
1492 3302
1492 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
1492 org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
1492 1432
1492 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
1492 3341
1492 3346
1492 3438
1492 1455
1492 1593
1492 3305
1492 org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
1492 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
1492 934
1492 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
1492 org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
1492 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1492 932
1492 org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
1492 1150
1492 3436
1492 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
1492 1493
1492 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
1492 3514
1492 1399
1492 1398
1492 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
1492 362
1492 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
1492 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
1786 java.lang.String.clinit()
1786 java.lang.Object.clinit()
1786 java.util.Collections.reverse(java.util.List)
1786 java.util.TreeSet(java.util.Comparator)
1786 java.util.ArrayList.size()
1786 java.util.ArrayList.clinit()
1786 java.util.TreeSet.add(java.lang.Object)
1786 java.lang.String.equals(java.lang.Object)
1786 java.util.ArrayList.toArray(java.lang.Object[])
1786 java.util.TreeSet.clinit()
1786 java.util.ArrayList(java.util.Collection)
1786 java.util.Collections.clinit()
1786 java.lang.Object()
2002 org.joda.time.chrono.BaseChronology.dayOfMonth()
2002 417
2002 435
2002 455
2002 184
2002 373
2002 1281
2002 195
2002 430
2002 422
2002 1273
2002 200
2002 2120
2002 org.joda.time.chrono.BaseChronology.millisOfDay()
2002 org.joda.time.chrono.BaseChronology.year()
2002 379
2002 421
2002 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
2002 org.joda.time.chrono.BaseChronology.monthOfYear()
2002 org.joda.time.field.StrictDateTimeField.set(long,int)
2002 1275
2002 3439
2002 3513
2002 2119
2002 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
2002 201
2002 419
2002 420
2002 1277
2002 1379
1078 1079
3283 org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
3283 1139
3283 2931
3283 org.joda.time.field.DelegatedDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
3283 3282
3283 org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
3283 3283
3283 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
3283 3426
3766 java.lang.Object()
org.joda.time.DateTimeZone$LazyInit$1.toString() java.lang.Object.getClass()
org.joda.time.DateTimeZone$LazyInit$1.toString() java.lang.Class.getName()
1750 1931
1750 1751
1750 org.joda.time.chrono.IslamicChronology.getYearDifference(long,long)
1077 1076
1077 1083
1077 3400
1077 1078
1077 org.joda.time.field.DecoratedDurationField.add(long,long)
1077 1077
1077 org.joda.time.field.DelegatedDurationField.add(long,long)
1077 1087
1077 1085
1077 1063
1077 1164
1077 3385
110 47
269 java.lang.Object.clinit()
269 org.joda.time.chrono.GregorianChronology.clinit()
269 org.joda.time.chrono.BasicGJChronology.clinit()
269 org.joda.time.chrono.BasicChronology.clinit()
2444 3714
2444 2443
2444 2519
2444 2518
2444 2447
2444 org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)
2444 java.lang.StringBuffer.append(java.lang.String)
2444 2442
2444 2444
2444 2445
2444 2446
770 750
770 780
770 770
770 754
770 776
770 java.lang.StringBuilder.toString()
770 777
770 738
770 741
770 java.lang.Object.clinit()
770 org.joda.time.DateTimeZone$LazyInit$1.toString()
770 java.lang.StringBuilder()
770 739
770 java.lang.StringBuilder.append(char)
770 103
770 746
770 java.lang.StringBuilder.append(java.lang.String)
770 743
770 745
613 603
613 java.lang.Object.clinit()
613 147
613 org.joda.time.DateTimeFieldType.clinit()
2230 288
517 java.lang.Object.clinit()
517 518
517 org.joda.time.DateTimeZone$LazyInit.clinit()
885 java.lang.String.charAt(int)
885 java.lang.String.length()
165 java.lang.Object.clinit()
165 org.joda.time.chrono.GregorianChronology.clinit()
165 org.joda.time.chrono.BasicGJChronology.clinit()
165 org.joda.time.chrono.BasicChronology.clinit()
1226 1472
1226 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
1226 3396
1226 370
1226 895
1226 1112
1226 1226
1226 1350
1226 1458
1226 org.joda.time.field.DividedDateTimeField.add(long,int)
1226 900
1226 3347
1226 903
1226 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
1226 3268
3437 3406
2962 1133
250 179
601 java.lang.Object()
183 405
183 1203
183 82
568 org.joda.time.field.UnsupportedDurationField.isPrecise()
568 69
568 3382
568 1368
568 896
568 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
568 1061
568 2597
568 3237
568 1749
568 org.joda.time.field.DecoratedDurationField.add(long,int)
568 1062
568 1930
568 3402
568 1748
568 1823
568 1074
568 3397
568 1162
568 1699
568 1700
568 3386
568 67
568 824
568 3273
568 org.joda.time.field.DelegatedDurationField.add(long,int)
568 1111
568 org.joda.time.field.DelegatedDurationField.isPrecise()
568 2598
568 901
568 569
1309 java.lang.Object.clinit()
1309 java.lang.StringBuilder()
1309 1307
1309 java.lang.StringBuilder.append(java.lang.String)
1309 java.lang.StringBuilder.toString()
958 1347
958 3294
958 959
467 org.joda.time.chrono.CopticChronology.clinit()
467 128
467 134
467 313
467 359
467 410
467 127
467 448
467 3213
467 454
467 java.lang.Object.clinit()
467 241
467 479
467 151
467 103
467 104
467 247
467 244
467 org.joda.time.chrono.BasicChronology.clinit()
1749 1666
1448 1295
1448 3287
1448 336
1448 3288
1448 297
1448 3286
1448 337
1448 291
1448 1382
106 java.lang.Object.clinit()
106 org.joda.time.DateTimeFieldType.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Transition.withMillis(long) java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Transition.withMillis(long) 3730
3746 java.lang.ThreadLocal()
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) 1430
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) 3438
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) 3349
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) 3305
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
3435 3406
3581 java.lang.Object.clinit()
3581 3582
3581 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) 3364
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) 3348
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) 3383
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) 3404
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long) 1369
689 505
689 java.lang.Object.clinit()
689 681
689 509
689 org.joda.time.DateTimeFieldType.clinit()
689 149
689 595
689 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
382 383
382 1211
382 133
382 119
382 453
382 1004
382 436
382 1411
382 1212
382 3062
382 213
382 117
382 1388
382 2000
382 408
382 1435
382 141
382 409
382 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
2165 org.joda.time.chrono.BaseChronology.dayOfMonth()
2165 java.lang.Throwable.clinit()
2165 org.joda.time.chrono.BaseChronology.monthOfYear()
2165 java.lang.StringBuilder.append(int)
2165 java.lang.StringBuilder.toString()
2165 java.lang.IndexOutOfBoundsException(java.lang.String)
2165 java.lang.Object.clinit()
2165 195
2165 java.lang.StringBuilder()
2165 201
2165 200
2165 java.lang.StringBuilder.append(java.lang.String)
2165 org.joda.time.chrono.BaseChronology.year()
363 1149
363 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
363 895
363 1112
363 3341
363 903
363 1455
363 1593
363 934
363 286
363 1472
363 1457
363 org.joda.time.field.DividedDateTimeField.roundFloor(long)
363 370
363 364
363 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
363 932
363 1350
363 1150
363 1454
363 1458
363 org.joda.time.field.DividedDateTimeField.add(long,int)
363 3514
363 365
363 900
363 3496
363 3347
363 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
363 3268
793 303
793 791
793 1936
793 782
793 java.lang.Object.hashCode()
793 org.joda.time.chrono.GregorianChronology.hashCode()
793 1385
793 org.joda.time.chrono.BuddhistChronology.hashCode()
793 793
793 org.joda.time.chrono.IslamicChronology.hashCode()
793 org.joda.time.chrono.JulianChronology.hashCode()
793 org.joda.time.chrono.EthiopicChronology.hashCode()
793 103
793 788
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) 2151
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) 3380
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) 2158
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) java.lang.Object.equals(java.lang.Object)
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) 827
org.joda.time.field.DelegatedDurationField.equals(java.lang.Object) 1322
387 755
387 java.lang.Object.clinit()
387 304
387 744
387 522
387 751
387 103
387 747
387 387
387 org.joda.time.DateTimeZone.clinit()
387 226
387 207
3181 java.util.ArrayList.contains(java.lang.Object)
3181 java.util.ArrayList.add(java.lang.Object)
424 425
424 3269
734 735
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 363
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 3302
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 3345
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 3304
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 1399
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 1398
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 362
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 118
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) 3434
org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3297
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3096
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3433
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 736
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3278
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3098
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3097
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 3351
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 1656
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 118
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) 1439
org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
596 java.lang.Object.clinit()
596 597
596 java.lang.IllegalArgumentException()
596 java.lang.Throwable.clinit()
596 624
596 java.lang.IllegalArgumentException(java.lang.String)
596 508
2442 3714
2442 2443
2442 2518
2442 org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)
2442 2442
2470 2597
2470 569
2470 1807
2470 1073
2470 org.joda.time.base.BasePeriod$1.getValue(int)
535 128
535 134
535 org.joda.time.chrono.EthiopicChronology.clinit()
535 313
535 359
535 410
535 127
535 448
535 3213
535 454
535 java.lang.Object.clinit()
535 241
535 479
535 151
535 103
535 104
535 247
535 244
535 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 3511
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 1326
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 1462
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 1423
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 1442
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 1325
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 3423
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale) 118
3166 3160
3465 java.lang.Object.equals(java.lang.Object)
3465 java.lang.Enum.equals(java.lang.Object)
3465 3465
3120 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
3120 3281
3120 417
3120 435
3120 1404
3120 455
3120 3425
3120 1966
3120 3122
3120 430
3120 2164
3120 2645
3120 2636
3120 3255
3120 1143
3120 1347
3120 421
3120 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3120 1450
3120 382
3120 3439
3120 2270
3120 3513
3120 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3120 420
3120 1277
3120 1379
3120 1132
3120 org.joda.time.chrono.GJChronology.clinit()
3120 2050
3120 1208
3120 2647
3120 373
3120 1967
3120 1281
3120 732
3120 java.lang.Object.clinit()
3120 2045
3120 1333
3120 422
3120 1273
3120 2638
3120 2120
3120 379
3120 1215
3120 org.joda.time.field.StrictDateTimeField.set(long,int)
3120 1275
3120 2119
3120 3121
3120 419
3120 492
671 505
671 java.lang.Object.clinit()
671 509
671 669
671 643
671 656
671 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3748 java.lang.Object.clinit()
3748 java.util.ArrayList.clinit()
3748 java.util.HashMap.clinit()
3748 java.util.ArrayList()
3748 java.util.HashMap()
3748 java.lang.Object()
12 java.lang.Object()
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 1667
org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long) 118
2458 2684
2458 2459
2458 2706
2458 2729
2458 2641
2458 2752
2458 2661
2458 1808
538 474
1080 3399
1080 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1080 1375
1080 3350
1080 org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
1080 1080
1080 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
1080 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
1080 1084
1080 org.joda.time.field.DividedDateTimeField.add(long,long)
1080 1380
1080 org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
1080 1079
1080 1376
1080 1081
3520 java.lang.Object.clinit()
3520 145
3520 3494
3520 org.joda.time.DateTimeFieldType.clinit()
159 java.lang.Object.clinit()
159 org.joda.time.DateTimeFieldType.clinit()
142 java.lang.Object.clinit()
142 org.joda.time.DateTimeFieldType.clinit()
142 65
142 143
867 java.lang.Object.clinit()
867 831
867 org.joda.time.DateTimeUtils.clinit()
705 java.lang.UnsupportedOperationException(java.lang.String)
705 java.lang.Object.clinit()
705 697
705 512
705 java.lang.Throwable.clinit()
705 510
org.joda.time.field.DelegatedDateTimeField.toString() java.lang.Object.clinit()
org.joda.time.field.DelegatedDateTimeField.toString() java.lang.StringBuilder()
org.joda.time.field.DelegatedDateTimeField.toString() java.lang.StringBuilder.append(char)
org.joda.time.field.DelegatedDateTimeField.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.field.DelegatedDateTimeField.toString() java.lang.StringBuilder.toString()
org.joda.time.field.DelegatedDateTimeField.toString() org.joda.time.field.DelegatedDateTimeField.getName()
666 java.lang.String.length()
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 1366
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 3401
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 3274
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 3275
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 1666
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 1367
org.joda.time.field.DividedDateTimeField.getDifference(long,long) 118
org.joda.time.field.DividedDateTimeField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
1376 1076
1376 128
1376 3400
1376 1078
1376 org.joda.time.field.DelegatedDurationField.add(long,long)
1376 134
1376 359
1376 1087
1376 1085
1376 1164
1376 448
1376 127
1376 3385
1376 454
1376 241
1376 479
1376 org.joda.time.field.DecoratedDurationField.add(long,long)
1376 1077
1376 247
1376 244
2163 java.lang.Object.clinit()
2163 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3268 1472
3268 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
3268 3396
3268 370
3268 895
3268 1112
3268 1226
3268 1350
3268 1458
3268 org.joda.time.field.DividedDateTimeField.add(long,int)
3268 900
3268 3347
3268 903
3268 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
3268 3268
3290 351
3290 3287
3290 3286
3290 377
3290 378
2403 java.lang.Object.clinit()
2403 org.joda.time.PeriodType.clinit()
2403 567
2403 57
2403 org.joda.time.DurationFieldType.clinit()
2736 java.lang.String.clinit()
2736 java.lang.Object.clinit()
2736 java.lang.StringBuilder()
2736 java.lang.String.valueOf(int)
2736 java.lang.StringBuilder.append(java.lang.String)
2736 java.lang.StringBuilder.toString()
2736 1808
58 java.lang.Object.clinit()
58 org.joda.time.DurationFieldType.clinit()
org.joda.time.chrono.BaseChronology.minutes() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.minutes() 48
org.joda.time.chrono.BaseChronology.minutes() 162
org.joda.time.chrono.BaseChronology.minutes() org.joda.time.DurationFieldType.clinit()
3071 1143
3071 3294
3071 2050
3071 1215
3071 org.joda.time.DateTimeFieldType.clinit()
3071 959
3071 1208
3071 1966
3071 2270
3071 2647
3071 1967
3071 1348
3071 java.lang.Object.clinit()
3071 2045
3071 3293
3071 2164
3071 2645
3071 2638
3071 106
3071 2636
3071 1132
3734 java.io.ObjectOutputStream.writeLong(long)
3734 java.io.ObjectOutputStream$BlockDataOutputStream.writeInt(int)
3734 java.io.ObjectOutputStream$BlockDataOutputStream.writeLong(long)
3734 java.io.ObjectOutputStream.writeByte(int)
3734 java.io.DataOutputStream.writeByte(int)
3734 java.io.DataOutputStream.writeLong(long)
3734 java.io.DataOutputStream.writeInt(int)
3734 java.io.ObjectOutputStream.writeInt(int)
3734 java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(int)
org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long) 1381
org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long) 991
org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long) 376
org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long) 3290
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 3233
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 1415
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 1414
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 3495
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 3441
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) 3231
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
9 10
2951 java.lang.Object.clinit()
2951 2952
2951 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
361 356
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3297
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3096
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3433
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 736
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3278
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3098
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3097
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 3351
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 1656
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 118
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) 1439
org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
1467 java.lang.Object.clinit()
1467 1242
1467 org.joda.time.chrono.GJLocaleSymbols.clinit()
1467 1468
1315 342
1315 3509
1315 1440
1315 1417
1315 960
1315 429
1315 997
1315 371
1315 1316
1315 995
1315 3279
1315 338
1315 996
1315 1419
1315 1103
1315 457
1315 992
1315 1104
1315 994
1315 991
1315 384
1315 3240
1315 334
1315 3259
1315 290
1315 993
1315 1460
3140 java.lang.Object.clinit()
3140 java.util.HashMap.clinit()
3140 java.util.HashMap(int)
3233 java.lang.Object.clinit()
3233 3234
3233 435
3233 1242
3233 org.joda.time.chrono.GJLocaleSymbols.clinit()
8 java.io.File.clinit()
8 java.lang.Throwable.clinit()
8 java.lang.Class.forName(java.lang.String)
8 org.joda.time.tz.UTCProvider.clinit()
8 9
8 java.lang.System.getProperty(java.lang.String)
8 javax.xml.transform.TransformerException.printStackTrace()
8 java.lang.System.clinit()
8 java.lang.Class.newInstance()
8 java.lang.Throwable.printStackTrace()
8 java.lang.Object.clinit()
8 java.io.File(java.lang.String)
8 3155
8 java.lang.RuntimeException(java.lang.Throwable)
8 org.joda.time.DateTimeZone.clinit()
8 java.lang.Class.clinit()
8 3158
8 17
255 176
org.joda.time.tz.ZoneInfoLogger.clinit() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoLogger.clinit() java.lang.ThreadLocal.clinit()
org.joda.time.tz.ZoneInfoLogger.clinit() org.joda.time.tz.ZoneInfoLogger.clinit()
org.joda.time.tz.ZoneInfoLogger.clinit() 3746
595 java.lang.Object.clinit()
595 org.joda.time.DateTimeFieldType.clinit()
595 106
595 596
543 java.lang.Object.clinit()
543 544
543 org.joda.time.chrono.IslamicChronology.clinit()
543 org.joda.time.chrono.BasicChronology.clinit()
44 java.lang.Object()
1747 3397
1747 1162
1747 3382
1747 896
1747 1368
1747 1700
1747 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
1747 3386
1747 824
1747 1061
1747 3273
1747 org.joda.time.field.DelegatedDurationField.add(long,int)
1747 2597
1747 1111
1747 2598
1747 1749
1747 org.joda.time.field.DecoratedDurationField.add(long,int)
1747 1062
1747 901
1747 1930
1747 569
1747 3402
1747 1748
1747 1074
3271 java.lang.Object.clinit()
3271 3270
3271 org.joda.time.chrono.GJChronology.clinit()
2999 2023
2999 3000
2999 java.lang.Object.clinit()
2999 147
2999 java.util.ArrayList.clinit()
2999 org.joda.time.DateTimeFieldType.clinit()
2999 152
2999 java.util.ArrayList()
2999 java.util.ArrayList.add(java.lang.Object)
1719 java.lang.Object.clinit()
1719 org.joda.time.PeriodType.clinit()
1719 1720
2016 java.lang.Object.clinit()
2016 org.joda.time.chrono.CopticChronology.clinit()
2016 747
2016 498
2016 org.joda.time.DateTimeZone.clinit()
2016 org.joda.time.chrono.BasicChronology.clinit()
2016 463
1087 java.lang.Object.clinit()
1087 897
2303 java.lang.Object.clinit()
2303 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
465 466
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder.append(boolean)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder.append(char)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.toString() java.lang.StringBuilder.append(int)
org.joda.time.chrono.BasicChronology.clinit() 51
org.joda.time.chrono.BasicChronology.clinit() 84
org.joda.time.chrono.BasicChronology.clinit() 73
org.joda.time.chrono.BasicChronology.clinit() 48
org.joda.time.chrono.BasicChronology.clinit() 62
org.joda.time.chrono.BasicChronology.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BasicChronology.clinit() 79
org.joda.time.chrono.BasicChronology.clinit() 49
org.joda.time.chrono.BasicChronology.clinit() 77
org.joda.time.chrono.BasicChronology.clinit() 76
org.joda.time.chrono.BasicChronology.clinit() 78
org.joda.time.chrono.BasicChronology.clinit() 74
org.joda.time.chrono.BasicChronology.clinit() 50
org.joda.time.chrono.BasicChronology.clinit() 72
org.joda.time.chrono.BasicChronology.clinit() org.joda.time.field.MillisDurationField.clinit()
org.joda.time.chrono.BasicChronology.clinit() org.joda.time.DurationFieldType.clinit()
org.joda.time.chrono.BasicChronology.clinit() 75
org.joda.time.chrono.BasicChronology.clinit() 63
org.joda.time.chrono.BasicChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.BasicChronology.clinit() 85
org.joda.time.chrono.BasicChronology.clinit() 52
org.joda.time.chrono.BasicChronology.clinit() 45
org.joda.time.chrono.BasicChronology.clinit() 80
org.joda.time.chrono.BasicChronology.clinit() 46
org.joda.time.chrono.BasicChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
17 java.util.Collections$SynchronizedCollection.size()
17 20
17 java.util.HashMap$KeySet.size()
17 java.util.HashSet.size()
17 java.util.Collections$UnmodifiableCollection.size()
17 java.util.WeakHashMap$EntrySet.size()
17 java.util.Collections$UnmodifiableCollection.contains(java.lang.Object)
17 java.util.Collections$CheckedMap$CheckedEntrySet.size()
17 java.util.RegularEnumSet.contains(java.lang.Object)
17 451
17 sun.util.PreHashedMap$1.size()
17 java.util.concurrent.ConcurrentHashMap$KeySet.contains(java.lang.Object)
17 3156
17 java.util.WeakHashMap$KeySet.contains(java.lang.Object)
17 java.util.IdentityHashMap$KeySet.contains(java.lang.Object)
17 java.util.HashMap$EntrySet.size()
17 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.contains(java.lang.Object)
17 java.lang.ProcessEnvironment$StringKeySet.contains(java.lang.Object)
17 javax.security.auth.Subject$SecureSet.size()
17 java.util.JumboEnumSet.size()
17 3157
17 java.util.Hashtable$EntrySet.size()
17 javax.security.auth.Subject$ClassSet.size()
17 java.util.Hashtable$EntrySet.contains(java.lang.Object)
17 java.util.AbstractMap$1.size()
17 java.util.TreeMap$KeySet.contains(java.lang.Object)
17 sun.nio.ch.Util$2.size()
17 java.util.Collections$EmptySet.contains(java.lang.Object)
17 java.util.Collections$EmptySet.size()
17 java.util.TreeSet.size()
17 java.util.concurrent.ConcurrentHashMap$EntrySet.contains(java.lang.Object)
17 sun.nio.ch.Util$2.contains(java.lang.Object)
17 sun.util.PreHashedMap$2.size()
17 java.util.TreeMap$NavigableSubMap$EntrySetView.size()
17 790
17 java.util.Collections$SingletonSet.size()
17 java.util.Collections$SingletonSet.contains(java.lang.Object)
17 java.util.Hashtable$KeySet.size()
17 java.util.TreeMap$EntrySet.contains(java.lang.Object)
17 java.util.Collections$SynchronizedCollection.contains(java.lang.Object)
17 java.util.JumboEnumSet.contains(java.lang.Object)
17 java.util.TreeSet.contains(java.lang.Object)
17 java.util.TreeMap$EntrySet.size()
17 java.util.TreeMap$KeySet.size()
17 java.util.IdentityHashMap$EntrySet.contains(java.lang.Object)
17 java.util.Collections$SetFromMap.size()
17 java.lang.ProcessEnvironment$StringEntrySet.contains(java.lang.Object)
17 java.util.IdentityHashMap$EntrySet.size()
17 java.util.RegularEnumSet.size()
17 java.util.AbstractMap$1.contains(java.lang.Object)
17 java.lang.Object.clinit()
17 1040
17 java.util.Collections$CheckedCollection.contains(java.lang.Object)
17 java.util.Collections$SetFromMap.contains(java.lang.Object)
17 java.util.TreeMap$NavigableSubMap$EntrySetView.contains(java.lang.Object)
17 java.lang.ProcessEnvironment$StringEntrySet.size()
17 java.util.WeakHashMap$EntrySet.contains(java.lang.Object)
17 19
17 java.lang.Throwable.clinit()
17 18
17 java.util.concurrent.ConcurrentHashMap$KeySet.size()
17 java.lang.IllegalArgumentException(java.lang.String)
17 java.util.Collections$CheckedCollection.size()
17 java.util.Hashtable$KeySet.contains(java.lang.Object)
17 java.util.WeakHashMap$KeySet.size()
17 java.util.Collections$CheckedMap$CheckedEntrySet.contains(java.lang.Object)
17 java.util.HashMap$KeySet.contains(java.lang.Object)
17 3126
17 sun.misc.SoftCache$EntrySet.size()
17 java.util.concurrent.ConcurrentHashMap$EntrySet.size()
17 java.util.AbstractCollection.contains(java.lang.Object)
17 org.joda.time.DateTimeZone.clinit()
17 java.util.IdentityHashMap$KeySet.size()
17 javax.security.auth.Subject$SecureSet.contains(java.lang.Object)
17 java.util.HashSet.contains(java.lang.Object)
17 java.util.HashMap$EntrySet.contains(java.lang.Object)
17 java.lang.ProcessEnvironment$StringKeySet.size()
org.joda.time.convert.DateConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.DateConverter.clinit() 844
org.joda.time.convert.DateConverter.clinit() org.joda.time.convert.DateConverter.clinit()
1373 3364
1373 org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
1373 org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
1373 128
1373 3348
1373 134
1373 3383
1373 org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
1373 359
1373 org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
1373 448
1373 127
1373 1369
1373 454
1373 241
1373 479
1373 3404
1373 247
1373 org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
1373 244
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 1472
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 3396
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 370
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 895
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 1112
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 1226
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 1350
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 1458
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) org.joda.time.field.DividedDateTimeField.add(long,int)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 900
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 3347
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 903
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 3268
org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int) 118
org.joda.time.YearMonth.clinit() java.lang.Object.clinit()
org.joda.time.YearMonth.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.YearMonth.clinit() org.joda.time.YearMonth.clinit()
org.joda.time.YearMonth.clinit() 106
org.joda.time.YearMonth.clinit() 152
3509 java.lang.Object.clinit()
3509 3510
3509 1242
3509 org.joda.time.chrono.GJLocaleSymbols.clinit()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 1430
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 3438
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 3349
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 3305
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
1805 2625
1805 570
1805 1820
1805 1719
1805 1835
1805 1807
1805 1848
1805 1073
1805 2682
1805 org.joda.time.base.BasePeriod$1.getValue(int)
1805 2659
1805 1806
1805 1808
368 294
368 369
3293 3287
1197 588
1593 1457
1593 1149
1593 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1593 364
1593 932
1593 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1593 1150
1593 1454
1593 3341
1593 java.lang.Object.clinit()
1593 365
1593 3514
1593 423
1593 3496
1593 1455
1593 1593
1593 424
1593 934
1593 3435
1593 286
1593 1648
1593 org.joda.time.chrono.GJChronology.clinit()
3582 java.lang.Object.clinit()
3582 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3004 510
3004 3005
3066 2045
3066 java.lang.Object.clinit()
3066 795
3066 java.lang.StringBuilder.append(char)
3066 java.lang.StringBuilder.append(java.lang.String)
3066 java.lang.StringBuilder(int)
3066 java.lang.StringBuilder.toString()
3066 java.lang.StringBuilder.append(int)
3755 java.lang.Object.clinit()
3755 214
3755 org.joda.time.chrono.ISOChronology.clinit()
3755 757
3778 sun.util.PreHashedMap$1$1.next()
3778 javax.security.auth.Subject$SecureSet$1.next()
3778 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
3778 java.util.Collections$SingletonList.iterator()
3778 sun.net.www.MessageHeader$HeaderIterator.next()
3778 sun.util.PreHashedMap$2$1.next()
3778 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
3778 java.util.Hashtable$EntrySet.iterator()
3778 sun.net.www.HeaderParser$ParserIterator.hasNext()
3778 java.util.concurrent.ArrayBlockingQueue$Itr.next()
3778 java.util.WeakHashMap.size()
3778 sun.util.PreHashedMap$2$1$1.getValue()
3778 java.util.AbstractSequentialList.iterator()
3778 java.util.JumboEnumSet$EnumSetIterator.next()
3778 java.util.concurrent.ConcurrentHashMap.size()
3778 java.util.LinkedList$ListItr.hasNext()
3778 java.util.ServiceLoader$LazyIterator.next()
3778 java.util.Hashtable$KeySet.iterator()
3778 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
3778 sun.misc.SoftCache.size()
3778 java.lang.ProcessEnvironment$StringEnvironment.entrySet()
3778 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
3778 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
3778 sun.util.PreHashedMap$2.iterator()
3778 java.util.LinkedList$DescendingIterator.hasNext()
3778 java.util.JumboEnumSet$EnumSetIterator.hasNext()
3778 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator()
3778 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
3778 java.util.TreeMap.values()
3778 java.util.LinkedList$DescendingIterator.next()
3778 java.util.JumboEnumSet.iterator()
3778 sun.util.PreHashedMap$1.iterator()
3778 java.util.HashMap$Values.iterator()
3778 sun.util.PreHashedMap$2$1.hasNext()
3778 java.util.TreeMap.clinit()
3778 java.util.concurrent.SynchronousQueue.iterator()
3778 java.util.AbstractMap$SimpleImmutableEntry.getValue()
3778 java.util.RegularEnumSet.iterator()
3778 java.util.WeakHashMap$HashIterator.hasNext()
3778 java.util.IdentityHashMap.entrySet()
3778 java.util.Collections$UnmodifiableMap.entrySet()
3778 java.util.LinkedHashMap$EntryIterator.next()
3778 java.util.IdentityHashMap$KeyIterator.next()
3778 java.util.IdentityHashMap$ValueIterator.next()
3778 java.util.ArrayList$SubList.iterator()
3778 java.util.AbstractMap$1$1.hasNext()
3778 java.util.jar.Attributes.entrySet()
3778 java.lang.ProcessEnvironment$StringEntry.getKey()
3778 java.util.AbstractMap$2.iterator()
3778 java.util.concurrent.LinkedBlockingDeque.iterator()
3778 java.util.ArrayDeque$DescendingIterator.hasNext()
3778 java.util.Hashtable$Enumerator.next()
3778 java.util.concurrent.ConcurrentLinkedQueue.iterator()
3778 java.util.HashMap$EntryIterator.next()
3778 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
3778 javax.security.auth.Subject$SecureSet$1.hasNext()
3778 java.util.Hashtable$ValueCollection.iterator()
3778 sun.misc.SoftCache$Entry.getKey()
3778 java.lang.ProcessEnvironment$StringKeySet.iterator()
3778 java.util.Collections$UnmodifiableList$1.next()
3778 java.util.Collections$SynchronizedMap.entrySet()
3778 java.util.jar.Attributes.size()
3778 java.util.AbstractMap.size()
3778 sun.nio.cs.FastCharsetProvider$1.next()
3778 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
3778 java.util.Collections$CheckedList$1.hasNext()
3778 java.util.Vector$Itr.next()
3778 sun.util.PreHashedMap$2$1$1.getKey()
3778 java.util.concurrent.ConcurrentHashMap$Values.iterator()
3778 java.util.ArrayList$SubList$1.next()
3778 java.util.Collections$UnmodifiableCollection.iterator()
3778 java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getKey()
3778 java.util.IdentityHashMap$Values.iterator()
3778 java.util.Collections$EmptySet.iterator()
3778 java.util.Collections$SingletonMap.entrySet()
3778 java.security.Provider.entrySet()
3778 java.util.WeakHashMap$Entry.getValue()
3778 java.util.HashMap$ValueIterator.next()
3778 sun.misc.SoftCache$EntrySet$1.hasNext()
3778 java.util.ArrayList$SubList$1.hasNext()
3778 java.util.HashMap$Entry.getKey()
3778 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.iterator()
3778 java.util.HashMap.get(java.lang.Object)
3778 java.util.TreeMap$DescendingSubMap.entrySet()
3778 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
3778 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
3778 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
3778 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
3778 java.util.Collections$EmptyMap.size()
3778 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
3778 java.util.TreeMap()
3778 javax.security.auth.Subject$SecureSet.iterator()
3778 java.util.Hashtable.size()
3778 sun.nio.ch.Util$2.iterator()
3778 sun.net.www.HeaderParser$ParserIterator.next()
3778 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
3778 java.util.Collections$AsLIFOQueue.iterator()
3778 java.util.concurrent.LinkedBlockingQueue.iterator()
3778 sun.misc.SoftCache$EntrySet.iterator()
3778 sun.nio.cs.FastCharsetProvider$1.hasNext()
3778 sun.nio.fs.AbstractPath$1.next()
3778 java.util.HashMap.size()
3778 java.util.LinkedList$ListItr.next()
3778 java.util.Collections$EmptyIterator.hasNext()
3778 java.util.Collections$EmptyMap.entrySet()
3778 java.util.Collections$CheckedMap$CheckedEntrySet$CheckedEntry.getValue()
3778 java.util.Hashtable$Entry.getValue()
3778 java.util.Scanner.next()
3778 java.util.Collections$CheckedCollection$1.hasNext()
3778 sun.misc.SoftCache.entrySet()
3778 java.util.ArrayDeque$DescendingIterator.next()
3778 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
3778 java.util.HashMap.containsKey(java.lang.Object)
3778 java.util.Collections$SynchronizedMap.size()
3778 java.io.DataOutputStream.writeShort(int)
3778 java.util.LinkedHashMap$KeyIterator.next()
3778 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
3778 java.util.Collections$CheckedList$1.next()
3778 java.util.ArrayList.iterator()
3778 java.util.Collections$EmptyList.iterator()
3778 java.util.Collections$1.next()
3778 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
3778 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
3778 java.util.ArrayDeque$DeqIterator.hasNext()
3778 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
3778 java.util.concurrent.LinkedBlockingQueue$Itr.next()
3778 java.util.TreeMap$NavigableSubMap.size()
3778 java.lang.ProcessEnvironment$StringEntrySet$1.next()
3778 sun.misc.SoftCache$Entry.getValue()
3778 sun.util.PreHashedMap$1$1.hasNext()
3778 java.util.WeakHashMap$Entry.getKey()
3778 java.util.TreeMap$DescendingSubMap$DescendingEntrySetView.iterator()
3778 java.util.TreeMap$Values.iterator()
3778 java.util.AbstractMap$1.iterator()
3778 java.lang.ProcessEnvironment$StringValues$1.next()
3778 java.util.WeakHashMap$EntryIterator.next()
3778 java.util.HashMap$EntrySet.iterator()
3778 java.util.concurrent.ArrayBlockingQueue.iterator()
3778 java.util.WeakHashMap.entrySet()
3778 java.util.concurrent.ConcurrentHashMap.entrySet()
3778 java.util.AbstractMap$1$1.next()
3778 java.util.Collections$UnmodifiableMap.size()
3778 java.util.Hashtable$Entry.getKey()
3778 java.util.WeakHashMap$Values.iterator()
3778 java.util.IdentityHashMap$KeySet.iterator()
3778 java.lang.ProcessEnvironment$StringEntrySet$2.getValue()
3778 java.util.AbstractMap$SimpleImmutableEntry.getKey()
3778 java.lang.ProcessEnvironment$StringKeySet$1.next()
3778 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3778 java.util.TreeMap$DescendingKeyIterator.next()
3778 java.util.concurrent.ConcurrentHashMap$EntrySet.iterator()
3778 java.util.TreeMap$PrivateEntryIterator.hasNext()
3778 sun.misc.Service$LazyIterator.next()
3778 java.util.HashMap.clinit()
3778 java.util.Scanner.hasNext()
3778 java.util.WeakHashMap$ValueIterator.next()
3778 java.util.IdentityHashMap$EntryIterator.next()
3778 java.util.concurrent.ConcurrentHashMap$KeySet.iterator()
3778 java.lang.Short.valueOf(short)
3778 java.util.Collections$CheckedCollection.iterator()
3778 java.text.AttributeEntry.getValue()
3778 java.util.HashSet.iterator()
3778 java.util.Hashtable$Enumerator.hasNext()
3778 java.util.RegularEnumSet$EnumSetIterator.next()
3778 java.text.AttributedString$AttributeMap.entrySet()
3778 java.util.WeakHashMap$KeyIterator.next()
3778 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
3778 sun.security.jca.ProviderList$ServiceList.iterator()
3778 java.lang.Short.shortValue()
3778 java.util.SubList$1.next()
3778 java.util.IdentityHashMap$EntryIterator$Entry.getKey()
3778 java.util.AbstractList.iterator()
3778 java.util.Collections$SynchronizedCollection.iterator()
3778 java.util.Collections$EmptyIterator.next()
3778 java.util.LinkedHashMap$ValueIterator.next()
3778 java.util.TreeMap.size()
3778 java.util.ServiceLoader$1.hasNext()
3778 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
3778 java.util.TreeMap$ValueIterator.next()
3778 36
3778 java.util.AbstractMap$2$1.hasNext()
3778 java.util.HashMap(int)
3778 java.lang.Short.clinit()
3778 sun.nio.fs.AbstractPath$1.hasNext()
3778 java.lang.ProcessEnvironment$StringValues$1.hasNext()
3778 java.util.Collections$CheckedMap$CheckedEntrySet.iterator()
3778 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getValue()
3778 java.util.WeakHashMap$KeySet.iterator()
3778 java.util.Collections$SetFromMap.iterator()
3778 java.util.SubList.iterator()
3778 java.util.TreeMap$AscendingSubMap.entrySet()
3778 java.util.TreeMap$EntryIterator.next()
3778 java.util.IdentityHashMap$EntryIterator$Entry.getValue()
3778 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry.getKey()
3778 java.lang.ProcessEnvironment$StringEntry.getValue()
3778 java.util.Hashtable.entrySet()
3778 javax.security.auth.Subject$ClassSet.iterator()
3778 java.util.LinkedHashMap.get(java.lang.Object)
3778 java.util.Collections$UnmodifiableList$1.hasNext()
3778 java.util.IdentityHashMap$EntrySet.iterator()
3778 java.util.ArrayList$Itr.hasNext()
3778 java.util.Collections$SingletonMap.size()
3778 java.nio.charset.Charset$1.hasNext()
3778 java.util.Collections$CheckedMap.entrySet()
3778 java.util.Collections$UnmodifiableCollection$1.next()
3778 java.text.AttributeEntry.getKey()
3778 java.util.TreeMap.entrySet()
3778 java.lang.ProcessEnvironment$StringEnvironment.size()
3778 java.util.TreeMap$KeyIterator.next()
3778 java.util.SubList$1.hasNext()
3778 java.lang.InternalError(java.lang.String)
3778 java.util.Collections$CheckedMap.size()
3778 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
3778 java.util.Collections$UnmodifiableCollection$1.hasNext()
3778 java.util.TreeMap$SubMap.entrySet()
3778 java.util.HashMap$Entry.getValue()
3778 java.util.TreeSet.iterator()
3778 java.util.RegularEnumSet$EnumSetIterator.hasNext()
3778 java.util.HashMap$KeyIterator.next()
3778 sun.misc.SoftCache$EntrySet$1.next()
3778 sun.security.jca.ProviderList$ServiceList$1.hasNext()
3778 java.util.TreeMap$Entry.getKey()
3778 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
3778 java.util.Collections$1.hasNext()
3778 java.util.ArrayList$Itr.next()
3778 java.lang.ProcessEnvironment$StringValues.iterator()
3778 java.io.DataOutputStream.writeUTF(java.lang.String)
3778 java.util.AbstractMap$2$1.next()
3778 java.util.ServiceLoader$1.next()
3778 java.lang.ProcessEnvironment$StringEntrySet.iterator()
3778 java.util.HashMap.entrySet()
3778 sun.security.jca.ProviderList$ServiceList$1.next()
3778 java.util.IdentityHashMap.size()
3778 java.util.ServiceLoader$LazyIterator.hasNext()
3778 java.util.Vector$Itr.hasNext()
3778 java.util.ArrayDeque$DeqIterator.next()
3778 java.util.Collections$SingletonSet.iterator()
3778 java.lang.Object.clinit()
3778 java.util.AbstractMap$SimpleEntry.getKey()
3778 java.lang.ProcessEnvironment$StringEntrySet$2.getKey()
3778 java.util.TreeMap$AscendingSubMap$AscendingEntrySetView.iterator()
3778 java.util.Collections$CheckedCollection$1.next()
3778 java.util.AbstractList$Itr.next()
3778 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
3778 java.util.TreeMap$KeySet.iterator()
3778 java.util.TreeMap$EntrySet.iterator()
3778 sun.misc.Service$LazyIterator.hasNext()
3778 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
3778 java.nio.charset.Charset$1.next()
3778 sun.net.www.MessageHeader$HeaderIterator.hasNext()
3778 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
3778 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
3778 java.lang.Throwable.clinit()
3778 sun.util.PreHashedMap.entrySet()
3778 java.util.HashMap$KeySet.iterator()
3778 java.util.WeakHashMap$EntrySet.iterator()
3778 java.util.AbstractMap$SimpleEntry.getValue()
3778 java.util.ArrayDeque.iterator()
3778 java.util.Vector.iterator()
3778 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
3778 java.util.TreeMap$Entry.getValue()
3778 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3778 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
3778 java.util.AbstractList$Itr.hasNext()
3778 java.util.HashMap$HashIterator.hasNext()
3750 java.io.PrintStream.println(java.lang.String)
3750 java.security.Provider.put(java.lang.Object,java.lang.Object)
3750 java.lang.Character.isWhitespace(char)
3750 3757
3750 java.util.ArrayList.add(java.lang.Object)
3750 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3750 sun.misc.SoftCache.get(java.lang.Object)
3750 java.lang.System.clinit()
3750 java.lang.String.equals(java.lang.Object)
3750 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3750 java.util.StringTokenizer.hasMoreTokens()
3750 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3750 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
3750 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3750 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3750 3763
3750 java.util.Collections$CheckedMap.get(java.lang.Object)
3750 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
3750 java.lang.String.indexOf(int)
3750 java.util.HashMap.get(java.lang.Object)
3750 java.lang.StringBuilder.toString()
3750 java.util.StringTokenizer.nextToken()
3750 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
3750 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
3750 java.util.Hashtable.get(java.lang.Object)
3750 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
3750 java.lang.String.startsWith(java.lang.String)
3750 java.lang.StringBuilder.append(java.lang.String)
3750 java.lang.String.trim()
3750 3767
3750 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
3750 sun.util.PreHashedMap.get(java.lang.Object)
3750 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3750 java.lang.String.charAt(int)
3750 java.lang.Character.clinit()
3750 java.lang.Object.clinit()
3750 java.io.BufferedReader.readLine()
3750 java.util.AbstractMap.get(java.lang.Object)
3750 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
3750 java.lang.StringBuilder()
3750 java.util.WeakHashMap.get(java.lang.Object)
3750 java.util.AbstractList.add(java.lang.Object)
3750 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
3750 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
3750 java.util.StringTokenizer.countTokens()
3750 java.util.TreeMap.get(java.lang.Object)
3750 java.util.Collections$SingletonMap.get(java.lang.Object)
3750 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
3750 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
3750 java.util.jar.Attributes.get(java.lang.Object)
3750 3758
3750 java.lang.Throwable.clinit()
3750 java.util.IdentityHashMap.get(java.lang.Object)
3750 java.lang.IllegalArgumentException(java.lang.String)
3750 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
3750 3751
3750 java.util.LinkedList.add(java.lang.Object)
3750 java.security.Provider.get(java.lang.Object)
3750 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
3750 java.util.StringTokenizer(java.lang.String,java.lang.String)
3750 java.lang.String.equalsIgnoreCase(java.lang.String)
3750 java.util.LinkedHashMap.get(java.lang.Object)
3750 java.util.Collections$CheckedCollection.add(java.lang.Object)
3750 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
3750 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3750 java.util.Vector.add(java.lang.Object)
3750 java.lang.String.substring(int,int)
3750 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3750 java.lang.String.length()
3750 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
3750 java.util.Collections$EmptyMap.get(java.lang.Object)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) 1136
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) 3431
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) 3119
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) 2925
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[]) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
1320 3259
1320 3509
1320 1440
1320 1316
1320 1417
1320 3279
1320 1460
1320 1419
313 314
org.joda.time.chrono.BaseChronology.era() 161
org.joda.time.chrono.BaseChronology.era() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.era() 125
org.joda.time.chrono.BaseChronology.era() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.era() 143
org.joda.time.chrono.BaseChronology.era() 1201
org.joda.time.chrono.BaseChronology.halfdayOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.halfdayOfDay() 86
org.joda.time.chrono.BaseChronology.halfdayOfDay() org.joda.time.chrono.BaseChronology.halfdays()
org.joda.time.chrono.BaseChronology.halfdayOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.halfdayOfDay() 174
org.joda.time.chrono.BaseChronology.halfdayOfDay() 1201
652 505
652 java.lang.Object.clinit()
652 628
652 509
652 643
652 632
652 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
652 630
272 273
2119 379
2119 421
2119 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
2119 417
2119 435
2119 1275
2119 org.joda.time.field.StrictDateTimeField.set(long,int)
2119 455
2119 3439
2119 3513
2119 373
2119 2119
2119 1281
2119 430
2119 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
2119 1058
2119 422
2119 419
2119 1273
2119 420
2119 2120
2119 1277
2119 118
2119 1379
2229 289
3514 1149
3514 1457
3514 org.joda.time.field.DividedDateTimeField.roundFloor(long)
3514 364
3514 932
3514 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
3514 1150
3514 1454
3514 3341
3514 365
3514 3514
3514 3496
3514 1455
3514 1593
3514 934
3514 118
3514 3435
3514 286
3514 1648
3740 java.lang.Throwable.clinit()
3740 java.lang.Integer.clinit()
3740 java.lang.String.charAt(int)
3740 java.lang.IllegalArgumentException(java.lang.String)
3740 3743
3740 java.lang.String.indexOf(java.lang.String)
3740 java.lang.Integer.parseInt(java.lang.String)
3740 java.util.StringTokenizer.nextToken()
3740 java.lang.Object.clinit()
3740 3754
3740 1257
3740 2193
3740 java.lang.String.equals(java.lang.Object)
3740 org.joda.time.LocalDate.clinit()
3740 1256
3740 1253
3740 java.lang.String.substring(int)
3740 java.util.StringTokenizer.hasMoreTokens()
3740 java.lang.String.substring(int,int)
3740 java.lang.String.startsWith(java.lang.String)
3740 3742
3740 java.lang.String.length()
3740 2187
3740 3741
3740 java.lang.Object()
3759 java.lang.Object.clinit()
3759 java.lang.Boolean.booleanValue()
3759 org.joda.time.tz.ZoneInfoLogger.clinit()
3759 java.lang.ThreadLocal.get()
3254 1343
3254 3303
3254 1058
3254 3254
3254 1408
3254 org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(long)
3254 org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getMinimumValue(long)
3254 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(long)
3254 118
3254 3429
561 562
40 41
26 java.lang.Object.clinit()
26 25
26 27
26 31
26 org.joda.time.DateTimeZone.clinit()
2311 789
2311 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
2311 1173
2311 792
2311 1906
2311 java.lang.Object.equals(java.lang.Object)
2311 781
2311 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
2311 2272
2311 2018
2311 584
2311 988
2311 787
2311 1107
273 java.lang.Object()
2860 3259
2860 3509
2860 1440
2860 1316
2860 1417
2860 3279
2860 1460
2860 1419
1138 org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
1138 1139
1138 2931
1138 3282
1138 org.joda.time.chrono.BasicDayOfYearDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
1138 3283
1138 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(org.joda.time.ReadablePartial)
669 505
669 java.lang.Object.clinit()
669 665
669 509
669 643
669 641
669 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2372 java.lang.Object.clinit()
2372 java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])
2372 java.util.Arrays.clinit()
org.joda.time.convert.ReadableInstantConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.ReadableInstantConverter.clinit() org.joda.time.convert.ReadableInstantConverter.clinit()
org.joda.time.convert.ReadableInstantConverter.clinit() 837
1178 1103
1178 457
1178 org.joda.time.chrono.BaseChronology.weekyear()
1178 992
1178 330
1178 342
1178 1104
1178 994
1178 991
1178 384
1178 198
1178 3240
1178 329
1178 588
1178 960
1178 3410
1178 334
1178 429
1178 1106
1178 290
1178 997
1178 371
1178 995
1178 587
1178 338
1178 993
1178 996
352 353
org.joda.time.chrono.EthiopicChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.EthiopicChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.EthiopicChronology.clinit() 393
org.joda.time.chrono.EthiopicChronology.clinit() org.joda.time.chrono.EthiopicChronology.clinit()
org.joda.time.chrono.EthiopicChronology.clinit() 532
org.joda.time.chrono.EthiopicChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.EthiopicChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.EthiopicChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
239 231
239 230
239 70
239 org.joda.time.field.DelegatedDurationField.getUnitMillis()
239 239
239 246
239 388
239 68
org.joda.time.tz.ZoneInfoCompiler.printUsage() java.io.PrintStream.println(java.lang.String)
org.joda.time.tz.ZoneInfoCompiler.printUsage() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoCompiler.printUsage() java.lang.System.clinit()
586 414
586 437
586 1148
586 413
586 438
2436 61
2436 51
2436 2625
2436 48
2436 2458
2436 1719
2436 49
2436 java.lang.Math.min(int,int)
2436 2438
2436 1806
2436 2470
2436 org.joda.time.DurationFieldType.clinit()
2436 59
2436 java.lang.Object.clinit()
2436 570
2436 1820
2436 1835
2436 52
2436 45
2436 2437
2436 1848
2436 java.lang.Math.clinit()
2436 2682
2436 57
2436 2659
228 org.joda.time.field.DelegatedDurationField.getType()
228 java.lang.Throwable.clinit()
228 229
228 org.joda.time.field.UnsupportedDurationField.getType()
228 47
228 java.lang.Object.clinit()
228 java.lang.IllegalArgumentException()
228 170
228 org.joda.time.field.DelegatedDurationField.isSupported()
228 234
228 181
228 131
228 224
3641 java.nio.CharBuffer.charAt(int)
3641 java.lang.StringBuffer.charAt(int)
3641 java.lang.String.charAt(int)
3641 917
3641 java.lang.StringBuilder.charAt(int)
1296 961
411 412
913 java.lang.Object.clinit()
913 587
913 268
913 259
299 java.lang.Object()
612 613
612 505
612 java.lang.Object.clinit()
612 509
612 600
612 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.convert.ReadablePartialConverter.clinit() java.lang.Object.clinit()
org.joda.time.convert.ReadablePartialConverter.clinit() org.joda.time.convert.ReadablePartialConverter.clinit()
org.joda.time.convert.ReadablePartialConverter.clinit() 851
135 136
135 114
3130 36
1508 1046
1508 277
1508 889
1508 1508
1508 1093
1508 103
1508 285
1508 2140
1508 1092
1508 226
1508 905
1508 283
226 227
3142 278
3142 3143
1780 1769
446 481
446 3394
446 255
446 270
446 460
446 237
446 252
446 240
446 390
446 257
446 446
3393 795
521 755
521 744
521 274
521 219
521 207
521 1102
521 java.lang.Object.clinit()
521 751
521 2258
521 org.joda.time.chrono.LimitChronology.withUTC()
521 749
521 java.lang.Object()
521 304
521 495
521 747
521 385
521 753
521 478
521 java.util.Locale.getDefault()
521 2211
521 org.joda.time.chrono.ZonedChronology.withUTC()
521 522
521 org.joda.time.DateTimeUtils.clinit()
521 387
521 523
521 269
521 226
521 java.util.Locale.clinit()
66 java.lang.Object()
108 java.lang.Object.clinit()
108 110
108 65
108 109
754 742
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) 1397
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) 3436
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) 3352
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
2116 1987
2116 1998
2116 2117
2116 114
2116 1985
2116 1401
1234 1233
1193 2228
1193 342
1193 1613
1193 2319
1193 960
1193 3410
1193 1497
1193 429
1193 997
1193 371
1193 995
1193 338
1193 996
1193 1103
1193 457
1193 1195
1193 330
1193 992
1193 2320
1193 2086
1193 994
1193 1104
1193 991
1193 384
1193 3240
1193 329
1193 1612
1193 1498
1193 334
1193 2229
1193 1106
1193 290
1193 1194
1193 993
1193 2087
1732 970
2855 java.lang.Object.clinit()
2855 java.lang.StringBuilder()
2855 2854
2855 java.lang.StringBuilder.append(java.lang.String)
2855 java.lang.StringBuilder.toString()
3765 java.lang.Object.clinit()
3765 3766
org.joda.time.chrono.BaseChronology.millisOfSecond() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.millisOfSecond() 62
org.joda.time.chrono.BaseChronology.millisOfSecond() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.millisOfSecond() 1201
org.joda.time.chrono.BaseChronology.millisOfSecond() 168
org.joda.time.chrono.BaseChronology.millisOfSecond() org.joda.time.chrono.BaseChronology.millis()
1768 1769
558 559
145 java.lang.Object.clinit()
145 org.joda.time.DateTimeFieldType.clinit()
559 java.lang.Object()
1335 java.lang.Object.clinit()
1335 1336
1335 java.lang.Throwable.clinit()
1335 java.lang.IllegalArgumentException(java.lang.String)
718 715
718 505
718 java.lang.Object.clinit()
718 696
718 509
718 643
718 709
718 699
718 641
718 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3280 3411
3280 1422
3280 1320
3280 org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale)
3280 1420
3280 1240
3280 3280
org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
673 505
673 java.lang.Object.clinit()
673 674
673 509
673 669
673 643
673 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2001 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
2001 426
2001 2002
2001 1219
2001 1530
2001 1058
2001 103
2001 2216
2001 2138
2001 343
2001 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
2001 2001
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 363
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 3302
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 3345
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 3304
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 1399
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 1398
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 362
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 118
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) 3434
org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
993 1103
993 457
993 330
993 992
993 342
993 1104
993 994
993 991
993 384
993 3240
993 329
993 960
993 3410
993 334
993 429
993 1106
993 290
993 997
993 371
993 995
993 338
993 993
993 996
993 118
3158 java.util.TreeMap.keySet()
3158 11
3158 java.util.Collections$SynchronizedMap.keySet()
3158 java.lang.StringBuilder.append(java.lang.Object)
3158 sun.util.PreHashedMap.keySet()
3158 java.io.IOException(java.lang.String)
3158 java.lang.ProcessEnvironment$StringEnvironment.keySet()
3158 java.util.Collections$EmptyMap.keySet()
3158 java.lang.Object.clinit()
3158 java.lang.StringBuilder()
3158 java.util.concurrent.ConcurrentHashMap.keySet()
3158 java.util.Hashtable.keySet()
3158 java.util.TreeSet(java.util.Collection)
3158 java.util.Collections$CheckedMap.keySet()
3158 java.lang.Object()
3158 java.util.IdentityHashMap.keySet()
3158 java.util.Collections.unmodifiableSortedSet(java.util.SortedSet)
3158 15
3158 java.lang.Throwable.clinit()
3158 java.lang.IllegalArgumentException(java.lang.String)
3158 java.util.HashMap.keySet()
3158 java.io.File.isDirectory()
3158 java.lang.StringBuilder.toString()
3158 java.util.TreeSet.clinit()
3158 java.util.jar.Attributes.keySet()
3158 java.util.AbstractMap.keySet()
3158 java.security.Provider.keySet()
3158 java.util.Collections$SingletonMap.keySet()
3158 java.util.TreeMap$NavigableSubMap.keySet()
3158 java.util.Collections$UnmodifiableMap.keySet()
3158 java.lang.StringBuilder.append(java.lang.String)
3158 java.io.File.exists()
3158 java.util.WeakHashMap.keySet()
3158 java.util.Collections.clinit()
1192 1614
1192 2088
1192 java.lang.Object.clinit()
1192 java.lang.Object.equals(java.lang.Object)
1192 2230
1192 1196
1192 1197
1192 589
1192 2321
1192 794
1192 org.joda.time.field.AbstractReadableInstantFieldProperty.getChronology()
1192 1499
1192 1193
1403 1143
1403 2050
1403 1215
1403 1208
1403 1966
1403 2270
1403 2647
1403 1967
1403 2045
1403 2164
1403 2645
1403 2638
1403 2636
1403 1132
3264 1464
3264 342
3264 3241
3264 3266
3264 1391
3264 3410
3264 960
3264 195
3264 429
3264 1448
3264 3242
3264 997
3264 1471
3264 371
3264 200
3264 995
3264 338
3264 3432
3264 996
3264 457
3264 1103
3264 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
3264 992
3264 330
3264 994
3264 1104
3264 991
3264 384
3264 329
3264 3240
3264 1446
3264 334
3264 1106
3264 3300
3264 290
3264 1390
3264 993
3264 3344
919 java.lang.Object.clinit()
919 920
919 java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)
919 java.lang.System.clinit()
448 java.lang.Object.clinit()
448 162
448 54
448 org.joda.time.DurationFieldType.clinit()
3654 java.lang.Object.clinit()
3654 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.clinit()
2193 289
2193 3397
2193 1162
2193 3382
2193 org.joda.time.chrono.BaseChronology.months()
2193 178
2193 896
2193 288
2193 2188
2193 1061
2193 org.joda.time.field.DelegatedDurationField.add(long,int)
2193 1111
2193 1062
2193 org.joda.time.field.DecoratedDurationField.add(long,int)
2193 901
349 154
349 471
988 989
848 838
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) 1397
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.field.RemainderDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.field.DelegatedDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) 3436
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) 3352
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long)
org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfCeiling(long) 118
1068 java.lang.Object.clinit()
1068 498
1068 org.joda.time.DateTimeZone.clinit()
1068 org.joda.time.chrono.GregorianChronology.clinit()
1068 91
1068 org.joda.time.chrono.BasicGJChronology.clinit()
1068 207
1068 org.joda.time.chrono.BasicChronology.clinit()
646 java.util.ArrayList.add(java.lang.Object)
414 java.lang.Object.clinit()
414 org.joda.time.DateTimeUtils.clinit()
414 274
org.joda.time.field.DelegatedDurationField.add(long,long) 1076
org.joda.time.field.DelegatedDurationField.add(long,long) 3400
org.joda.time.field.DelegatedDurationField.add(long,long) 1078
org.joda.time.field.DelegatedDurationField.add(long,long) org.joda.time.field.DecoratedDurationField.add(long,long)
org.joda.time.field.DelegatedDurationField.add(long,long) 1077
org.joda.time.field.DelegatedDurationField.add(long,long) org.joda.time.field.DelegatedDurationField.add(long,long)
org.joda.time.field.DelegatedDurationField.add(long,long) 1087
org.joda.time.field.DelegatedDurationField.add(long,long) 1085
org.joda.time.field.DelegatedDurationField.add(long,long) 1164
org.joda.time.field.DelegatedDurationField.add(long,long) 3385
1776 java.lang.Object.clinit()
1776 3705
1776 java.lang.Object()
3439 3406
org.joda.time.chrono.EthiopicChronology.hashCode() 1386
80 452
80 81
80 132
80 3428
80 957
80 380
80 java.lang.Object.clinit()
80 116
80 432
80 321
80 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
80 java.lang.Throwable.clinit()
80 1269
80 java.lang.IllegalArgumentException(java.lang.String)
80 3061
80 83
80 319
80 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
80 406
80 1210
80 212
80 402
80 140
80 2067
80 1999
80 403
80 318
1782 java.util.Collections$SynchronizedCollection.size()
1782 sun.security.jca.ProviderList$3.get(int)
1782 java.util.SubList.size()
1782 java.util.Collections$CheckedList.get(int)
1782 java.util.Collections$UnmodifiableCollection.size()
1782 java.lang.IllegalStateException(java.lang.String)
1782 java.util.Collections$CopiesList.get(int)
1782 java.util.ArrayList.add(java.lang.Object)
1782 java.util.Arrays$ArrayList.size()
1782 java.util.Collections$CheckedList.subList(int,int)
1782 java.util.Arrays$ArrayList.get(int)
1782 java.util.Vector.get(int)
1782 java.util.SubList.get(int)
1782 java.util.Vector.clear()
1782 java.util.Vector.subList(int,int)
1782 java.util.LinkedList.get(int)
1782 java.util.Collections$SingletonList.size()
1782 java.util.LinkedList.clear()
1782 java.util.Collections$CopiesList.subList(int,int)
1782 sun.security.jca.ProviderList$ServiceList.get(int)
1782 org.joda.time.format.PeriodFormatterBuilder$Literal.clinit()
1782 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
1782 java.util.ArrayList$SubList.size()
1782 java.lang.IllegalArgumentException()
1782 1767
1782 java.util.Collections$SynchronizedCollection.clear()
1782 sun.security.jca.ProviderList$ServiceList.size()
1782 java.util.Collections$UnmodifiableList.subList(int,int)
1782 java.util.LinkedList.size()
1782 java.util.Collections$SynchronizedList.get(int)
1782 1783
1782 java.util.Collections$EmptyList.size()
1782 java.util.Collections$SingletonList.get(int)
1782 java.util.ArrayList.get(int)
1782 java.util.Collections$CheckedRandomAccessList.subList(int,int)
1782 java.lang.Object.clinit()
1782 java.util.Vector.size()
1782 1764
1782 java.util.Collections$CopiesList.size()
1782 sun.security.jca.ProviderList$3.size()
1782 java.util.Collections$CheckedCollection.clear()
1782 java.util.SubList.subList(int,int)
1782 java.util.AbstractList.add(java.lang.Object)
1782 java.util.ArrayList$SubList.subList(int,int)
1782 java.util.AbstractList.clear()
1782 java.util.Collections$UnmodifiableCollection.clear()
1782 java.util.ArrayList.clear()
1782 java.util.ArrayList.subList(int,int)
1782 java.util.ArrayList$SubList.get(int)
1782 org.joda.time.format.PeriodFormatterBuilder.clinit()
1782 1786
1782 java.util.ArrayList.size()
1782 java.util.Collections$SynchronizedList.subList(int,int)
1782 java.util.RandomAccessSubList.subList(int,int)
1782 java.lang.Throwable.clinit()
1782 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
1782 java.util.Collections$CheckedCollection.size()
1782 java.util.LinkedList.add(java.lang.Object)
1782 java.util.Collections$CheckedCollection.add(java.lang.Object)
1782 java.util.Collections$SynchronizedRandomAccessList.subList(int,int)
1782 java.util.AbstractList.subList(int,int)
1782 java.util.Vector.add(java.lang.Object)
1782 java.util.Collections$EmptyList.get(int)
1782 java.util.Collections$UnmodifiableRandomAccessList.subList(int,int)
1782 java.util.Collections$UnmodifiableList.get(int)
1761 1762
1761 java.lang.Object()
622 505
622 java.lang.Object.clinit()
622 509
622 623
622 600
622 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) 3346
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) 3306
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) 3437
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) 118
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
org.joda.time.field.RemainderDateTimeField.roundHalfEven(long) 1432
223 223
223 org.joda.time.field.UnsupportedDurationField.hashCode()
223 164
223 458
223 java.lang.Object.hashCode()
223 225
223 232
223 org.joda.time.field.DelegatedDurationField.hashCode()
223 224
223 233
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2030
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2031
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2118
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2025
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2028
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2114
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) 2026
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
1133 2271
1133 1209
1133 2046
1133 1135
1133 1969
1133 1096
1133 1134
1133 2165
1133 2646
1133 2047
1133 2637
1133 288
1133 1968
1004 383
1004 407
1004 1211
1004 133
1004 3424
1004 119
1004 436
1004 1004
1004 453
1004 1411
1004 1212
1004 3062
1004 213
1004 117
1004 1388
1004 2000
1004 408
1004 1435
1004 141
1004 409
1004 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
1004 118
1409 452
1409 2228
1409 132
1409 3428
1409 957
1409 380
1409 2319
1409 1497
1409 116
1409 432
1409 321
1409 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
1409 2086
1409 1269
1409 3061
1409 83
1409 319
1409 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
1409 1612
1409 406
1409 1210
1409 212
1409 402
1409 1194
1409 140
1409 2067
1409 1999
1409 403
1409 318
3302 1399
251 179
220 97
1423 java.lang.Object.clinit()
1423 1242
1423 org.joda.time.chrono.GJLocaleSymbols.clinit()
1423 1424
621 java.lang.String.length()
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) 3430
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) 1137
org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial)
3544 3482
3544 3503
3544 3530
3544 3525
3544 733
3544 3544
3544 737
3544 644
3544 1237
3544 731
3544 3545
3544 730
3544 1251
3544 3471
3544 3519
3544 734
3003 73
3003 org.joda.time.DateTimeFieldType.clinit()
3003 java.lang.ProcessEnvironment$StringEntrySet.remove(java.lang.Object)
3003 java.util.HashMap$EntrySet.remove(java.lang.Object)
3003 631
3003 java.lang.StringBuilder.append(java.lang.Object)
3003 sun.nio.ch.Util$2.remove(java.lang.Object)
3003 java.util.WeakHashMap$KeySet.remove(java.lang.Object)
3003 java.util.IdentityHashMap$Values.remove(java.lang.Object)
3003 java.util.Collections$CheckedMap$CheckedEntrySet.remove(java.lang.Object)
3003 java.util.ArrayDeque.remove(java.lang.Object)
3003 java.util.concurrent.SynchronousQueue.remove(java.lang.Object)
3003 java.util.Collections$AsLIFOQueue.remove(java.lang.Object)
3003 java.util.HashSet.remove(java.lang.Object)
3003 java.util.concurrent.ConcurrentHashMap$EntrySet.remove(java.lang.Object)
3003 java.util.concurrent.LinkedBlockingQueue.remove(java.lang.Object)
3003 java.util.RegularEnumSet.remove(java.lang.Object)
3003 java.lang.StringBuilder.toString()
3003 java.util.Collections$SynchronizedCollection.remove(java.lang.Object)
3003 java.util.AbstractCollection.remove(java.lang.Object)
3003 java.util.JumboEnumSet.remove(java.lang.Object)
3003 629
3003 java.lang.StringBuilder.append(java.lang.String)
3003 java.util.IdentityHashMap$EntrySet.remove(java.lang.Object)
3003 java.util.Collections$CheckedCollection.remove(java.lang.Object)
3003 3638
3003 java.lang.ProcessEnvironment$StringValues.remove(java.lang.Object)
3003 java.util.TreeSet.remove(java.lang.Object)
3003 java.util.concurrent.ConcurrentHashMap$KeySet.remove(java.lang.Object)
3003 62
3003 java.util.TreeMap$Values.remove(java.lang.Object)
3003 77
3003 java.util.Collections$UnmodifiableCollection.remove(java.lang.Object)
3003 java.util.IdentityHashMap$KeySet.remove(java.lang.Object)
3003 java.util.HashMap$KeySet.remove(java.lang.Object)
3003 java.util.TreeMap$EntrySet.remove(java.lang.Object)
3003 633
3003 75
3003 java.util.TreeMap$NavigableSubMap$EntrySetView.remove(java.lang.Object)
3003 java.lang.Object.clinit()
3003 java.lang.StringBuilder()
3003 java.lang.ProcessEnvironment$StringKeySet.remove(java.lang.Object)
3003 java.util.concurrent.ConcurrentLinkedQueue.remove(java.lang.Object)
3003 java.util.concurrent.ArrayBlockingQueue.remove(java.lang.Object)
3003 java.util.Hashtable$KeySet.remove(java.lang.Object)
3003 sun.misc.SoftCache$EntrySet.remove(java.lang.Object)
3003 java.util.Vector.remove(java.lang.Object)
3003 java.util.Collections$SetFromMap.remove(java.lang.Object)
3003 java.util.LinkedList.remove(java.lang.Object)
3003 java.util.WeakHashMap$EntrySet.remove(java.lang.Object)
3003 java.lang.Throwable.clinit()
3003 java.lang.IllegalArgumentException(java.lang.String)
3003 600
3003 java.util.TreeMap$KeySet.remove(java.lang.Object)
3003 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.remove(java.lang.Object)
3003 javax.security.auth.Subject$SecureSet.remove(java.lang.Object)
3003 java.util.concurrent.LinkedBlockingDeque.remove(java.lang.Object)
3003 java.util.ArrayList.remove(java.lang.Object)
3003 java.util.Hashtable$EntrySet.remove(java.lang.Object)
1493 437
1493 1148
3754 java.lang.Object.clinit()
3754 3755
3754 java.lang.Throwable.clinit()
3754 3450
3754 java.lang.IllegalArgumentException(java.lang.String)
3754 964
3754 java.lang.String.startsWith(java.lang.String)
3754 587
3754 3581
3075 1133
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 3511
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 1326
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 1462
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.GJChronology$CutoverField.getMaximumTextLength(java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 1423
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 1442
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getMaximumTextLength(java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 1325
org.joda.time.field.DelegatedDateTimeField.getMaximumTextLength(java.util.Locale) 3423
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 1373
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 3276
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 3235
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 3403
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 1372
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 1750
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 424
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long) 1667
654 505
654 java.lang.Object.clinit()
654 628
654 634
654 509
654 643
654 632
654 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
654 630
org.joda.time.chrono.BaseChronology.dayOfMonth() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.dayOfMonth() 147
org.joda.time.chrono.BaseChronology.dayOfMonth() 175
org.joda.time.chrono.BaseChronology.dayOfMonth() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.dayOfMonth() 1201
org.joda.time.chrono.BaseChronology.dayOfMonth() org.joda.time.chrono.BaseChronology.days()
60 java.lang.Object.clinit()
60 org.joda.time.DurationFieldType.clinit()
713 505
713 java.lang.Object.clinit()
713 695
713 705
713 509
713 643
713 699
713 640
713 600
713 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
43 44
1778 1769
859 sun.text.CompactByteArray.clone()
859 javax.crypto.Mac.clone()
859 javax.naming.Reference.clone()
859 java.util.Hashtable.clone()
859 java.util.jar.Manifest.clone()
859 sun.security.krb5.internal.KerberosTime.clone()
859 sun.security.krb5.internal.Ticket.clone()
859 sun.security.krb5.EncryptedData.clone()
859 sun.text.IntHashtable.clone()
859 sun.net.ProgressSource.clone()
859 java.util.EnumSet.clone()
859 sun.net.www.protocol.http.AuthenticationInfo.clone()
859 sun.security.util.BitArray.clone()
859 java.util.regex.Pattern$CharPropertyNames$CloneableProperty.clone()
859 java.security.SignatureSpi.clone()
859 java.util.SimpleTimeZone.clone()
859 java.util.JapaneseImperialCalendar.clone()
859 java.util.IdentityHashMap.clone()
859 sun.security.x509.GeneralSubtrees.clone()
859 java.util.ArrayList.clone()
859 sun.text.normalizer.NormalizerBase.clone()
859 sun.security.krb5.internal.ETypeInfo.clone()
859 javax.naming.CompositeName.clone()
859 java.util.Locale.clone()
859 java.security.Signature$Delegate.clone()
859 sun.security.krb5.internal.TicketFlags.clone()
859 sun.security.provider.MD4.clone()
859 java.util.TreeSet.clone()
859 java.util.Hashtable$Entry.clone()
859 java.text.MessageFormat.clone()
859 java.lang.Object.clone()
859 sun.security.krb5.EncryptionKey.clone()
859 java.text.DecimalFormat.clone()
859 java.text.SimpleDateFormat.clone()
859 java.util.Date.clone()
859 sun.security.krb5.PrincipalName.clone()
859 java.lang.Object.hashCode()
859 sun.net.www.MimeEntry.clone()
859 sun.util.calendar.CalendarDate.clone()
859 java.util.GregorianCalendar.clone()
859 java.util.Vector.clone()
859 sun.security.krb5.internal.AuthorizationData.clone()
859 java.net.HttpCookie.clone()
859 sun.security.krb5.internal.crypto.crc32.clone()
859 java.util.zip.ZipEntry.clone()
859 java.security.MessageDigest$Delegate.clone()
859 sun.util.calendar.ZoneInfo.clone()
859 sun.text.normalizer.CharacterIteratorWrapper.clone()
859 java.text.DateFormatSymbols.clone()
859 java.util.HashSet.clone()
859 sun.util.calendar.ImmutableGregorianDate.clone()
859 java.text.AttributedString$AttributedStringIterator.clone()
859 java.text.RuleBasedBreakIterator.clone()
859 865
859 java.lang.Object.clinit()
859 sun.security.krb5.internal.LastReqEntry.clone()
859 java.text.DecimalFormatSymbols.clone()
859 java.text.DigitList.clone()
859 java.text.RuleBasedCollator.clone()
859 java.text.RuleBasedBreakIterator$SafeCharIterator.clone()
859 java.text.ChoiceFormat.clone()
859 java.lang.Thread.clone()
859 1488
859 sun.security.krb5.Realm.clone()
859 java.util.ResourceBundle$CacheKey.clone()
859 sun.security.krb5.internal.ETypeInfo2.clone()
859 java.util.LinkedList.clone()
859 2557
859 java.text.StringCharacterIterator.clone()
859 sun.security.x509.NameConstraintsExtension.clone()
859 java.util.ArrayDeque.clone()
859 java.util.jar.Attributes.clone()
859 sun.security.krb5.internal.HostAddress.clone()
859 sun.security.krb5.internal.PAData.clone()
859 java.util.TreeMap.clone()
859 sun.text.normalizer.ReplaceableUCharacterIterator.clone()
859 860
859 java.util.BitSet.clone()
859 sun.security.krb5.internal.AuthorizationDataEntry.clone()
859 java.lang.Enum.clone()
859 java.util.AbstractMap.clone()
859 java.util.HashMap.clone()
859 sun.security.provider.PolicyParser$GrantEntry.clone()
859 java.util.JumboEnumSet.clone()
859 sun.security.krb5.internal.HostAddresses.clone()
859 2357
104 160
104 122
104 128
104 org.joda.time.DateTimeFieldType.clinit()
104 146
104 359
104 410
104 105
104 448
104 144
104 java.lang.Object.clinit()
104 479
104 111
104 139
104 150
104 244
104 138
104 148
104 121
104 134
104 135
104 113
104 155
104 159
104 127
104 142
104 3213
104 454
104 241
104 157
104 247
104 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int) java.lang.Object.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int) 374
2692 java.lang.String.clinit()
2692 java.lang.Object.clinit()
2692 java.lang.StringBuilder()
2692 java.lang.String.valueOf(int)
2692 java.lang.StringBuilder.append(java.lang.String)
2692 java.lang.StringBuilder.toString()
2692 1808
653 505
653 java.lang.Object.clinit()
653 628
653 509
653 643
653 632
653 635
653 600
653 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
653 630
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long) 3298
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long) 1750
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long) 3276
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long) 1667
476 1295
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 3364
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 1058
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 3348
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 3383
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 225
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 3404
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long) 1369
926 449
926 480
926 357
926 123
926 128
926 359
926 410
926 251
926 448
926 243
926 250
926 927
926 211
926 java.lang.Object.clinit()
926 248
926 479
926 3395
926 389
926 236
926 244
926 254
926 256
926 124
926 134
926 245
926 127
926 454
926 3213
926 242
926 241
926 249
926 247
926 253
926 459
3345 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
3345 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
3345 363
3345 3302
3345 3345
3345 3304
3345 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
3345 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
3345 1399
3345 1398
3345 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
3345 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
3345 362
3345 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
3345 118
3345 3434
3345 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
764 315
3101 java.lang.Object.equals(java.lang.Object)
3101 3102
3101 3103
3101 794
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 654
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 669
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 672
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 713
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 651
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 663
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 719
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 641
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 690
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 720
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 653
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 685
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 664
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 688
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 612
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 689
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 670
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 614
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 649
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 642
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 721
org.joda.time.format.ISODateTimeFormat$Constants.clinit() org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 630
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 650
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 677
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 695
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 640
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 622
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 683
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 668
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 628
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 634
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 687
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 661
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 594
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 709
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 599
org.joda.time.format.ISODateTimeFormat$Constants.clinit() java.lang.Object.clinit()
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 662
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 684
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 686
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 632
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 679
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 648
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 691
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 680
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 717
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 678
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 671
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 665
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 626
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 714
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 718
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 655
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 676
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 652
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 694
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 673
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 693
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 692
org.joda.time.format.ISODateTimeFormat$Constants.clinit() 616
1337 230
1337 70
1337 128
1337 org.joda.time.field.DelegatedDurationField.getUnitMillis()
1337 239
1337 134
1337 359
1337 410
1337 246
1337 448
1337 127
1337 3213
1337 454
1337 231
1337 241
1337 479
1337 247
1337 244
1337 388
1337 68
503 505
503 java.lang.Object.clinit()
503 509
503 514
503 506
503 504
629 603
629 java.lang.Object.clinit()
629 org.joda.time.DateTimeFieldType.clinit()
629 77
365 286
659 java.lang.Object.clinit()
659 660
659 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.field.DelegatedDurationField.isSupported() 170
org.joda.time.field.DelegatedDurationField.isSupported() org.joda.time.field.DelegatedDurationField.isSupported()
org.joda.time.field.DelegatedDurationField.isSupported() 131
org.joda.time.field.DelegatedDurationField.isSupported() 181
668 505
668 java.lang.Object.clinit()
668 509
668 643
668 640
668 652
668 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2756 java.lang.String.clinit()
2756 java.lang.Object.clinit()
2756 java.lang.StringBuilder()
2756 java.lang.String.valueOf(int)
2756 java.lang.StringBuilder.append(java.lang.String)
2756 java.lang.StringBuilder.toString()
2756 1808
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 1373
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 3276
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 3403
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 1372
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 1750
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long) 1667
1806 java.lang.Object.clinit()
1806 org.joda.time.PeriodType.clinit()
1806 1801
322 java.lang.Object.clinit()
322 97
org.joda.time.field.AbstractReadableInstantFieldProperty.getChronology() java.lang.UnsupportedOperationException(java.lang.String)
org.joda.time.field.AbstractReadableInstantFieldProperty.getChronology() java.lang.Object.clinit()
org.joda.time.field.AbstractReadableInstantFieldProperty.getChronology() java.lang.Throwable.clinit()
865 java.lang.Object()
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3482
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3503
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3530
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3525
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 733
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3544
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 737
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 1237
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 731
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 730
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 1251
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3471
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 3519
org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale) 734
741 742
1084 120
1084 java.lang.Math.abs(long)
1084 336
1084 469
1084 java.lang.StringBuilder.append(long)
1084 291
1084 548
1084 351
1084 java.lang.Object.clinit()
1084 340
1084 java.lang.StringBuilder()
1084 320
1084 552
1084 java.lang.Math.clinit()
1084 348
1084 551
1084 java.lang.Throwable.clinit()
1084 3288
1084 java.lang.IllegalArgumentException(java.lang.String)
1084 472
1084 java.lang.StringBuilder.toString()
1084 3286
1084 475
1084 537
1084 350
1084 900
1084 536
1084 java.lang.StringBuilder.append(java.lang.String)
1084 311
1084 1382
1084 378
3777 java.io.FileOutputStream.clinit()
3777 20
3777 java.io.FileInputStream.clinit()
3777 java.io.PrintStream.println(java.lang.String)
3777 3728
3777 java.io.FileInputStream.close()
3777 36
3777 java.net.SocketInputStream.close()
3777 22
3777 451
3777 java.io.File.getParentFile()
3777 java.lang.System.clinit()
3777 java.lang.Object.clinit()
3777 java.lang.StringBuilder()
3777 1040
3777 org.joda.time.tz.ZoneInfoLogger.clinit()
3777 java.io.FileOutputStream(java.io.File)
3777 java.io.File.clinit()
3777 java.net.SocketOutputStream.close()
3777 java.io.FileOutputStream.close()
3777 java.lang.StringBuilder.toString()
3777 java.io.File(java.io.File,java.lang.String)
3777 java.io.FileInputStream(java.io.File)
3777 3126
3777 3759
3777 java.lang.StringBuilder.append(java.lang.String)
3777 790
3777 java.io.File.exists()
3777 java.io.File.mkdirs()
655 505
655 java.lang.Object.clinit()
655 509
655 643
655 656
655 659
655 641
655 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintStream.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.nio.CharBuffer.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuffer.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.StringWriter.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.lang.StringBuilder.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.Writer.append(java.lang.CharSequence)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale) java.io.PrintWriter.append(java.lang.CharSequence)
3048 3000
3048 2045
3048 java.lang.Object.clinit()
3048 java.util.ArrayList.size()
3048 java.util.ArrayList.clinit()
3048 java.util.Arrays.clinit()
3048 java.util.ArrayList(java.util.Collection)
3048 java.util.Arrays.asList(java.lang.Object[])
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() 84
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() 173
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() 1201
org.joda.time.chrono.BaseChronology.clockhourOfHalfday() org.joda.time.chrono.BaseChronology.hours()
918 732
918 org.joda.time.format.DateTimeParserBucket$SavedField(org.joda.time.DateTimeField,int)
918 919
916 3454
916 3568
916 java.lang.UnsupportedOperationException()
916 3649
916 java.lang.Throwable.clinit()
916 917
916 525
916 949
916 java.lang.Object.clinit()
916 942
916 916
916 3551
916 3655
916 3641
916 1054
916 3490
916 922
916 924
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 363
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 3302
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 3345
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 3304
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 1399
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 1398
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 362
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 118
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) 3434
org.joda.time.field.RemainderDateTimeField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
1751 294
1751 297
1751 337
1751 291
org.joda.time.field.DelegatedDateTimeField.getAsText(org.joda.time.ReadablePartial,java.util.Locale) 3343
org.joda.time.field.DelegatedDateTimeField.getAsText(org.joda.time.ReadablePartial,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsText(org.joda.time.ReadablePartial,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsText(org.joda.time.ReadablePartial,java.util.Locale) 3420
35 java.lang.Object.clinit()
35 org.joda.time.tz.CachedDateTimeZone.clinit()
35 org.joda.time.DateTimeZone.clinit()
35 5
35 36
3494 java.lang.Object.clinit()
3494 java.lang.Throwable.clinit()
3494 java.lang.IllegalArgumentException(java.lang.String)
3494 org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit()
3494 508
3494 1232
3705 java.util.HashSet.size()
3705 3685
3705 java.util.HashSet()
3705 3706
3705 1800
3705 java.lang.StringBuilder.toString()
3705 2511
3705 java.util.HashSet.add(java.lang.Object)
3705 java.util.HashSet.clinit()
3705 java.lang.String.clinit()
3705 java.lang.Object.clinit()
3705 1774
3705 java.lang.StringBuilder()
3705 java.util.AbstractCollection.toArray(java.lang.Object[])
3705 java.lang.StringBuilder.append(java.lang.String)
355 356
922 java.lang.Object.clinit()
922 923
922 java.lang.String.length()
1505 2151
1505 20
1505 3380
1505 827
1505 451
1505 1322
1505 org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)
1505 java.lang.Object.equals(java.lang.Object)
1505 2158
1505 1040
1505 3126
1505 790
1505 1505
509 java.lang.UnsupportedOperationException(java.lang.String)
509 513
509 511
509 java.lang.Object.clinit()
509 512
509 java.lang.Throwable.clinit()
509 510
3026 java.lang.IllegalArgumentException(java.lang.String)
49 java.lang.Object.clinit()
49 org.joda.time.DurationFieldType.clinit()
631 603
631 java.lang.Object.clinit()
631 org.joda.time.DateTimeFieldType.clinit()
631 75
22 java.lang.Object.clinit()
22 23
22 java.io.DataInputStream(java.io.InputStream)
org.joda.time.field.DividedDateTimeField.add(long,long) 3399
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) 1375
org.joda.time.field.DividedDateTimeField.add(long,long) 3350
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) 1080
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) 1084
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.field.DividedDateTimeField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) 1380
org.joda.time.field.DividedDateTimeField.add(long,long) org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
org.joda.time.field.DividedDateTimeField.add(long,long) 1079
org.joda.time.field.DividedDateTimeField.add(long,long) 1376
org.joda.time.field.DividedDateTimeField.add(long,long) 1081
org.joda.time.field.DividedDateTimeField.add(long,long) 118
3177 java.lang.Object.clinit()
3177 java.util.ArrayList.clinit()
3177 java.util.ArrayList(int)
3177 java.lang.Object()
2706 java.lang.Object.clinit()
2706 49
2706 org.joda.time.DurationFieldType.clinit()
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) 1430
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) 3438
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) 3349
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long)
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfFloor(long)
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfFloor(long)
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) org.joda.time.chrono.GJEraDateTimeField.roundHalfFloor(long)
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) 3305
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) 118
org.joda.time.field.RemainderDateTimeField.roundHalfFloor(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfFloor(long)
1270 1450
org.joda.time.chrono.BaseChronology.dayOfYear() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.dayOfYear() 175
org.joda.time.chrono.BaseChronology.dayOfYear() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.dayOfYear() 149
org.joda.time.chrono.BaseChronology.dayOfYear() 1201
org.joda.time.chrono.BaseChronology.dayOfYear() org.joda.time.chrono.BaseChronology.days()
3401 3273
3401 1749
3401 1930
3401 1368
3401 1748
3401 3402
3401 1700
3401 3386
3401 org.joda.time.field.DelegatedDurationField.getDifference(long,long)
3401 3213
920 java.lang.Object()
3684 java.lang.String.length()
1987 342
1987 java.lang.StringBuilder.append(java.lang.Object)
1987 960
1987 3410
1987 732
1987 java.lang.Object.clinit()
1987 429
1987 java.lang.StringBuilder()
1987 997
1987 1096
1987 371
1987 995
1987 338
1987 996
1987 1103
1987 457
1987 330
1987 992
1987 java.lang.Throwable.clinit()
1987 994
1987 1104
1987 java.lang.IllegalArgumentException(java.lang.String)
1987 991
1987 384
1987 java.lang.StringBuilder.toString()
1987 3240
1987 329
1987 334
1987 1106
1987 290
1987 1988
1987 java.lang.StringBuilder.append(java.lang.String)
1987 1097
1987 993
1104 1105
232 164
232 java.lang.Object.hashCode()
232 224
1411 3294
1411 959
3147 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
3147 java.security.Provider.put(java.lang.Object,java.lang.Object)
3147 sun.util.PreHashedMap.get(java.lang.Object)
3147 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3147 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3147 sun.misc.SoftCache.get(java.lang.Object)
3147 java.util.AbstractMap.get(java.lang.Object)
3147 java.lang.Object.clinit()
3147 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
3147 3140
3147 java.util.WeakHashMap.get(java.lang.Object)
3147 java.lang.String.equals(java.lang.Object)
3147 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3147 java.lang.String.substring(int)
3147 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
3147 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
3147 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3147 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
3147 java.util.TreeMap.get(java.lang.Object)
3147 java.util.Collections$SingletonMap.get(java.lang.Object)
3147 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
3147 java.lang.Boolean.clinit()
3147 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3147 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
3147 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3147 java.util.jar.Attributes.get(java.lang.Object)
3147 java.util.Collections$CheckedMap.get(java.lang.Object)
3147 java.lang.Boolean.valueOf(boolean)
3147 1244
3147 java.util.IdentityHashMap.get(java.lang.Object)
3147 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
3147 java.util.HashMap.get(java.lang.Object)
3147 java.security.Provider.get(java.lang.Object)
3147 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
3147 java.lang.String.clinit()
3147 java.text.DateFormatSymbols.getZoneStrings()
3147 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
3147 java.util.LinkedHashMap.get(java.lang.Object)
3147 java.util.Hashtable.get(java.lang.Object)
3147 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
3147 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
3147 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3147 org.joda.time.DateTimeUtils.clinit()
3147 java.lang.String.startsWith(java.lang.String)
3147 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3147 java.util.Locale.clinit()
3147 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
3147 java.util.Collections$EmptyMap.get(java.lang.Object)
1905 1747
1905 java.lang.Object.clinit()
1905 559
1905 563
1905 org.joda.time.DateTimeUtils.clinit()
1905 274
1322 2151
1322 20
1322 org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)
1322 3380
1322 2158
1322 java.lang.Object.equals(java.lang.Object)
1322 1040
1322 3126
1322 790
1322 827
1322 451
1322 1322
433 434
433 2181
539 1295
org.joda.time.chrono.BaseChronology.minuteOfHour() 172
org.joda.time.chrono.BaseChronology.minuteOfHour() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.minuteOfHour() org.joda.time.chrono.BaseChronology.minutes()
org.joda.time.chrono.BaseChronology.minuteOfHour() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.minuteOfHour() 1201
org.joda.time.chrono.BaseChronology.minuteOfHour() 75
3769 3173
3769 sun.util.PreHashedMap.get(java.lang.Object)
3769 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3769 3725
3769 sun.misc.SoftCache.get(java.lang.Object)
3769 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3769 java.lang.Object.clinit()
3769 java.util.AbstractMap.get(java.lang.Object)
3769 java.lang.StringBuilder()
3769 java.util.WeakHashMap.get(java.lang.Object)
3769 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3769 java.util.TreeMap.get(java.lang.Object)
3769 java.util.Collections$SingletonMap.get(java.lang.Object)
3769 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3769 java.util.jar.Attributes.get(java.lang.Object)
3769 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3769 3771
3769 java.util.Collections$CheckedMap.get(java.lang.Object)
3769 java.lang.Throwable.clinit()
3769 java.util.IdentityHashMap.get(java.lang.Object)
3769 java.lang.IllegalArgumentException(java.lang.String)
3769 java.util.HashMap.get(java.lang.Object)
3769 java.lang.StringBuilder.toString()
3769 java.security.Provider.get(java.lang.Object)
3769 3754
3769 java.util.LinkedHashMap.get(java.lang.Object)
3769 java.util.Hashtable.get(java.lang.Object)
3769 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3769 java.lang.StringBuilder.append(java.lang.String)
3769 3770
3769 java.util.Collections$EmptyMap.get(java.lang.Object)
780 java.lang.Object.clinit()
780 java.lang.StringBuilder()
780 java.lang.StringBuilder.append(char)
780 103
780 java.lang.StringBuilder.append(java.lang.String)
780 java.lang.StringBuilder.append(java.lang.Object)
780 36
780 java.lang.StringBuilder.toString()
780 226
1343 452
1343 132
1343 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
1343 1269
1343 3061
1343 957
1343 83
1343 319
1343 380
1343 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
1343 1210
1343 212
1343 402
1343 116
1343 432
1343 140
1343 321
1343 2067
1343 1999
2216 2002
2216 426
2216 1219
2216 java.lang.Throwable.clinit()
2216 1530
2216 java.lang.IllegalArgumentException(java.lang.String)
2216 2216
2216 2138
2216 2001
2216 java.lang.Object.clinit()
2216 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
2216 103
2216 343
2216 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
1245 java.lang.String.clinit()
1245 java.lang.Object.clinit()
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 1667
org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long) 118
1281 java.lang.Object.clinit()
1281 1381
1281 991
1281 376
1281 374
1281 3286
1281 3290
1281 291
3341 1149
3341 1457
3341 org.joda.time.field.DividedDateTimeField.roundFloor(long)
3341 364
3341 932
3341 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
3341 1150
3341 1454
3341 3341
3341 365
3341 3514
3341 3496
3341 1455
3341 1593
3341 934
3341 118
3341 3435
3341 286
3341 1648
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.Object.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.StringBuilder()
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() 1013
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() org.joda.time.DateTimeZone.clinit()
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.DateTimeZoneBuilder$Transition.toString() java.lang.StringBuilder.append(int)
3237 org.joda.time.field.UnsupportedDurationField.isPrecise()
3237 69
3237 org.joda.time.field.DelegatedDurationField.isPrecise()
3237 3237
3237 1699
3237 1823
3237 67
995 1103
995 457
995 330
995 992
995 342
995 1104
995 994
995 991
995 384
995 3240
995 329
995 960
995 3410
995 334
995 429
995 1106
995 290
995 997
995 371
995 995
995 338
995 993
995 996
995 118
57 java.lang.Object.clinit()
57 org.joda.time.DurationFieldType.clinit()
605 sun.security.jca.ProviderList$3.get(int)
605 java.util.Collections$SynchronizedCollection.size()
605 java.util.SubList.size()
605 sun.security.jca.ProviderList$ServiceList.size()
605 java.util.Collections$CheckedList.get(int)
605 java.util.Collections$UnmodifiableCollection.size()
605 java.util.LinkedList.size()
605 java.util.Collections$SynchronizedList.get(int)
605 java.util.Collections$CopiesList.get(int)
605 647
605 java.util.Collections$SingletonList.get(int)
605 java.util.Collections$EmptyList.size()
605 java.util.ArrayList.add(java.lang.Object)
605 java.util.Arrays$ArrayList.size()
605 java.util.ArrayList.get(int)
605 java.util.Vector.size()
605 java.util.Arrays$ArrayList.get(int)
605 java.util.Collections$CopiesList.size()
605 sun.security.jca.ProviderList$3.size()
605 java.util.AbstractList.add(java.lang.Object)
605 java.util.Vector.get(int)
605 java.util.ArrayList$SubList.get(int)
605 java.util.SubList.get(int)
605 java.util.ArrayList.size()
605 java.util.LinkedList.get(int)
605 java.util.Collections$SynchronizedCollection.add(java.lang.Object)
605 java.util.Collections$SingletonList.size()
605 java.util.Collections$CheckedCollection.size()
605 java.util.LinkedList.add(java.lang.Object)
605 sun.security.jca.ProviderList$ServiceList.get(int)
605 java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
605 java.util.Collections$CheckedCollection.add(java.lang.Object)
605 java.util.ArrayList$SubList.size()
605 java.util.Vector.add(java.lang.Object)
605 java.util.Collections$EmptyList.get(int)
605 java.util.Collections$UnmodifiableList.get(int)
1107 20
1107 304
1107 1040
1107 3126
1107 790
1107 451
1214 2050
1214 org.joda.time.chrono.BasicFixedMonthChronology.getDaysInMonthMax(int)
1214 org.joda.time.DateTimeFieldType.clinit()
1214 1208
1214 1212
1214 1966
1214 2647
1214 1967
1214 2045
1214 java.lang.Object.clinit()
1214 2164
1214 2645
1214 106
1214 2638
1214 552
1214 2636
1214 1143
1214 1215
1214 2270
1214 475
1214 350
1214 152
1214 2639
1214 org.joda.time.chrono.IslamicChronology.getDaysInMonthMax(int)
1214 1132
148 64
148 java.lang.Object.clinit()
148 org.joda.time.DateTimeFieldType.clinit()
148 149
3649 sun.util.PreHashedMap$1$1.next()
3649 javax.security.auth.Subject$SecureSet$1.next()
3649 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
3649 sun.net.www.MessageHeader$HeaderIterator.next()
3649 sun.util.PreHashedMap$2$1.next()
3649 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
3649 java.util.Hashtable$EntrySet.iterator()
3649 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3649 sun.net.www.HeaderParser$ParserIterator.hasNext()
3649 java.util.concurrent.ArrayBlockingQueue$Itr.next()
3649 java.util.concurrent.ConcurrentHashMap.keySet()
3649 java.util.Collections$CheckedMap.keySet()
3649 java.util.JumboEnumSet$EnumSetIterator.next()
3649 java.util.LinkedList$ListItr.hasNext()
3649 java.util.ServiceLoader$LazyIterator.next()
3649 java.util.Hashtable$KeySet.iterator()
3649 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
3649 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
3649 3653
3649 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
3649 sun.util.PreHashedMap$2.iterator()
3649 java.security.Provider.keySet()
3649 java.util.LinkedList$DescendingIterator.hasNext()
3649 java.util.JumboEnumSet$EnumSetIterator.hasNext()
3649 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator()
3649 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
3649 java.util.LinkedList$DescendingIterator.next()
3649 java.util.JumboEnumSet.iterator()
3649 sun.util.PreHashedMap$1.iterator()
3649 sun.util.PreHashedMap$2$1.hasNext()
3649 java.util.TreeMap.keySet()
3649 java.util.RegularEnumSet.iterator()
3649 java.util.Collections$SynchronizedMap.keySet()
3649 java.util.WeakHashMap$HashIterator.hasNext()
3649 java.util.LinkedHashMap$EntryIterator.next()
3649 java.util.IdentityHashMap$KeyIterator.next()
3649 java.util.IdentityHashMap$ValueIterator.next()
3649 java.util.WeakHashMap.get(java.lang.Object)
3649 java.util.AbstractMap$1$1.hasNext()
3649 java.util.ArrayDeque$DescendingIterator.hasNext()
3649 java.util.Hashtable$Enumerator.next()
3649 java.util.HashMap$EntryIterator.next()
3649 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
3649 javax.security.auth.Subject$SecureSet$1.hasNext()
3649 java.lang.ProcessEnvironment$StringKeySet.iterator()
3649 java.util.Collections$UnmodifiableList$1.next()
3649 java.util.Collections$EmptyMap.get(java.lang.Object)
3649 sun.nio.cs.FastCharsetProvider$1.next()
3649 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
3649 java.util.Collections$CheckedList$1.hasNext()
3649 java.util.Vector$Itr.next()
3649 sun.util.PreHashedMap.keySet()
3649 sun.misc.SoftCache.get(java.lang.Object)
3649 java.util.ArrayList$SubList$1.next()
3649 java.util.Collections$UnmodifiableCollection.iterator()
3649 java.util.Collections$EmptySet.iterator()
3649 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3649 java.util.HashMap$ValueIterator.next()
3649 sun.misc.SoftCache$EntrySet$1.hasNext()
3649 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3649 java.util.ArrayList$SubList$1.hasNext()
3649 java.util.HashMap.get(java.lang.Object)
3649 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
3649 java.util.jar.Attributes.keySet()
3649 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
3649 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
3649 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
3649 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
3649 javax.security.auth.Subject$SecureSet.iterator()
3649 sun.nio.ch.Util$2.iterator()
3649 sun.net.www.HeaderParser$ParserIterator.next()
3649 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
3649 sun.misc.SoftCache$EntrySet.iterator()
3649 sun.nio.cs.FastCharsetProvider$1.hasNext()
3649 sun.nio.fs.AbstractPath$1.next()
3649 java.util.LinkedList$ListItr.next()
3649 java.util.Collections$EmptyIterator.hasNext()
3649 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3649 java.util.Scanner.next()
3649 java.util.Collections$CheckedCollection$1.hasNext()
3649 java.util.ArrayDeque$DescendingIterator.next()
3649 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
3649 java.util.LinkedHashMap$KeyIterator.next()
3649 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
3649 java.util.Collections$CheckedList$1.next()
3649 java.util.Collections$SingletonMap.get(java.lang.Object)
3649 java.util.Collections$1.next()
3649 java.util.IdentityHashMap.get(java.lang.Object)
3649 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
3649 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
3649 java.util.ArrayDeque$DeqIterator.hasNext()
3649 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
3649 java.util.concurrent.LinkedBlockingQueue$Itr.next()
3649 3569
3649 java.util.Collections$SingletonMap.keySet()
3649 java.lang.ProcessEnvironment$StringEntrySet$1.next()
3649 sun.util.PreHashedMap$1$1.hasNext()
3649 java.util.TreeMap$DescendingSubMap$DescendingEntrySetView.iterator()
3649 java.util.Collections$UnmodifiableMap.keySet()
3649 java.lang.String.length()
3649 java.util.AbstractMap$1.iterator()
3649 java.lang.ProcessEnvironment$StringValues$1.next()
3649 java.util.WeakHashMap$EntryIterator.next()
3649 java.util.HashMap$EntrySet.iterator()
3649 java.util.AbstractMap$1$1.next()
3649 java.util.IdentityHashMap$KeySet.iterator()
3649 java.util.Collections$EmptyMap.keySet()
3649 java.lang.ProcessEnvironment$StringKeySet$1.next()
3649 java.util.TreeMap$DescendingKeyIterator.next()
3649 java.util.concurrent.ConcurrentHashMap$EntrySet.iterator()
3649 java.util.TreeMap$PrivateEntryIterator.hasNext()
3649 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3649 sun.misc.Service$LazyIterator.next()
3649 java.util.Collections$CheckedMap.get(java.lang.Object)
3649 java.util.Scanner.hasNext()
3649 java.util.WeakHashMap$ValueIterator.next()
3649 java.util.IdentityHashMap$EntryIterator.next()
3649 java.util.concurrent.ConcurrentHashMap$KeySet.iterator()
3649 java.util.Collections$CheckedCollection.iterator()
3649 java.util.AbstractMap.keySet()
3649 java.util.HashSet.iterator()
3649 java.util.TreeMap$NavigableSubMap.keySet()
3649 java.util.Hashtable$Enumerator.hasNext()
3649 java.util.RegularEnumSet$EnumSetIterator.next()
3649 java.util.WeakHashMap$KeyIterator.next()
3649 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
3649 java.util.WeakHashMap.keySet()
3649 sun.util.PreHashedMap.get(java.lang.Object)
3649 java.util.SubList$1.next()
3649 java.util.Collections$SynchronizedCollection.iterator()
3649 java.util.Collections$EmptyIterator.next()
3649 java.util.LinkedHashMap$ValueIterator.next()
3649 java.util.ServiceLoader$1.hasNext()
3649 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
3649 java.util.TreeMap$ValueIterator.next()
3649 java.util.AbstractMap$2$1.hasNext()
3649 java.util.AbstractMap.get(java.lang.Object)
3649 sun.nio.fs.AbstractPath$1.hasNext()
3649 java.lang.ProcessEnvironment$StringValues$1.hasNext()
3649 java.util.Collections$CheckedMap$CheckedEntrySet.iterator()
3649 java.util.WeakHashMap$KeySet.iterator()
3649 java.util.Collections$SetFromMap.iterator()
3649 java.util.TreeMap.get(java.lang.Object)
3649 java.util.TreeMap$EntryIterator.next()
3649 java.util.jar.Attributes.get(java.lang.Object)
3649 java.util.HashMap.keySet()
3649 java.security.Provider.get(java.lang.Object)
3649 javax.security.auth.Subject$ClassSet.iterator()
3649 java.util.LinkedHashMap.get(java.lang.Object)
3649 java.util.Collections$UnmodifiableList$1.hasNext()
3649 java.util.IdentityHashMap$EntrySet.iterator()
3649 org.joda.time.DateTimeUtils.clinit()
3649 java.util.ArrayList$Itr.hasNext()
3649 java.nio.charset.Charset$1.hasNext()
3649 java.util.Collections$UnmodifiableCollection$1.next()
3649 java.util.TreeMap$KeyIterator.next()
3649 3650
3649 java.util.SubList$1.hasNext()
3649 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
3649 java.util.Collections$UnmodifiableCollection$1.hasNext()
3649 java.util.Hashtable.keySet()
3649 java.util.TreeSet.iterator()
3649 java.util.RegularEnumSet$EnumSetIterator.hasNext()
3649 java.util.HashMap$KeyIterator.next()
3649 sun.misc.SoftCache$EntrySet$1.next()
3649 sun.security.jca.ProviderList$ServiceList$1.hasNext()
3649 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
3649 java.util.Collections$1.hasNext()
3649 java.util.ArrayList$Itr.next()
3649 java.util.Hashtable.get(java.lang.Object)
3649 java.util.AbstractMap$2$1.next()
3649 java.util.ServiceLoader$1.next()
3649 java.lang.ProcessEnvironment$StringEntrySet.iterator()
3649 sun.security.jca.ProviderList$ServiceList$1.next()
3649 java.util.ServiceLoader$LazyIterator.hasNext()
3649 java.util.Vector$Itr.hasNext()
3649 java.util.ArrayDeque$DeqIterator.next()
3649 java.util.Collections$SingletonSet.iterator()
3649 java.lang.ProcessEnvironment$StringEnvironment.keySet()
3649 java.lang.Object.clinit()
3649 java.util.TreeMap$AscendingSubMap$AscendingEntrySetView.iterator()
3649 java.util.Collections$CheckedCollection$1.next()
3649 java.util.AbstractList$Itr.next()
3649 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
3649 java.util.TreeMap$KeySet.iterator()
3649 java.util.TreeMap$EntrySet.iterator()
3649 sun.misc.Service$LazyIterator.hasNext()
3649 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
3649 java.util.IdentityHashMap.keySet()
3649 java.nio.charset.Charset$1.next()
3649 sun.net.www.MessageHeader$HeaderIterator.hasNext()
3649 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
3649 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
3649 java.util.HashMap$KeySet.iterator()
3649 java.util.WeakHashMap$EntrySet.iterator()
3649 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
3649 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3649 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
3649 java.util.AbstractList$Itr.hasNext()
3649 java.util.HashMap$HashIterator.hasNext()
2901 1133
org.joda.time.chrono.IslamicChronology.equals(java.lang.Object) org.joda.time.chrono.IslamicChronology.getLeapYearPatternType()
org.joda.time.chrono.IslamicChronology.equals(java.lang.Object) 989
500 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
500 sun.util.PreHashedMap.get(java.lang.Object)
500 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
500 java.util.jar.Attributes.get(java.lang.Object)
500 java.util.Collections$CheckedMap.get(java.lang.Object)
500 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
500 java.util.IdentityHashMap.get(java.lang.Object)
500 java.util.HashMap.get(java.lang.Object)
500 org.joda.time.DateTimeZone$LazyInit.clinit()
500 java.security.Provider.get(java.lang.Object)
500 java.util.Collections$SynchronizedMap.get(java.lang.Object)
500 sun.misc.SoftCache.get(java.lang.Object)
500 java.util.AbstractMap.get(java.lang.Object)
500 java.lang.Object.clinit()
500 java.util.LinkedHashMap.get(java.lang.Object)
500 java.util.Hashtable.get(java.lang.Object)
500 java.util.WeakHashMap.get(java.lang.Object)
500 java.text.AttributedString$AttributeMap.get(java.lang.Object)
500 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
500 java.util.TreeMap.get(java.lang.Object)
500 java.util.Collections$SingletonMap.get(java.lang.Object)
500 java.util.Collections$EmptyMap.get(java.lang.Object)
3730 java.lang.Object()
773 java.lang.Object.clinit()
773 774
319 537
319 551
319 320
319 472
319 348
928 929
1380 3399
1380 org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
1380 1375
1380 3350
1380 org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
1380 1080
1380 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
1380 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
1380 1084
1380 1380
1380 org.joda.time.field.DividedDateTimeField.add(long,long)
1380 org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
1380 1079
1380 1058
1380 1376
1380 1081
1380 118
1733 java.lang.StringBuffer.length()
1733 java.lang.StringBuffer.insert(int,java.lang.String)
1733 java.lang.Object.clinit()
1733 java.lang.StringBuffer.clinit()
1733 java.lang.StringBuffer.toString()
1733 org.joda.time.format.FormatUtils.clinit()
1733 1734
1733 java.lang.StringBuffer.setLength(int)
1733 java.lang.StringBuffer.append(java.lang.String)
1733 970
1733 java.lang.StringBuffer.append(char)
1733 java.lang.StringBuffer()
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.StringBuilder()
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.ZoneInfoCompiler$Rule.toString() java.lang.StringBuilder.append(int)
73 java.lang.Object.clinit()
73 org.joda.time.DateTimeFieldType.clinit()
643 java.lang.Object.clinit()
643 java.lang.Throwable.clinit()
643 java.lang.IllegalArgumentException(java.lang.String)
643 645
643 646
643 644
org.joda.time.format.DateTimeParserInternalParser.estimateParsedLength() 703
56 java.lang.Object()
620 java.lang.String.length()
835 org.joda.time.convert.LongConverter.clinit()
835 org.joda.time.convert.ReadablePeriodConverter.clinit()
835 org.joda.time.convert.ReadableIntervalConverter.clinit()
835 java.lang.Object.clinit()
835 org.joda.time.convert.NullConverter.clinit()
835 org.joda.time.convert.ReadableInstantConverter.clinit()
835 849
835 org.joda.time.convert.ReadablePartialConverter.clinit()
835 org.joda.time.convert.CalendarConverter.clinit()
835 org.joda.time.convert.StringConverter.clinit()
835 java.lang.Object()
835 org.joda.time.convert.DateConverter.clinit()
835 org.joda.time.convert.ReadableDurationConverter.clinit()
2118 1986
2118 1987
2118 1998
2118 org.joda.time.format.FormatUtils.clinit()
2118 java.io.StringWriter.append(char)
2118 java.lang.StringBuffer.append(char)
2118 java.io.PrintStream.append(char)
2118 1252
2118 1985
2118 1401
2118 java.io.Writer.append(char)
2118 java.lang.Object.clinit()
2118 java.nio.CharBuffer.append(char)
2118 java.lang.StringBuilder.append(char)
2118 1988
2118 2027
2118 java.io.PrintWriter.append(char)
2118 2788
451 20
451 1040
451 3126
451 790
451 451
715 716
715 java.lang.Object.clinit()
715 org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 1366
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 3401
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.field.DividedDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 3274
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 3275
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 1666
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 1367
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) 118
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
3306 3346
3306 org.joda.time.chrono.GJEraDateTimeField.roundHalfEven(long)
3306 3306
3306 org.joda.time.field.ZeroIsMaxDateTimeField.roundHalfEven(long)
3306 org.joda.time.chrono.BasicSingleEraDateTimeField.roundHalfEven(long)
3306 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundHalfEven(long)
3306 3437
3306 org.joda.time.field.RemainderDateTimeField.roundHalfEven(long)
3306 1432
463 java.lang.Object.clinit()
463 464
463 org.joda.time.chrono.CopticChronology.clinit()
463 org.joda.time.chrono.BasicChronology.clinit()
87 java.lang.Object.clinit()
87 org.joda.time.chrono.BasicChronology.clinit()
2950 2023
2950 java.lang.Object.clinit()
2950 2951
742 755
742 325
742 756
742 744
742 java.lang.String.lastIndexOf(int)
742 747
742 324
742 36
742 752
742 java.lang.StringBuilder.toString()
742 java.lang.StringBuilder.append(int)
742 207
742 748
742 java.lang.Object.clinit()
742 208
742 751
742 326
742 java.lang.StringBuilder.append(char)
742 java.lang.String.substring(int)
742 java.lang.StringBuilder.append(java.lang.String)
742 java.lang.StringBuilder(int)
742 java.lang.Object.getClass()
742 java.lang.Class.getName()
3015 1133
497 java.lang.Object.clinit()
497 215
497 org.joda.time.chrono.ISOChronology.clinit()
497 498
497 org.joda.time.DateTimeZone.clinit()
3119 1136
3119 3431
3119 3119
3119 org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
3119 2925
3119 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial,int[])
3235 3271
3235 327
org.joda.time.chrono.BuddhistChronology.hashCode() 216
org.joda.time.chrono.BuddhistChronology.hashCode() java.lang.String.hashCode()
org.joda.time.chrono.BuddhistChronology.hashCode() 304
org.joda.time.chrono.BuddhistChronology.hashCode() 556
org.joda.time.chrono.BuddhistChronology.hashCode() 217
org.joda.time.chrono.BuddhistChronology.hashCode() 93
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder.append(boolean)
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.Object.clinit()
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder()
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder.append(char)
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder.toString()
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.toString() java.lang.StringBuilder.append(int)
51 java.lang.Object.clinit()
51 org.joda.time.DurationFieldType.clinit()
1430 1149
1430 org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
1430 3302
1430 3341
1430 org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
1430 1455
1430 1593
1430 934
1430 286
1430 1457
1430 org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
1430 org.joda.time.field.DividedDateTimeField.roundFloor(long)
1430 364
1430 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
1430 932
1430 363
1430 1150
1430 1454
1430 3345
1430 org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
1430 1399
1430 3514
1430 365
1430 1398
1430 org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
1430 org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
1430 3496
1430 362
1430 org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
1430 org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
1249 java.lang.String.length()
org.joda.time.chrono.BaseChronology.secondOfDay() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.secondOfDay() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.secondOfDay() 74
org.joda.time.chrono.BaseChronology.secondOfDay() 171
org.joda.time.chrono.BaseChronology.secondOfDay() org.joda.time.chrono.BaseChronology.seconds()
org.joda.time.chrono.BaseChronology.secondOfDay() 1201
1783 sun.security.jca.ProviderList$3.get(int)
1783 java.util.Collections$SynchronizedCollection.size()
1783 java.util.SubList.size()
1783 sun.security.jca.ProviderList$ServiceList.size()
1783 java.util.Collections$CheckedList.get(int)
1783 java.util.Collections$UnmodifiableCollection.size()
1783 java.util.LinkedList.size()
1783 java.util.Collections$SynchronizedList.get(int)
1783 java.util.Collections$CopiesList.get(int)
1783 java.util.Collections$SingletonList.get(int)
1783 java.util.Collections$EmptyList.size()
1783 java.util.Arrays$ArrayList.size()
1783 java.util.ArrayList.get(int)
1783 java.util.Vector.size()
1783 java.lang.Object.clinit()
1783 java.util.Arrays$ArrayList.get(int)
1783 java.util.Collections$CopiesList.size()
1783 sun.security.jca.ProviderList$3.size()
1783 java.util.Vector.get(int)
1783 java.util.ArrayList$SubList.get(int)
1783 java.util.SubList.get(int)
1783 java.util.ArrayList.size()
1783 java.util.LinkedList.get(int)
1783 java.util.Collections$SingletonList.size()
1783 java.util.Collections$CheckedCollection.size()
1783 sun.security.jca.ProviderList$ServiceList.get(int)
1783 org.joda.time.format.PeriodFormatterBuilder$Literal.clinit()
1783 java.util.ArrayList$SubList.size()
1783 1784
1783 java.util.Collections$EmptyList.get(int)
1783 java.util.Collections$UnmodifiableList.get(int)
291 1295
291 294
291 org.joda.time.chrono.IslamicChronology.getAverageMillisPerYearDividedByTwo()
291 1293
291 3263
291 297
291 org.joda.time.chrono.IslamicChronology.getApproxMillisAtEpochDividedByTwo()
291 337
291 332
291 331
291 3287
291 293
291 292
291 1294
75 java.lang.Object.clinit()
75 org.joda.time.DateTimeFieldType.clinit()
156 java.lang.Object.clinit()
156 org.joda.time.DateTimeFieldType.clinit()
442 java.lang.Object.clinit()
442 443
442 java.util.HashMap.clinit()
442 445
442 java.util.HashMap()
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 3399
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1375
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 3350
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1080
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1084
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.field.DividedDateTimeField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1380
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1079
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1376
org.joda.time.chrono.GJChronology$CutoverField.add(long,long) 1081
1319 org.joda.time.field.DelegatedDateTimeField.getAsShortText(long,java.util.Locale)
1319 1319
1319 org.joda.time.chrono.GJChronology$CutoverField.getAsShortText(long,java.util.Locale)
1319 3261
1319 276
1319 1239
1319 3413
1273 417
1273 342
1273 435
1273 455
1273 374
1273 373
1273 3410
1273 960
1273 1281
1273 java.lang.Object.clinit()
1273 429
1273 430
1273 422
1273 997
1273 1273
1273 371
1273 2120
1273 995
1273 338
1273 118
1273 996
1273 379
1273 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1273 421
1273 457
1273 1103
1273 330
1273 992
1273 994
1273 1104
1273 1275
1273 org.joda.time.field.StrictDateTimeField.set(long,int)
1273 991
1273 384
1273 3439
1273 1274
1273 329
1273 3240
1273 3513
1273 2119
1273 334
1273 1106
1273 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1273 290
1273 419
1273 420
1273 1277
1273 993
1273 1379
136 128
136 134
136 359
136 137
136 410
136 448
136 127
136 3213
136 454
136 241
136 479
136 247
136 118
136 244
3508 java.lang.Object.clinit()
3508 3494
3508 86
3508 org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) java.lang.Object.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) java.lang.Throwable.clinit()
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) java.lang.String.equals(java.lang.Object)
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) 3230
org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale) 143
2449 java.lang.StringBuffer.append(java.lang.String)
991 3286
991 291
3175 java.lang.Object.clinit()
3175 3177
3175 java.util.ArrayList.size()
3175 29
3175 org.joda.time.tz.DateTimeZoneBuilder$RuleSet.clinit()
3175 java.util.ArrayList.add(java.lang.Object)
3175 3727
3175 java.util.ArrayList.get(int)
3269 java.lang.Object.clinit()
3269 3270
3269 org.joda.time.chrono.GJChronology.clinit()
397 java.lang.Object.clinit()
397 589
397 587
397 302
397 268
397 588
1931 294
1931 291
290 3286
290 291
2598 java.lang.String.clinit()
2598 java.lang.Object.clinit()
2598 2684
2598 2459
2598 java.lang.String.valueOf(int)
2598 java.lang.Throwable.clinit()
2598 2706
2598 2729
2598 2641
2598 2752
2598 2661
2598 java.lang.IndexOutOfBoundsException(java.lang.String)
3347 java.lang.Object.clinit()
3347 1104
3347 895
3347 374
840 838
1835 java.lang.Object.clinit()
1835 org.joda.time.PeriodType.clinit()
1835 1833
3098 364
1243 java.text.DateFormatSymbols.getMonths()
1243 java.lang.Integer.clinit()
1243 java.text.DateFormatSymbols.getShortMonths()
1243 1244
1243 java.util.TreeMap.clinit()
1243 1249
1243 1245
1243 java.text.DateFormatSymbols.getShortWeekdays()
1243 1247
1243 java.lang.String.clinit()
1243 java.util.Locale.getLanguage()
1243 1248
1243 java.lang.Object.clinit()
1243 java.text.DateFormatSymbols.getWeekdays()
1243 org.joda.time.DateTimeUtils.clinit()
1243 java.lang.String.equals(java.lang.Object)
1243 java.util.TreeMap(java.util.Comparator)
1243 java.text.DateFormatSymbols.getAmPmStrings()
1243 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
1243 1246
1243 org.joda.time.chrono.GJLocaleSymbols.clinit()
1243 java.text.DateFormatSymbols.getEras()
1243 java.lang.Integer.valueOf(int)
1243 java.lang.Object()
3118 java.lang.Object.clinit()
3118 java.lang.System.currentTimeMillis()
3118 java.lang.System.clinit()
785 java.lang.Object.clinit()
785 org.joda.time.DateTimeUtils.clinit()
785 727
785 786
862 java.lang.Object.clinit()
862 java.lang.IndexOutOfBoundsException()
862 java.lang.Throwable.clinit()
862 849
658 java.lang.Object.clinit()
658 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
443 java.lang.Object.clinit()
443 java.util.LinkedHashMap.get(java.lang.Object)
443 java.util.HashMap.containsKey(java.lang.Object)
443 170
443 444
443 java.util.HashMap.put(java.lang.Object,java.lang.Object)
443 org.joda.time.field.DelegatedDurationField.isSupported()
443 java.util.HashMap.get(java.lang.Object)
443 131
443 181
376 351
376 297
376 377
376 337
376 291
376 378
1377 767
1377 org.joda.time.field.StrictDateTimeField.isLenient()
1377 3445
1377 768
1377 763
1377 765
1377 762
1377 1377
1377 org.joda.time.chrono.GJChronology$CutoverField.isLenient()
1377 1378
1377 766
1377 769
1377 org.joda.time.field.LenientDateTimeField.isLenient()
1190 java.lang.Object()
429 1103
429 457
429 330
429 992
429 342
429 994
429 1104
429 991
429 384
429 3240
429 329
429 960
429 3410
429 334
429 429
429 1106
429 290
429 997
429 371
429 995
429 338
429 993
429 996
1774 java.lang.Object()
3398 java.lang.UnsupportedOperationException(java.lang.String)
3398 java.lang.Object.clinit()
3398 java.lang.StringBuilder()
3398 java.lang.Throwable.clinit()
3398 java.lang.StringBuilder.append(java.lang.String)
3398 java.lang.StringBuilder.append(java.lang.Object)
3398 java.lang.StringBuilder.toString()
2433 3714
2433 2443
2433 2515
2433 2518
2433 2433
2433 org.joda.time.format.PeriodFormat$DynamicWordBased.countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)
2433 2435
2433 java.lang.String.length()
2433 2442
2433 2434
2433 2441
3361 3362
1143 org.joda.time.TimeOfDay.clinit()
1143 java.lang.Object.clinit()
495 java.lang.Object.clinit()
495 org.joda.time.chrono.JulianChronology.clinit()
495 org.joda.time.chrono.BasicGJChronology.clinit()
495 org.joda.time.chrono.BasicChronology.clinit()
3288 294
3348 3364
3348 org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifferenceAsLong(long,long)
3348 org.joda.time.field.DelegatedDurationField.getDifferenceAsLong(long,long)
3348 3348
3348 3383
3348 org.joda.time.chrono.LimitChronology$LimitDurationField.getDifferenceAsLong(long,long)
3348 3404
3348 1063
3348 org.joda.time.field.DecoratedDurationField.getDifferenceAsLong(long,long)
3348 org.joda.time.chrono.GJChronology$LinkedDurationField.getDifferenceAsLong(long,long)
3348 1369
32 5
3775 java.lang.Object()
677 505
677 java.lang.Object.clinit()
677 509
677 626
677 643
677 594
677 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
2805 1133
550 474
2788 1403
3434 3406
160 81
160 128
160 java.lang.Throwable.clinit()
160 java.lang.IllegalArgumentException(java.lang.String)
160 134
160 359
160 410
160 448
160 127
160 3213
160 454
160 java.lang.Object.clinit()
160 241
160 479
160 247
160 244
518 524
518 521
518 java.lang.Object.clinit()
518 520
518 519
761 767
761 3445
761 768
761 762
761 org.joda.time.field.DelegatedDateTimeField.getWrappedField()
761 1377
761 1378
761 764
761 java.lang.Object.clinit()
761 org.joda.time.field.StrictDateTimeField.isLenient()
761 763
761 765
761 org.joda.time.chrono.GJChronology$CutoverField.isLenient()
761 766
761 769
761 org.joda.time.field.LenientDateTimeField.isLenient()
592 java.lang.Object.clinit()
592 722
592 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.chrono.BaseChronology.days() 51
org.joda.time.chrono.BaseChronology.days() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.days() 162
org.joda.time.chrono.BaseChronology.days() org.joda.time.DurationFieldType.clinit()
1366 1366
1366 3401
1366 org.joda.time.chrono.GJYearOfEraDateTimeField.getDifference(long,long)
1366 org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifference(long,long)
1366 org.joda.time.field.DividedDateTimeField.getDifference(long,long)
1366 3274
1366 org.joda.time.field.ZeroIsMaxDateTimeField.getDifference(long,long)
1366 3275
1366 1666
1366 org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifference(long,long)
1366 1354
1366 1367
1366 org.joda.time.chrono.GJChronology$CutoverField.getDifference(long,long)
716 515
716 java.lang.Object.clinit()
3760 java.lang.Object.clinit()
3760 java.lang.StringBuilder()
3760 java.lang.StringBuilder.append(java.lang.String)
3760 java.lang.StringBuilder.toString()
3760 java.lang.String.intern()
3760 3761
585 586
org.joda.time.field.RemainderDateTimeField.remainder(long) 3297
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.field.RemainderDateTimeField.remainder(long) 3096
org.joda.time.field.RemainderDateTimeField.remainder(long) 3433
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.field.RemainderDateTimeField.remainder(long) 736
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.field.RemainderDateTimeField.remainder(long) 3278
org.joda.time.field.RemainderDateTimeField.remainder(long) 3098
org.joda.time.field.RemainderDateTimeField.remainder(long) 3097
org.joda.time.field.RemainderDateTimeField.remainder(long) 3351
org.joda.time.field.RemainderDateTimeField.remainder(long) 1656
org.joda.time.field.RemainderDateTimeField.remainder(long) 118
org.joda.time.field.RemainderDateTimeField.remainder(long) 1439
org.joda.time.field.RemainderDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
905 892
905 906
513 java.lang.Object()
393 java.lang.Object.clinit()
393 org.joda.time.DateTimeFieldType.clinit()
393 65
393 143
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1149
org.joda.time.field.DividedDateTimeField.roundFloor(long) 417
org.joda.time.field.DividedDateTimeField.roundFloor(long) 435
org.joda.time.field.DividedDateTimeField.roundFloor(long) 455
org.joda.time.field.DividedDateTimeField.roundFloor(long) 373
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1281
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3341
org.joda.time.field.DividedDateTimeField.roundFloor(long) 430
org.joda.time.field.DividedDateTimeField.roundFloor(long) 422
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1455
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1273
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1593
org.joda.time.field.DividedDateTimeField.roundFloor(long) 2120
org.joda.time.field.DividedDateTimeField.roundFloor(long) 934
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3435
org.joda.time.field.DividedDateTimeField.roundFloor(long) 118
org.joda.time.field.DividedDateTimeField.roundFloor(long) 286
org.joda.time.field.DividedDateTimeField.roundFloor(long) org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
org.joda.time.field.DividedDateTimeField.roundFloor(long) 421
org.joda.time.field.DividedDateTimeField.roundFloor(long) 379
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1457
org.joda.time.field.DividedDateTimeField.roundFloor(long) 992
org.joda.time.field.DividedDateTimeField.roundFloor(long) org.joda.time.field.DividedDateTimeField.roundFloor(long)
org.joda.time.field.DividedDateTimeField.roundFloor(long) 364
org.joda.time.field.DividedDateTimeField.roundFloor(long) org.joda.time.field.StrictDateTimeField.set(long,int)
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1275
org.joda.time.field.DividedDateTimeField.roundFloor(long) 932
org.joda.time.field.DividedDateTimeField.roundFloor(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1150
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1454
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3439
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3513
org.joda.time.field.DividedDateTimeField.roundFloor(long) 2119
org.joda.time.field.DividedDateTimeField.roundFloor(long) 365
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3514
org.joda.time.field.DividedDateTimeField.roundFloor(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
org.joda.time.field.DividedDateTimeField.roundFloor(long) 3496
org.joda.time.field.DividedDateTimeField.roundFloor(long) 419
org.joda.time.field.DividedDateTimeField.roundFloor(long) 420
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1277
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1379
org.joda.time.field.DividedDateTimeField.roundFloor(long) 1648
124 125
1771 java.lang.Object()
3047 2023
3047 3066
3047 3048
441 97
1111 1112
org.joda.time.field.DelegatedDurationField.toString() java.lang.Object.clinit()
org.joda.time.field.DelegatedDurationField.toString() 3378
org.joda.time.field.DelegatedDurationField.toString() java.lang.StringBuilder()
org.joda.time.field.DelegatedDurationField.toString() org.joda.time.field.DelegatedDurationField.toString()
org.joda.time.field.DelegatedDurationField.toString() java.lang.StringBuilder.append(char)
org.joda.time.field.DelegatedDurationField.toString() 3369
org.joda.time.field.DelegatedDurationField.toString() java.lang.StringBuilder.append(java.lang.String)
org.joda.time.field.DelegatedDurationField.toString() java.lang.StringBuilder.append(java.lang.Object)
org.joda.time.field.DelegatedDurationField.toString() org.joda.time.field.UnsupportedDurationField.toString()
org.joda.time.field.DelegatedDurationField.toString() java.lang.StringBuilder.toString()
2790 java.lang.Object.clinit()
2790 2791
2790 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
346 347
346 427
2200 2038
1667 417
1667 336
1667 435
1667 455
1667 373
1667 291
1667 1281
1667 195
1667 340
1667 430
1667 422
1667 1273
1667 2120
1667 552
1667 1666
1667 379
1667 421
1667 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
1667 935
1667 3288
1667 1275
1667 org.joda.time.field.StrictDateTimeField.set(long,int)
1667 3439
1667 3286
1667 3513
1667 2119
1667 475
1667 350
1667 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
1667 419
1667 420
1667 1277
1667 1379
1667 1382
1773 1774
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3297
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3096
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3433
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 736
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3278
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3098
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3097
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 3351
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 1656
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) 1439
org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
846 838
3529 java.lang.Object.clinit()
3529 org.joda.time.DateTimeFieldType.clinit()
3529 121
3529 596
279 1428
279 java.lang.Object.clinit()
279 281
279 280
279 891
279 3167
279 org.joda.time.UTCDateTimeZone.nextTransition(long)
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3454
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3568
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3649
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 917
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 525
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 949
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 942
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 916
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3551
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3655
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3641
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 1054
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 922
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 3490
org.joda.time.format.InternalParserDateTimeParser.parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int) 924
3144 java.lang.Object.clinit()
3144 3145
3144 java.util.Arrays.clinit()
3144 java.util.Arrays.binarySearch(long[],long)
105 java.lang.Object.clinit()
105 108
105 547
105 310
105 org.joda.time.DateTimeFieldType.clinit()
105 106
105 107
105 468
243 123
524 java.lang.StringBuffer.toString()
524 java.nio.CharBuffer.length()
524 java.lang.StringBuffer.length()
524 942
524 java.lang.Object.clinit()
524 3641
524 3490
524 java.lang.StringBuilder.length()
524 924
524 3568
524 3454
524 3649
524 1033
524 java.lang.Throwable.clinit()
524 java.lang.IllegalArgumentException(java.lang.String)
524 org.joda.time.format.FormatUtils.clinit()
524 917
524 java.lang.StringBuilder.toString()
524 525
524 949
524 java.lang.String.toString()
524 916
524 java.nio.CharBuffer.toString()
524 3551
524 3655
524 529
524 1054
524 java.lang.String.length()
524 922
3609 java.lang.Object.clinit()
3609 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
211 java.lang.Object.clinit()
211 125
211 165
211 org.joda.time.chrono.GregorianChronology.clinit()
211 org.joda.time.chrono.BasicGJChronology.clinit()
211 org.joda.time.chrono.BasicChronology.clinit()
3106 java.lang.Object.clinit()
3106 java.lang.StringBuilder()
3106 795
3106 java.lang.StringBuilder.append(java.lang.String)
3106 java.lang.StringBuilder.toString()
org.joda.time.field.DecoratedDurationField.add(long,long) 1076
org.joda.time.field.DecoratedDurationField.add(long,long) 3400
org.joda.time.field.DecoratedDurationField.add(long,long) 1078
org.joda.time.field.DecoratedDurationField.add(long,long) org.joda.time.field.DecoratedDurationField.add(long,long)
org.joda.time.field.DecoratedDurationField.add(long,long) 1077
org.joda.time.field.DecoratedDurationField.add(long,long) org.joda.time.field.DelegatedDurationField.add(long,long)
org.joda.time.field.DecoratedDurationField.add(long,long) 1087
org.joda.time.field.DecoratedDurationField.add(long,long) 1085
org.joda.time.field.DecoratedDurationField.add(long,long) 1164
org.joda.time.field.DecoratedDurationField.add(long,long) 3385
3742 214
3742 342
3742 1414
3742 org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
3742 960
3742 3410
3742 java.lang.Object.clinit()
3742 429
3742 org.joda.time.chrono.ISOChronology.clinit()
3742 3233
3742 1415
3742 997
3742 3495
3742 371
3742 194
3742 995
3742 338
3742 996
3742 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
3742 1103
3742 457
3742 330
3742 992
3742 1104
3742 994
3742 3441
3742 991
3742 384
3742 3240
3742 329
3742 org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
3742 334
3742 1106
3742 290
3742 993
3742 java.util.Locale.clinit()
3742 3231
2665 java.lang.String.clinit()
2665 java.lang.Object.clinit()
2665 java.lang.StringBuilder()
2665 java.lang.String.valueOf(int)
2665 java.lang.StringBuilder.append(java.lang.String)
2665 java.lang.StringBuilder.toString()
2665 1808
6 19
6 3157
6 517
6 490
6 java.lang.Throwable.clinit()
6 486
6 java.lang.IllegalArgumentException(java.lang.String)
6 java.lang.StringBuilder.toString()
6 java.lang.Object.clinit()
6 java.lang.StringBuilder()
6 java.lang.String.equals(java.lang.Object)
6 498
6 java.lang.String.startsWith(java.lang.String)
6 java.lang.StringBuilder.append(java.lang.String)
6 org.joda.time.DateTimeZone.clinit()
6 7
2019 org.joda.time.chrono.BaseChronology.dayOfMonth()
2019 342
2019 184
2019 java.lang.StringBuilder.append(int)
2019 960
2019 3410
2019 195
2019 java.lang.Object.clinit()
2019 429
2019 1971
2019 java.lang.StringBuilder()
2019 997
2019 371
2019 200
2019 995
2019 org.joda.time.chrono.BaseChronology.millisOfDay()
2019 338
2019 996
2019 org.joda.time.chrono.BaseChronology.year()
2019 457
2019 1103
2019 330
2019 992
2019 java.lang.Throwable.clinit()
2019 994
2019 1104
2019 org.joda.time.chrono.BaseChronology.monthOfYear()
2019 991
2019 384
2019 java.lang.StringBuilder.toString()
2019 3240
2019 329
2019 java.lang.IndexOutOfBoundsException(java.lang.String)
2019 334
2019 1106
2019 290
2019 201
2019 java.lang.StringBuilder.append(java.lang.String)
2019 1968
2019 993
294 295
619 603
619 java.lang.Object.clinit()
619 org.joda.time.DateTimeFieldType.clinit()
619 158
3530 java.io.Writer.append(char)
3530 java.lang.Object.clinit()
3530 java.nio.CharBuffer.append(char)
3530 java.lang.StringBuilder.append(char)
3530 org.joda.time.format.FormatUtils.clinit()
3530 java.io.StringWriter.append(char)
3530 java.io.PrintWriter.append(char)
3530 java.lang.StringBuffer.append(char)
3530 java.io.PrintStream.append(char)
3530 3531
3530 489
1085 java.lang.Object.clinit()
1085 897
1085 1086
1700 java.lang.Object.clinit()
1700 1082
1700 1370
1024 java.lang.Object.clinit()
1024 java.lang.StringBuilder()
1024 java.lang.StringBuilder.append(char)
1024 java.lang.StringBuilder.append(java.lang.String)
1024 java.lang.StringBuilder.append(java.lang.Object)
1024 java.lang.StringBuilder.toString()
413 260
1495 1190
425 java.lang.Object.clinit()
425 328
425 org.joda.time.chrono.GJChronology.clinit()
85 87
85 63
85 java.lang.Object.clinit()
85 86
85 org.joda.time.DateTimeFieldType.clinit()
85 88
85 org.joda.time.chrono.BasicChronology.clinit()
700 java.lang.Object.clinit()
700 java.lang.Throwable.clinit()
700 java.lang.IllegalArgumentException(java.lang.String)
3282 java.lang.Object.clinit()
3282 3121
3282 3122
3282 1217
3282 492
3282 org.joda.time.chrono.GJChronology.clinit()
1460 java.lang.Object.clinit()
1460 1461
1460 1242
1460 org.joda.time.chrono.GJLocaleSymbols.clinit()
3470 3470
3470 3524
3470 3486
3470 725
3470 666
3470 638
3470 625
3470 620
3470 3480
3470 3543
3470 606
3470 607
3470 1233
3470 3501
474 73
474 415
474 473
474 62
474 org.joda.time.DateTimeFieldType.clinit()
474 416
474 538
474 77
474 888
474 345
474 75
474 1057
474 1262
474 java.lang.Object.clinit()
474 550
474 103
474 346
474 887
474 3115
77 java.lang.Object.clinit()
77 org.joda.time.DateTimeFieldType.clinit()
100 org.joda.time.chrono.BaseChronology.yearOfCentury()
100 org.joda.time.chrono.BaseChronology.minutes()
100 org.joda.time.chrono.BaseChronology.dayOfMonth()
100 221
100 546
100 167
100 org.joda.time.chrono.BaseChronology.years()
100 187
100 467
100 org.joda.time.chrono.BaseChronology.minuteOfDay()
100 org.joda.time.chrono.BaseChronology.weekOfWeekyear()
100 org.joda.time.chrono.BaseChronology.yearOfEra()
100 200
100 org.joda.time.chrono.BaseChronology.millis()
100 org.joda.time.chrono.BaseChronology.millisOfDay()
100 185
100 org.joda.time.chrono.BaseChronology.dayOfYear()
100 org.joda.time.chrono.BaseChronology.clockhourOfDay()
100 org.joda.time.chrono.BaseChronology.secondOfMinute()
100 org.joda.time.chrono.BaseChronology.minuteOfHour()
100 101
100 323
100 309
100 org.joda.time.chrono.BaseChronology.hourOfDay()
100 org.joda.time.chrono.BaseChronology.weekyear()
100 206
100 org.joda.time.chrono.BaseChronology.centuryOfEra()
100 184
100 org.joda.time.chrono.BaseChronology.secondOfDay()
100 org.joda.time.chrono.BaseChronology.weekyears()
100 org.joda.time.chrono.BaseChronology.days()
100 535
100 161
100 195
100 java.lang.Object.clinit()
100 442
100 189
100 org.joda.time.chrono.BaseChronology.seconds()
100 182
100 org.joda.time.chrono.BaseChronology.year()
100 org.joda.time.chrono.BaseChronology.millisOfSecond()
100 org.joda.time.chrono.BaseChronology.halfdays()
100 org.joda.time.chrono.BaseChronology.months()
100 org.joda.time.chrono.BaseChronology.monthOfYear()
100 773
100 org.joda.time.chrono.BaseChronology.era()
100 org.joda.time.chrono.BaseChronology.hours()
100 org.joda.time.chrono.BaseChronology.halfdayOfDay()
100 org.joda.time.chrono.BaseChronology.weekyearOfCentury()
100 org.joda.time.chrono.BaseChronology.clockhourOfHalfday()
100 759
100 org.joda.time.chrono.BaseChronology.hourOfHalfday()
100 201
100 org.joda.time.chrono.BaseChronology.weeks()
100 org.joda.time.chrono.BaseChronology.dayOfWeek()
100 org.joda.time.chrono.BaseChronology.centuries()
100 399
100 102
3736 3737
3736 java.lang.Object.clinit()
3736 3734
3736 java.io.ObjectOutputStream.writeUTF(java.lang.String)
3736 java.io.DataOutputStream.writeUTF(java.lang.String)
3736 java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(java.lang.String)
633 603
633 java.lang.Object.clinit()
633 73
633 org.joda.time.DateTimeFieldType.clinit()
3402 3398
3454 java.security.Provider.put(java.lang.Object,java.lang.Object)
3454 java.lang.StringBuffer.toString()
3454 org.joda.time.DateTimeFieldType.clinit()
3454 java.util.AbstractMap.containsKey(java.lang.Object)
3454 java.util.Collections$SynchronizedMap.get(java.lang.Object)
3454 sun.misc.SoftCache.containsKey(java.lang.Object)
3454 java.nio.ByteBufferAsCharBufferL.subSequence(int,int)
3454 1223
3454 1324
3454 java.lang.String.equals(java.lang.Object)
3454 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3454 java.lang.String.subSequence(int,int)
3454 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
3454 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
3454 java.util.Collections$CheckedMap.get(java.lang.Object)
3454 java.nio.HeapCharBufferR.subSequence(int,int)
3454 java.nio.CharBuffer.toString()
3454 143
3454 java.util.concurrent.ConcurrentHashMap()
3454 sun.util.PreHashedMap.get(java.lang.Object)
3454 1313
3454 java.util.WeakHashMap.containsKey(java.lang.Object)
3454 java.nio.DirectCharBufferRU.subSequence(int,int)
3454 java.lang.StringBuffer.length()
3454 java.util.AbstractMap.get(java.lang.Object)
3454 java.util.WeakHashMap.get(java.lang.Object)
3454 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
3454 java.util.TreeMap.get(java.lang.Object)
3454 java.util.Collections$CheckedMap.containsKey(java.lang.Object)
3454 java.lang.Integer.valueOf(int)
3454 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
3454 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
3454 java.util.jar.Attributes.get(java.lang.Object)
3454 java.util.jar.Attributes.containsKey(java.lang.Object)
3454 java.lang.StringBuffer.subSequence(int,int)
3454 java.lang.Integer.clinit()
3454 java.util.TreeMap.containsKey(java.lang.Object)
3454 java.nio.ByteBufferAsCharBufferRL.subSequence(int,int)
3454 java.lang.Math.min(int,int)
3454 java.lang.ProcessEnvironment$StringEnvironment.containsKey(java.lang.Object)
3454 java.security.Provider.get(java.lang.Object)
3454 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
3454 java.lang.String.toString()
3454 java.util.LinkedHashMap.get(java.lang.Object)
3454 org.joda.time.format.DateTimeFormatterBuilder$TextField.clinit()
3454 java.util.Collections$UnmodifiableMap.containsKey(java.lang.Object)
3454 org.joda.time.DateTimeZone.clinit()
3454 java.util.Collections$EmptyMap.get(java.lang.Object)
3454 java.lang.StringBuilder.subSequence(int,int)
3454 java.nio.StringCharBuffer.subSequence(int,int)
3454 java.util.concurrent.ConcurrentHashMap(int)
3454 java.nio.ByteBufferAsCharBufferRB.subSequence(int,int)
3454 java.util.Collections$EmptyMap.containsKey(java.lang.Object)
3454 java.nio.CharBuffer.length()
3454 java.util.TreeMap$NavigableSubMap.containsKey(java.lang.Object)
3454 java.nio.DirectCharBufferU.subSequence(int,int)
3454 1410
3454 sun.misc.SoftCache.get(java.lang.Object)
3454 java.util.Locale.getLanguage()
3454 java.util.Collections$UnmodifiableMap.get(java.lang.Object)
3454 java.lang.StringBuilder.length()
3454 java.util.Hashtable.containsKey(java.lang.Object)
3454 java.lang.ProcessEnvironment$StringEnvironment.get(java.lang.Object)
3454 3456
3454 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
3454 java.util.HashMap.get(java.lang.Object)
3454 java.lang.StringBuilder.toString()
3454 java.nio.DirectCharBufferS.subSequence(int,int)
3454 java.nio.DirectCharBufferRS.subSequence(int,int)
3454 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
3454 java.util.Hashtable.get(java.lang.Object)
3454 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
3454 1318
3454 1562
3454 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
3454 1496
3454 java.util.TreeMap$NavigableSubMap.get(java.lang.Object)
3454 java.util.Collections$SynchronizedMap.containsKey(java.lang.Object)
3454 1409
3454 java.lang.Object.clinit()
3454 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
3454 java.util.HashMap.containsKey(java.lang.Object)
3454 java.util.IdentityHashMap.containsKey(java.lang.Object)
3454 java.lang.String.toUpperCase(java.util.Locale)
3454 3455
3454 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
3454 java.lang.Math.clinit()
3454 java.util.Collections$SingletonMap.get(java.lang.Object)
3454 java.lang.Boolean.clinit()
3454 java.util.IdentityHashMap.get(java.lang.Object)
3454 java.util.Collections$SingletonMap.containsKey(java.lang.Object)
3454 java.nio.HeapCharBuffer.subSequence(int,int)
3454 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
3454 java.text.AttributedString$AttributeMap.get(java.lang.Object)
3454 java.lang.Integer.intValue()
3454 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3454 java.lang.String.toLowerCase(java.util.Locale)
3454 java.lang.String.length()
3454 java.util.concurrent.ConcurrentHashMap.clinit()
3454 java.nio.ByteBufferAsCharBufferB.subSequence(int,int)
3454 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
3454 java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
428 java.lang.Object.clinit()
428 org.joda.time.DateTimeFieldType.clinit()
428 java.lang.Integer.clinit()
428 java.lang.Throwable.clinit()
428 106
428 java.lang.Integer.valueOf(int)
428 1023
2501 java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
2501 java.lang.Object.clinit()
2501 org.joda.time.format.PeriodFormat.clinit()
2501 1803
2501 2514
2501 java.util.concurrent.ConcurrentHashMap.putIfAbsent(java.lang.Object,java.lang.Object)
2501 2502
121 java.lang.Object.clinit()
121 org.joda.time.DateTimeFieldType.clinit()
org.joda.time.DateTimeZone$LazyInit.clinit() java.lang.Object.clinit()
org.joda.time.DateTimeZone$LazyInit.clinit() 503
org.joda.time.DateTimeZone$LazyInit.clinit() 502
org.joda.time.DateTimeZone$LazyInit.clinit() org.joda.time.DateTimeZone$LazyInit.clinit()
org.joda.time.DateTimeZone.clinit() org.joda.time.UTCDateTimeZone.clinit()
org.joda.time.DateTimeZone.clinit() java.lang.Object.clinit()
org.joda.time.DateTimeZone.clinit() java.util.concurrent.atomic.AtomicReference.clinit()
org.joda.time.DateTimeZone.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.DateTimeZone.clinit() java.util.concurrent.atomic.AtomicReference()
1833 java.lang.Object.clinit()
1833 org.joda.time.PeriodType.clinit()
1833 567
1833 45
1833 org.joda.time.DurationFieldType.clinit()
788 778
788 301
788 303
788 791
788 1936
788 782
788 java.lang.Object.hashCode()
788 org.joda.time.chrono.GregorianChronology.hashCode()
788 1385
788 org.joda.time.chrono.BuddhistChronology.hashCode()
788 793
788 org.joda.time.chrono.IslamicChronology.hashCode()
788 779
788 org.joda.time.chrono.JulianChronology.hashCode()
788 org.joda.time.chrono.EthiopicChronology.hashCode()
788 103
788 788
org.joda.time.field.DividedDateTimeField.remainder(long) 3297
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.field.ZeroIsMaxDateTimeField.remainder(long)
org.joda.time.field.DividedDateTimeField.remainder(long) 3096
org.joda.time.field.DividedDateTimeField.remainder(long) 3433
org.joda.time.field.DividedDateTimeField.remainder(long) 992
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.remainder(long)
org.joda.time.field.DividedDateTimeField.remainder(long) 736
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.chrono.GJYearOfEraDateTimeField.remainder(long)
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.remainder(long)
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.field.RemainderDateTimeField.remainder(long)
org.joda.time.field.DividedDateTimeField.remainder(long) 3278
org.joda.time.field.DividedDateTimeField.remainder(long) 3098
org.joda.time.field.DividedDateTimeField.remainder(long) 3097
org.joda.time.field.DividedDateTimeField.remainder(long) 3351
org.joda.time.field.DividedDateTimeField.remainder(long) 1277
org.joda.time.field.DividedDateTimeField.remainder(long) 1656
org.joda.time.field.DividedDateTimeField.remainder(long) 118
org.joda.time.field.DividedDateTimeField.remainder(long) 1439
org.joda.time.field.DividedDateTimeField.remainder(long) org.joda.time.field.DividedDateTimeField.remainder(long)
514 515
514 java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.yearOfEra() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.yearOfEra() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.chrono.BaseChronology.yearOfEra() 112
org.joda.time.chrono.BaseChronology.yearOfEra() 1201
org.joda.time.chrono.BaseChronology.yearOfEra() 179
org.joda.time.chrono.BaseChronology.yearOfEra() org.joda.time.chrono.BaseChronology.years()
2803 1145
234 61
234 java.lang.Object.clinit()
234 org.joda.time.DurationFieldType.clinit()
507 java.lang.Object.clinit()
507 java.lang.IllegalArgumentException()
507 java.lang.Throwable.clinit()
507 java.lang.Object()
org.joda.time.chrono.BaseChronology.millis() 61
org.joda.time.chrono.BaseChronology.millis() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.millis() 162
org.joda.time.chrono.BaseChronology.millis() org.joda.time.DurationFieldType.clinit()
3255 1347
3255 org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
3255 1450
3255 3281
3255 382
3255 1404
3255 3425
3255 3122
3255 3121
3255 1058
3255 1333
3255 118
3255 3255
1074 1075
1074 570
1074 1719
3380 2151
3380 org.joda.time.field.DelegatedDurationField.equals(java.lang.Object)
3380 3380
3380 2158
3380 java.lang.Object.equals(java.lang.Object)
3380 225
3380 827
3380 224
3380 1322
3096 736
1736 970
3503 java.io.PrintStream.append(java.lang.CharSequence)
3503 org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.io.Writer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)
3503 java.lang.Object.clinit()
3503 java.nio.CharBuffer.append(java.lang.CharSequence)
3503 java.lang.StringBuffer(int)
3503 3502
3503 java.lang.StringBuffer.clinit()
3503 java.lang.StringBuffer.append(java.lang.CharSequence)
3503 java.io.StringWriter.append(java.lang.CharSequence)
3503 java.lang.StringBuilder.append(java.lang.CharSequence)
3503 java.io.Writer.append(java.lang.CharSequence)
3503 java.io.PrintWriter.append(java.lang.CharSequence)
3503 3501
79 java.lang.Object.clinit()
79 org.joda.time.DateTimeFieldType.clinit()
3430 3406
712 java.lang.Object.clinit()
712 org.joda.time.DateTimeFieldType.clinit()
712 77
712 636
3525 java.io.PrintStream.append(java.lang.CharSequence)
3525 java.nio.CharBuffer.append(java.lang.CharSequence)
3525 java.lang.StringBuffer.append(java.lang.CharSequence)
3525 java.io.StringWriter.append(java.lang.CharSequence)
3525 36
3525 java.lang.StringBuilder.append(java.lang.CharSequence)
3525 java.io.Writer.append(java.lang.CharSequence)
3525 java.io.PrintWriter.append(java.lang.CharSequence)
721 715
721 505
721 java.lang.Object.clinit()
721 695
721 705
721 509
721 643
721 709
721 699
721 600
721 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
3683 3684
101 java.lang.Object()
3231 java.lang.Object.clinit()
3231 3232
3231 1242
3231 org.joda.time.chrono.GJLocaleSymbols.clinit()
3231 1281
418 379
418 421
418 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
418 417
418 435
418 1275
418 org.joda.time.field.StrictDateTimeField.set(long,int)
418 455
418 3439
418 3513
418 373
418 2119
418 1281
418 430
418 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
418 422
418 419
418 1273
418 420
418 2120
418 1277
418 1379
34 java.lang.Object.clinit()
34 35
34 org.joda.time.tz.CachedDateTimeZone.clinit()
34 org.joda.time.DateTimeZone.clinit()
62 java.lang.Object.clinit()
62 org.joda.time.DateTimeFieldType.clinit()
1135 org.joda.time.chrono.BaseChronology.millisOfSecond()
1135 org.joda.time.chrono.BaseChronology.hourOfDay()
1135 java.lang.Throwable.clinit()
1135 org.joda.time.chrono.BaseChronology.secondOfMinute()
1135 java.lang.StringBuilder.toString()
1135 java.lang.StringBuilder.append(int)
1135 java.lang.IndexOutOfBoundsException(java.lang.String)
1135 java.lang.Object.clinit()
1135 187
1135 org.joda.time.chrono.BaseChronology.minuteOfHour()
1135 java.lang.StringBuilder()
1135 189
1135 java.lang.StringBuilder.append(java.lang.String)
1135 185
1135 182
2637 195
2637 java.lang.Object.clinit()
2637 java.lang.StringBuilder()
2637 org.joda.time.chrono.BaseChronology.dayOfMonth()
2637 java.lang.Throwable.clinit()
2637 org.joda.time.chrono.BaseChronology.monthOfYear()
2637 200
2637 java.lang.StringBuilder.append(java.lang.String)
2637 java.lang.StringBuilder.toString()
2637 java.lang.StringBuilder.append(int)
2637 java.lang.IndexOutOfBoundsException(java.lang.String)
99 java.lang.Object()
2647 java.lang.Object.clinit()
2647 org.joda.time.YearMonth.clinit()
org.joda.time.LocalDate.clinit() 51
org.joda.time.LocalDate.clinit() java.util.TreeSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() 60
org.joda.time.LocalDate.clinit() java.util.HashSet()
org.joda.time.LocalDate.clinit() java.util.JumboEnumSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.HashSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() 54
org.joda.time.LocalDate.clinit() java.util.HashSet.clinit()
org.joda.time.LocalDate.clinit() java.lang.Object.clinit()
org.joda.time.LocalDate.clinit() org.joda.time.LocalDate.clinit()
org.joda.time.LocalDate.clinit() 52
org.joda.time.LocalDate.clinit() java.util.Hashtable$EntrySet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() 57
org.joda.time.LocalDate.clinit() javax.security.auth.Subject$SecureSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.Collections$SynchronizedCollection.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.Collections$SetFromMap.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.RegularEnumSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() javax.security.auth.Subject$ClassSet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.AbstractCollection.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.Collections$CheckedMap$CheckedEntrySet.add(java.lang.Object)
org.joda.time.LocalDate.clinit() org.joda.time.DurationFieldType.clinit()
org.joda.time.LocalDate.clinit() 59
org.joda.time.LocalDate.clinit() java.util.Collections$UnmodifiableCollection.add(java.lang.Object)
org.joda.time.LocalDate.clinit() java.util.Collections$CheckedCollection.add(java.lang.Object)
org.joda.time.LocalDate.clinit() sun.nio.ch.Util$2.add(java.lang.Object)
org.joda.time.LocalDate.clinit() 58
3548 java.lang.Object.clinit()
3548 java.text.DateFormat.getDateTimeInstance(int,int,java.util.Locale)
3548 java.lang.StringBuilder()
3548 java.lang.Throwable.clinit()
3548 java.text.DateFormat.getTimeInstance(int,java.util.Locale)
3548 java.lang.IllegalArgumentException(java.lang.String)
3548 java.lang.StringBuilder.append(java.lang.String)
3548 java.lang.StringBuilder.append(java.lang.Object)
3548 java.lang.StringBuilder.toString()
3548 java.text.DateFormat.getDateInstance(int,java.util.Locale)
3548 java.text.SimpleDateFormat.toPattern()
2616 java.lang.String.clinit()
2616 java.lang.Object.clinit()
2616 java.lang.StringBuilder()
2616 java.lang.String.valueOf(int)
2616 java.lang.StringBuilder.append(java.lang.String)
2616 java.lang.StringBuilder.toString()
2616 1808
648 599
648 505
648 java.lang.Object.clinit()
648 509
648 643
648 594
648 612
648 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
757 java.lang.Object.clinit()
757 java.lang.Throwable.clinit()
757 java.lang.IllegalArgumentException(java.lang.String)
757 758
3733 sun.util.PreHashedMap$1$1.next()
3733 java.util.HashSet.size()
3733 javax.security.auth.Subject$SecureSet$1.next()
3733 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.next()
3733 java.util.AbstractMap$1$1.next()
3733 java.io.ObjectOutputStream.writeInt(int)
3733 sun.net.www.MessageHeader$HeaderIterator.next()
3733 sun.util.PreHashedMap$2$1.next()
3733 java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator.next()
3733 java.io.DataOutputStream.writeBoolean(boolean)
3733 java.util.HashSet.clinit()
3733 sun.net.www.HeaderParser$ParserIterator.hasNext()
3733 java.util.concurrent.ArrayBlockingQueue$Itr.next()
3733 java.lang.String.equals(java.lang.Object)
3733 java.lang.ProcessEnvironment$StringKeySet$1.next()
3733 java.util.TreeMap$DescendingKeyIterator.next()
3733 java.util.TreeMap$PrivateEntryIterator.hasNext()
3733 java.util.JumboEnumSet$EnumSetIterator.next()
3733 java.util.LinkedList$ListItr.hasNext()
3733 sun.misc.Service$LazyIterator.next()
3733 java.util.ServiceLoader$LazyIterator.next()
3733 java.io.DataOutputStream.writeInt(int)
3733 java.util.Scanner.hasNext()
3733 java.util.WeakHashMap$ValueIterator.next()
3733 sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext()
3733 java.io.ObjectOutputStream.writeBoolean(boolean)
3733 java.util.IdentityHashMap$EntryIterator.next()
3733 java.util.TreeMap$NavigableSubMap$SubMapKeyIterator.next()
3733 java.util.concurrent.ConcurrentHashMap$ValueIterator.next()
3733 java.util.HashSet.iterator()
3733 java.util.LinkedList$DescendingIterator.hasNext()
3733 java.util.Hashtable$Enumerator.hasNext()
3733 java.util.JumboEnumSet$EnumSetIterator.hasNext()
3733 java.util.concurrent.ConcurrentHashMap$KeyIterator.next()
3733 java.util.RegularEnumSet$EnumSetIterator.next()
3733 java.util.LinkedList$DescendingIterator.next()
3733 java.util.WeakHashMap$KeyIterator.next()
3733 java.util.Collections$CheckedMap$CheckedEntrySet$1.next()
3733 sun.util.PreHashedMap$2$1.hasNext()
3733 java.io.ObjectOutputStream$BlockDataOutputStream.writeInt(int)
3733 java.util.SubList$1.next()
3733 java.util.Collections$EmptyIterator.next()
3733 java.util.LinkedHashMap$ValueIterator.next()
3733 java.util.ServiceLoader$1.hasNext()
3733 java.util.HashSet()
3733 java.util.TreeMap$NavigableSubMap$SubMapEntryIterator.next()
3733 java.util.TreeMap$ValueIterator.next()
3733 java.util.WeakHashMap$HashIterator.hasNext()
3733 java.util.IdentityHashMap$KeyIterator.next()
3733 java.util.LinkedHashMap$EntryIterator.next()
3733 java.util.AbstractMap$2$1.hasNext()
3733 java.util.IdentityHashMap$ValueIterator.next()
3733 java.io.ObjectOutputStream.writeByte(int)
3733 sun.nio.fs.AbstractPath$1.hasNext()
3733 java.lang.ProcessEnvironment$StringValues$1.hasNext()
3733 java.util.AbstractMap$1$1.hasNext()
3733 3735
3733 java.util.TreeMap$EntryIterator.next()
3733 java.util.ArrayDeque$DescendingIterator.hasNext()
3733 java.util.Hashtable$Enumerator.next()
3733 java.util.HashMap$EntryIterator.next()
3733 java.io.ObjectOutputStream.writeUTF(java.lang.String)
3733 java.util.Collections$CheckedMap$CheckedEntrySet$1.hasNext()
3733 javax.security.auth.Subject$SecureSet$1.hasNext()
3733 java.lang.String.clinit()
3733 java.util.Collections$UnmodifiableList$1.hasNext()
3733 java.util.ArrayList$Itr.hasNext()
3733 java.util.Collections$UnmodifiableList$1.next()
3733 java.nio.charset.Charset$1.hasNext()
3733 java.io.ObjectOutputStream$BlockDataOutputStream.writeShort(int)
3733 java.util.Collections$UnmodifiableCollection$1.next()
3733 sun.nio.cs.FastCharsetProvider$1.next()
3733 java.util.concurrent.ArrayBlockingQueue$Itr.hasNext()
3733 3734
3733 java.util.Vector$Itr.next()
3733 java.util.Collections$CheckedList$1.hasNext()
3733 java.util.TreeMap$KeyIterator.next()
3733 java.util.ArrayList$SubList$1.next()
3733 java.util.SubList$1.hasNext()
3733 java.io.DataOutputStream.writeByte(int)
3733 java.lang.ProcessEnvironment$StringKeySet$1.hasNext()
3733 java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(int)
3733 java.util.HashMap$ValueIterator.next()
3733 java.util.Collections$UnmodifiableCollection$1.hasNext()
3733 sun.misc.SoftCache$EntrySet$1.hasNext()
3733 java.util.RegularEnumSet$EnumSetIterator.hasNext()
3733 java.util.HashMap$KeyIterator.next()
3733 sun.misc.SoftCache$EntrySet$1.next()
3733 sun.security.jca.ProviderList$ServiceList$1.hasNext()
3733 java.util.ArrayList$SubList$1.hasNext()
3733 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.next()
3733 java.util.Collections$1.hasNext()
3733 java.util.ArrayList$Itr.next()
3733 java.io.DataOutputStream.writeUTF(java.lang.String)
3733 java.util.concurrent.ConcurrentHashMap$HashIterator.hasNext()
3733 java.io.ObjectOutputStream.writeShort(int)
3733 java.lang.UnsupportedOperationException(java.lang.String)
3733 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.hasNext()
3733 java.util.TreeMap$NavigableSubMap$DescendingSubMapKeyIterator.next()
3733 java.util.IdentityHashMap$IdentityHashMapIterator.hasNext()
3733 java.util.AbstractMap$2$1.next()
3733 java.lang.ProcessEnvironment$StringEntrySet$1.hasNext()
3733 java.io.ObjectOutputStream$BlockDataOutputStream.writeBoolean(boolean)
3733 java.util.ServiceLoader$1.next()
3733 sun.net.www.HeaderParser$ParserIterator.next()
3733 java.util.concurrent.LinkedBlockingDeque$AbstractItr.next()
3733 sun.nio.cs.FastCharsetProvider$1.hasNext()
3733 sun.nio.fs.AbstractPath$1.next()
3733 sun.security.jca.ProviderList$ServiceList$1.next()
3733 java.util.LinkedList$ListItr.next()
3733 java.util.Collections$EmptyIterator.hasNext()
3733 java.util.ServiceLoader$LazyIterator.hasNext()
3733 java.util.Scanner.next()
3733 java.util.Vector$Itr.hasNext()
3733 java.util.ArrayDeque$DeqIterator.next()
3733 java.util.Collections$CheckedCollection$1.hasNext()
3733 java.util.HashSet.add(java.lang.Object)
3733 java.util.ArrayDeque$DescendingIterator.next()
3733 java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(java.lang.String)
3733 java.util.concurrent.ConcurrentHashMap$EntryIterator.next()
3733 java.lang.Object.clinit()
3733 java.io.DataOutputStream.writeShort(int)
3733 java.util.Collections$CheckedCollection$1.next()
3733 java.util.LinkedHashMap$KeyIterator.next()
3733 java.util.AbstractList$Itr.next()
3733 java.util.concurrent.LinkedBlockingQueue$Itr.hasNext()
3733 java.util.Collections$CheckedList$1.next()
3733 java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue$Itr.hasNext()
3733 sun.misc.Service$LazyIterator.hasNext()
3733 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next()
3733 java.nio.charset.Charset$1.next()
3733 sun.net.www.MessageHeader$HeaderIterator.hasNext()
3733 java.util.concurrent.ConcurrentLinkedQueue$Itr.hasNext()
3733 java.util.Collections$1.next()
3733 sun.nio.fs.UnixFileSystem$FileStoreIterator.next()
3733 java.lang.Throwable.clinit()
3733 java.util.concurrent.ConcurrentLinkedQueue$Itr.next()
3733 java.util.concurrent.LinkedBlockingDeque$AbstractItr.hasNext()
3733 java.util.ArrayDeque$DeqIterator.hasNext()
3733 java.util.LinkedHashMap$LinkedHashIterator.hasNext()
3733 java.util.concurrent.LinkedBlockingQueue$Itr.next()
3733 java.util.TreeMap$NavigableSubMap$SubMapIterator.hasNext()
3733 java.lang.ProcessEnvironment$StringEntrySet$1.next()
3733 sun.util.PreHashedMap$1$1.hasNext()
3733 sun.nio.fs.UnixDirectoryStream$UnixDirectoryIterator.hasNext()
3733 java.util.AbstractList$Itr.hasNext()
3733 java.util.HashMap$HashIterator.hasNext()
3733 java.util.WeakHashMap$EntryIterator.next()
3733 java.lang.ProcessEnvironment$StringValues$1.next()
301 303
301 791
301 1936
301 782
301 java.lang.Object.hashCode()
301 org.joda.time.chrono.GregorianChronology.hashCode()
301 1385
301 302
301 org.joda.time.chrono.BuddhistChronology.hashCode()
301 793
301 588
301 org.joda.time.chrono.IslamicChronology.hashCode()
301 org.joda.time.chrono.JulianChronology.hashCode()
301 org.joda.time.chrono.EthiopicChronology.hashCode()
301 587
301 268
301 788
21 java.security.Provider.put(java.lang.Object,java.lang.Object)
21 java.util.zip.ZipFile$ZipFileInflaterInputStream.close()
21 11
21 java.io.BufferedInputStream.close()
21 java.util.Hashtable.remove(java.lang.Object)
21 java.util.TreeMap$NavigableSubMap.remove(java.lang.Object)
21 java.util.jar.Attributes.remove(java.lang.Object)
21 sun.nio.ch.ChannelInputStream.close()
21 java.security.Provider.remove(java.lang.Object)
21 22
21 java.io.ObjectInputStream$BlockDataInputStream.close()
21 java.util.HashMap.put(java.lang.Object,java.lang.Object)
21 java.util.Collections$UnmodifiableMap.remove(java.lang.Object)
21 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
21 sun.net.www.http.HttpCaptureInputStream.close()
21 java.util.jar.Manifest$FastInputStream.close()
21 java.io.FilterInputStream.close()
21 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
21 java.io.ByteArrayInputStream.close()
21 java.util.zip.ZipInputStream.close()
21 java.util.TreeMap.remove(java.lang.Object)
21 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
21 sun.net.www.http.KeepAliveStream.close()
21 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
21 java.util.Collections$SynchronizedMap.remove(java.lang.Object)
21 java.lang.ProcessEnvironment$StringEnvironment.remove(java.lang.Object)
21 java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)
21 java.io.InputStream.close()
21 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
21 java.lang.UNIXProcess$ProcessPipeInputStream.close()
21 sun.net.www.protocol.http.HttpURLConnection$ErrorStream.close()
21 java.io.FileInputStream.close()
21 java.net.SocketInputStream.close()
21 java.io.ObjectInputStream$PeekInputStream.close()
21 java.util.zip.ZipFile$ZipFileInputStream.close()
21 java.lang.Object.clinit()
21 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
21 sun.net.www.MeteredStream.close()
21 java.util.HashMap.remove(java.lang.Object)
21 java.io.ObjectInputStream.close()
21 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
21 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
21 java.util.zip.InflaterInputStream.close()
21 sun.net.www.protocol.http.HttpURLConnection$HttpInputStream.close()
21 sun.misc.SoftCache.remove(java.lang.Object)
21 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
21 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
21 java.util.Collections$CheckedMap.remove(java.lang.Object)
21 java.util.WeakHashMap.remove(java.lang.Object)
21 java.util.jar.JarVerifier$VerifierStream.close()
21 java.io.PushbackInputStream.close()
21 java.util.AbstractMap.remove(java.lang.Object)
21 java.lang.ref.SoftReference(java.lang.Object)
21 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
21 java.nio.channels.Channels$2.close()
21 sun.net.www.http.ChunkedInputStream.close()
21 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
21 java.util.IdentityHashMap.remove(java.lang.Object)
21 org.joda.time.tz.ZoneInfoProvider.uncaughtException(java.lang.Exception)
21 java.lang.ref.Reference.clinit()
21 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
21 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
1803 java.lang.Object()
776 750
776 780
776 770
776 754
776 776
776 java.lang.StringBuilder.toString()
776 777
776 738
776 741
776 java.lang.Object.clinit()
776 org.joda.time.DateTimeZone$LazyInit$1.toString()
776 java.lang.StringBuilder()
776 739
776 java.lang.StringBuilder.append(char)
776 103
776 746
776 java.lang.StringBuilder.append(java.lang.String)
776 743
776 745
894 902
894 214
894 417
894 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
894 3396
894 895
894 435
894 1112
894 1226
894 455
894 184
894 373
894 1281
894 java.lang.Object.clinit()
894 430
894 org.joda.time.chrono.ISOChronology.clinit()
894 422
894 903
894 1273
894 200
894 2120
894 1472
894 379
894 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
894 421
894 898
894 370
894 org.joda.time.field.StrictDateTimeField.set(long,int)
894 1275
894 1350
894 3439
894 1458
894 3513
894 2119
894 org.joda.time.field.DividedDateTimeField.add(long,int)
894 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
894 201
894 900
894 3347
894 419
894 420
894 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
894 1277
894 3268
894 1379
1807 java.lang.String.clinit()
1807 java.lang.Object.clinit()
1807 java.lang.String.valueOf(int)
1807 java.lang.Throwable.clinit()
1807 java.lang.IndexOutOfBoundsException(java.lang.String)
1807 1808
827 3236
827 java.lang.String.equals(java.lang.Object)
390 481
390 3394
390 255
390 270
390 460
390 237
390 252
390 240
390 390
390 257
390 446
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1667
org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long) 118
339 340
339 336
339 3288
339 3286
339 291
339 1382
3197 3731
3326 874
3326 875
3326 1682
3326 1683
3326 876
3326 java.lang.StringBuilder.toString()
3326 1704
3326 1982
3326 864
3326 java.lang.Object.clinit()
3326 java.lang.StringBuilder()
3326 863
3326 java.lang.StringBuilder.append(java.lang.String)
3326 861
3326 java.lang.Class.getName()
722 java.lang.Object.clinit()
722 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1114 591
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 1347
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long)
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 1450
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 3121
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 3281
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 1333
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 382
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 1404
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 3425
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 3122
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 118
org.joda.time.field.ZeroIsMaxDateTimeField.getMaximumValue(long) 3255
org.joda.time.PeriodType.clinit() java.lang.Object.clinit()
org.joda.time.PeriodType.clinit() org.joda.time.PeriodType.clinit()
org.joda.time.PeriodType.clinit() java.util.HashMap.clinit()
org.joda.time.PeriodType.clinit() java.util.HashMap(int)
16 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
16 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
16 java.security.Provider.put(java.lang.Object,java.lang.Object)
16 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
16 java.lang.Throwable.clinit()
16 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
16 java.io.IOException(java.lang.String)
16 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
16 java.lang.String.intern()
16 java.lang.String.clinit()
16 java.lang.Object.clinit()
16 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
16 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
16 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
16 java.io.DataInputStream.readUTF()
16 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
16 java.io.DataInputStream.readUnsignedShort()
16 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
16 java.util.HashMap.put(java.lang.Object,java.lang.Object)
16 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
16 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
16 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
16 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
org.joda.time.DateTimeFieldType.clinit() 61
org.joda.time.DateTimeFieldType.clinit() 51
org.joda.time.DateTimeFieldType.clinit() 48
org.joda.time.DateTimeFieldType.clinit() org.joda.time.DateTimeFieldType.clinit()
org.joda.time.DateTimeFieldType.clinit() 60
org.joda.time.DateTimeFieldType.clinit() 49
org.joda.time.DateTimeFieldType.clinit() 50
org.joda.time.DateTimeFieldType.clinit() 55
org.joda.time.DateTimeFieldType.clinit() org.joda.time.DurationFieldType.clinit()
org.joda.time.DateTimeFieldType.clinit() 54
org.joda.time.DateTimeFieldType.clinit() 59
org.joda.time.DateTimeFieldType.clinit() java.lang.Object.clinit()
org.joda.time.DateTimeFieldType.clinit() 52
org.joda.time.DateTimeFieldType.clinit() 45
org.joda.time.DateTimeFieldType.clinit() 57
org.joda.time.DateTimeFieldType.clinit() 58
2030 735
2030 2046
2030 1096
2030 1134
2030 1968
2030 288
2030 1217
710 java.lang.Object.clinit()
710 700
710 646
710 701
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 3399
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.BasicWeekyearDateTimeField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1375
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 3350
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1080
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1084
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.field.DividedDateTimeField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1380
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) org.joda.time.chrono.GJChronology$CutoverField.add(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1079
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1376
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 1081
org.joda.time.chrono.GJYearOfEraDateTimeField.add(long,long) 118
1212 2048
1212 1213
1212 3292
2188 289
2188 1457
2188 1149
2188 org.joda.time.chrono.BaseChronology.dayOfMonth()
2188 org.joda.time.field.DividedDateTimeField.roundFloor(long)
2188 271
2188 364
2188 932
2188 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
2188 1150
2188 1454
2188 288
2188 3341
2188 java.lang.Object.clinit()
2188 195
2188 365
2188 3514
2188 org.joda.time.LocalDate.clinit()
2188 3496
2188 1455
2188 1593
2188 934
2188 3435
2188 286
2188 1648
726 java.lang.Object.clinit()
726 org.joda.time.DateTimeUtils.clinit()
726 729
726 727
726 728
3192 java.lang.Object.clinit()
3192 java.util.ArrayList.clinit()
3192 java.util.ArrayList(java.util.Collection)
3192 java.lang.Object()
27 java.io.ObjectInputStream.readUTF()
27 25
27 java.lang.Object.clinit()
27 30
27 28
27 java.io.DataInputStream.readUTF()
27 java.io.ObjectInputStream$BlockDataInputStream.readUTF()
2599 164
2599 2684
2599 2459
2599 java.lang.Object.hashCode()
2599 2706
2599 2729
2599 2641
2599 2752
2599 2661
2599 1808
552 3287
3187 3136
1419 org.joda.time.field.DelegatedDateTimeField.getAsText(int,java.util.Locale)
1419 3416
1419 3259
1419 3509
1419 1440
1419 1316
1419 1417
1419 3279
1419 1460
1419 1419
233 68
org.joda.time.chrono.CopticChronology.clinit() java.util.concurrent.ConcurrentHashMap()
org.joda.time.chrono.CopticChronology.clinit() java.lang.Object.clinit()
org.joda.time.chrono.CopticChronology.clinit() 393
org.joda.time.chrono.CopticChronology.clinit() org.joda.time.chrono.CopticChronology.clinit()
org.joda.time.chrono.CopticChronology.clinit() org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.CopticChronology.clinit() java.util.concurrent.ConcurrentHashMap.clinit()
org.joda.time.chrono.CopticChronology.clinit() org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.chrono.CopticChronology.clinit() 463
364 1149
364 1457
364 org.joda.time.field.DividedDateTimeField.roundFloor(long)
364 366
364 364
364 932
364 org.joda.time.chrono.BasicSingleEraDateTimeField.roundFloor(long)
364 1150
364 197
364 1454
364 3341
364 365
364 3514
364 3496
364 1455
364 1593
364 934
364 3435
364 286
364 1648
753 java.lang.Object.clinit()
753 org.joda.time.chrono.IslamicChronology.clinit()
753 org.joda.time.chrono.BasicChronology.clinit()
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 3233
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 1415
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 1414
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 3495
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 3441
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.chrono.LimitChronology$LimitDateTimeField.set(long,java.lang.String,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) 3231
org.joda.time.field.DelegatedDateTimeField.set(long,java.lang.String,java.util.Locale) org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,java.lang.String,java.util.Locale)
650 505
650 java.lang.Object.clinit()
650 509
650 643
650 614
650 616
650 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
650 622
911 902
911 214
911 417
911 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
911 3396
911 895
911 435
911 1112
911 1226
911 455
911 184
911 912
911 373
911 1281
911 java.lang.Object.clinit()
911 430
911 org.joda.time.chrono.ISOChronology.clinit()
911 422
911 903
911 1273
911 200
911 2120
911 1472
911 379
911 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
911 421
911 370
911 org.joda.time.field.StrictDateTimeField.set(long,int)
911 1275
911 1350
911 3439
911 1458
911 3513
911 2119
911 org.joda.time.field.DividedDateTimeField.add(long,int)
911 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
911 201
911 900
911 3347
911 419
911 420
911 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
911 1277
911 3268
911 1379
695 509
695 626
695 643
695 594
695 612
695 699
695 614
695 707
695 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
695 599
695 java.lang.Object.clinit()
695 505
695 705
695 696
695 616
695 622
326 325
3496 1381
3496 991
3496 376
3496 3290
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 1667
org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long) 118
3761 java.lang.Object.clinit()
3761 30
3151 java.lang.Object.clinit()
3151 18
3151 3156
3151 org.joda.time.DateTimeZone.clinit()
3151 7
org.joda.time.field.DelegatedDurationField.getUnitMillis() 231
org.joda.time.field.DelegatedDurationField.getUnitMillis() 230
org.joda.time.field.DelegatedDurationField.getUnitMillis() 70
org.joda.time.field.DelegatedDurationField.getUnitMillis() org.joda.time.field.DelegatedDurationField.getUnitMillis()
org.joda.time.field.DelegatedDurationField.getUnitMillis() 239
org.joda.time.field.DelegatedDurationField.getUnitMillis() 246
org.joda.time.field.DelegatedDurationField.getUnitMillis() 388
org.joda.time.field.DelegatedDurationField.getUnitMillis() 68
3652 java.util.TreeMap$NavigableSubMap.put(java.lang.Object,java.lang.Object)
3652 java.util.Collections$UnmodifiableMap.put(java.lang.Object,java.lang.Object)
3652 java.security.Provider.put(java.lang.Object,java.lang.Object)
3652 java.lang.ProcessEnvironment$StringEnvironment.put(java.lang.Object,java.lang.Object)
3652 6
3652 java.util.WeakHashMap.put(java.lang.Object,java.lang.Object)
3652 java.util.jar.Attributes.put(java.lang.Object,java.lang.Object)
3652 java.lang.Object.clinit()
3652 sun.misc.SoftCache.put(java.lang.Object,java.lang.Object)
3652 java.util.Collections$CheckedMap.put(java.lang.Object,java.lang.Object)
3652 sun.util.PreHashedMap.put(java.lang.Object,java.lang.Object)
3652 java.util.Collections$SynchronizedMap.put(java.lang.Object,java.lang.Object)
3652 java.util.AbstractMap.put(java.lang.Object,java.lang.Object)
3652 org.joda.time.DateTimeZone.clinit()
3652 java.util.Hashtable.put(java.lang.Object,java.lang.Object)
3652 java.util.HashMap.put(java.lang.Object,java.lang.Object)
3652 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3652 java.util.concurrent.ConcurrentHashMap.put(java.lang.Object,java.lang.Object)
3652 java.util.IdentityHashMap.put(java.lang.Object,java.lang.Object)
162 java.lang.Object.clinit()
162 java.util.LinkedHashMap.get(java.lang.Object)
162 java.util.HashMap.clinit()
162 java.util.HashMap.put(java.lang.Object,java.lang.Object)
162 java.util.HashMap.get(java.lang.Object)
162 163
162 java.util.HashMap(int)
115 452
115 81
115 132
115 1211
115 3424
115 3428
115 1004
115 453
115 1212
115 957
115 380
115 213
115 3062
115 java.lang.Object.clinit()
115 1435
115 116
115 432
115 321
115 141
115 409
115 org.joda.time.chrono.BasicSingleEraDateTimeField.getMaximumValue()
115 383
115 407
115 org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue()
115 java.lang.Throwable.clinit()
115 133
115 1269
115 java.lang.IllegalArgumentException(java.lang.String)
115 119
115 436
115 3061
115 1411
115 83
115 319
115 org.joda.time.chrono.BasicSingleEraDateTimeField.getMinimumValue()
115 406
115 1210
115 117
115 212
115 1388
115 2000
115 402
115 408
115 140
115 2067
115 1999
115 403
115 318
751 208
347 120
347 551
347 147
347 org.joda.time.DateTimeFieldType.clinit()
347 472
347 469
347 475
347 345
347 548
347 351
347 537
347 java.lang.Object.clinit()
347 350
347 320
347 349
347 536
347 152
347 106
347 552
347 311
347 348
1442 java.lang.Object.clinit()
1442 1242
1442 1443
1442 org.joda.time.chrono.GJLocaleSymbols.clinit()
412 415
412 473
412 414
412 416
412 538
412 413
412 1148
412 888
412 1262
412 1057
412 550
412 437
412 887
412 3115
412 438
925 529
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.GJEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 363
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 3302
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 3345
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 3304
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.GJChronology$CutoverField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.field.RemainderDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 1399
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 1398
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.BasicSingleEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.ISOYearOfEraDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 362
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.field.ZeroIsMaxDateTimeField.roundCeiling(long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 118
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) 3434
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundCeiling(long) org.joda.time.chrono.GJYearOfEraDateTimeField.roundCeiling(long)
317 66
317 java.lang.Object.clinit()
317 java.lang.Throwable.clinit()
317 java.lang.IllegalArgumentException(java.lang.String)
317 114
317 404
317 3355
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 771
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 304
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 3756
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.ZonedChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 3296
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 2016
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 938
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.chrono.LimitChronology.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) java.lang.Object.clinit()
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 2211
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 386
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.DateTimeZone$LazyInit$1.withZone(org.joda.time.DateTimeZone)
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 3239
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 3295
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 103
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 3265
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 498
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) org.joda.time.DateTimeZone.clinit()
org.joda.time.chrono.StrictChronology.withZone(org.joda.time.DateTimeZone) 1068
2517 java.lang.String.length()
org.joda.time.chrono.BaseChronology.months() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.months() 162
org.joda.time.chrono.BaseChronology.months() 59
org.joda.time.chrono.BaseChronology.months() org.joda.time.DurationFieldType.clinit()
3682 org.joda.time.format.PeriodFormatterBuilder.clinit()
3682 java.lang.Object.clinit()
3195 3196
3195 java.lang.Object.clinit()
3195 java.util.ArrayList.size()
3195 31
3195 org.joda.time.DateTimeZone.clinit()
3195 java.util.ArrayList.get(int)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 1373
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 3276
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.ZeroIsMaxDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 3403
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 1372
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DividedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$CutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.ISOYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 1750
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.field.DelegatedDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 1058
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) org.joda.time.chrono.GJYearOfEraDateTimeField.getDifferenceAsLong(long,long)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 1667
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDifferenceAsLong(long,long) 118
674 java.lang.Object.clinit()
674 675
674 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1083 1965
1083 java.lang.Object.clinit()
1083 java.lang.ArithmeticException(java.lang.String)
1083 890
1083 java.lang.Throwable.clinit()
1083 1045
2014 789
2014 org.joda.time.chrono.IslamicChronology.equals(java.lang.Object)
2014 1173
2014 792
2014 1906
2014 java.lang.Object.equals(java.lang.Object)
2014 781
2014 org.joda.time.chrono.EthiopicChronology.equals(java.lang.Object)
2014 2272
2014 2018
2014 584
2014 988
2014 787
2014 1107
616 505
616 java.lang.Object.clinit()
616 509
616 619
616 617
616 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1759 org.joda.time.format.PeriodFormatterBuilder.clinit()
1759 1768
1759 1779
1759 1788
1759 java.lang.Object.clinit()
1759 1778
1759 1772
1759 1781
1759 1789
1759 1787
1759 1790
1759 1763
1759 1761
1759 1780
298 java.lang.Object()
3749 sun.security.jca.ProviderList$3.get(int)
3749 java.util.Collections$SynchronizedCollection.size()
3749 java.io.PrintStream.println(java.lang.String)
3749 java.util.SubList.size()
3749 java.util.Collections$CheckedList.get(int)
3749 java.util.Collections$UnmodifiableCollection.size()
3749 java.lang.StringBuilder.append(java.lang.Object)
3749 java.util.Collections$CopiesList.get(int)
3749 java.util.Arrays$ArrayList.size()
3749 java.io.BufferedReader.clinit()
3749 java.lang.System.clinit()
3749 3776
3749 java.util.Arrays$ArrayList.get(int)
3749 java.io.DataOutputStream(java.io.OutputStream)
3749 java.lang.String.equals(java.lang.Object)
3749 org.joda.time.tz.ZoneInfoLogger.clinit()
3749 java.util.Vector.get(int)
3749 java.io.FileOutputStream(java.io.File)
3749 java.util.SubList.get(int)
3749 java.io.File.clinit()
3749 java.util.LinkedList.get(int)
3749 java.util.Collections$SingletonList.size()
3749 sun.security.jca.ProviderList$ServiceList.get(int)
3749 java.io.File.isDirectory()
3749 3172
3749 java.lang.StringBuilder.toString()
3749 java.io.File(java.io.File,java.lang.String)
3749 3768
3749 3182
3749 java.util.ArrayList$SubList.size()
3749 java.io.FilterOutputStream.close()
3749 java.util.TreeMap()
3749 java.lang.StringBuilder.append(java.lang.String)
3749 java.util.TreeMap(java.util.Comparator)
3749 java.io.File.exists()
3749 java.io.FileReader(java.io.File)
3749 java.util.TreeMap.putAll(java.util.Map)
3749 java.io.FileOutputStream.clinit()
3749 sun.security.jca.ProviderList$ServiceList.size()
3749 java.util.LinkedList.size()
3749 java.util.Collections$SynchronizedList.get(int)
3749 java.util.TreeMap.clinit()
3749 36
3749 java.io.IOException(java.lang.String)
3749 java.util.Collections$SingletonList.get(int)
3749 java.util.Collections$EmptyList.size()
3749 java.io.File.getParentFile()
3749 java.util.ArrayList.get(int)
3749 java.lang.Object.clinit()
3749 java.util.Vector.size()
3749 java.lang.StringBuilder()
3749 java.util.Collections$CopiesList.size()
3749 sun.security.jca.ProviderList$3.size()
3749 java.util.TreeMap.get(java.lang.Object)
3749 java.util.ArrayList$SubList.get(int)
3749 java.io.File.getName()
3749 java.util.ArrayList.size()
3749 java.io.BufferedReader.close()
3749 3778
3749 java.lang.Throwable.clinit()
3749 3777
3749 java.io.BufferedReader(java.io.Reader)
3749 3750
3749 java.util.Collections$CheckedCollection.size()
3749 java.lang.String.clinit()
3749 3759
3749 java.util.Collections$EmptyList.get(int)
3749 java.util.TreeMap.put(java.lang.Object,java.lang.Object)
3749 java.util.Collections$UnmodifiableList.get(int)
3749 java.io.File.mkdirs()
3325 java.lang.Object.clinit()
3325 java.lang.StringBuilder()
3325 3309
3325 java.lang.StringBuilder.append(java.lang.String)
3325 java.lang.StringBuilder.toString()
3325 java.lang.StringBuilder.append(int)
2400 164
2400 java.lang.Object.hashCode()
3776 909
3776 java.io.PrintStream.println(java.lang.String)
3776 417
3776 214
3776 3132
3776 281
3776 435
3776 455
3776 java.lang.StringBuilder.append(java.lang.Object)
3776 java.util.ArrayList.add(java.lang.Object)
3776 org.joda.time.UTCDateTimeZone.nextTransition(long)
3776 3144
3776 java.lang.System.clinit()
3776 430
3776 java.lang.String.equals(java.lang.Object)
3776 3739
3776 891
3776 907
3776 1428
3776 421
3776 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
3776 java.util.ArrayList.clinit()
3776 java.lang.Long.longValue()
3776 3153
3776 3134
3776 3439
3776 3167
3776 org.joda.time.UTCDateTimeZone.previousTransition(long)
3776 java.lang.StringBuilder.toString()
3776 3513
3776 3145
3776 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
3776 420
3776 3515
3776 285
3776 java.lang.StringBuilder.append(java.lang.String)
3776 1277
3776 3142
3776 1379
3776 java.lang.Long.valueOf(long)
3776 36
3776 java.util.ArrayList.get(int)
3776 373
3776 1281
3776 java.lang.Object.clinit()
3776 java.lang.StringBuilder()
3776 585
3776 org.joda.time.chrono.ISOChronology.clinit()
3776 422
3776 1273
3776 2120
3776 905
3776 379
3776 3168
3776 java.util.ArrayList.size()
3776 1275
3776 org.joda.time.field.StrictDateTimeField.set(long,int)
3776 java.lang.Long.clinit()
3776 2119
3776 1046
3776 3135
3776 277
3776 908
3776 201
3776 419
3776 3164
3776 java.util.ArrayList()
3776 java.lang.String.length()
3776 283
903 java.lang.Object.clinit()
903 290
903 422
903 904
2431 2432
2431 java.lang.StringBuffer(int)
2431 java.lang.StringBuffer.clinit()
2431 java.lang.StringBuffer.toString()
2431 2515
2431 2380
2431 2435
2431 2434
2431 2441
2431 java.lang.Object.clinit()
2431 2519
2431 2447
2431 2433
2431 2444
2431 2445
2431 1795
2431 2446
2272 989
2024 org.joda.time.format.InternalPrinterDateTimePrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 java.lang.Throwable.clinit()
2024 2031
2024 2030
2024 java.lang.IllegalArgumentException(java.lang.String)
2024 org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 2118
2024 org.joda.time.format.DateTimePrinterInternalPrinter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 2025
2024 java.lang.Object.clinit()
2024 2028
2024 2114
2024 2026
2024 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneId.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 724
2024 org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
2024 org.joda.time.format.DateTimeFormat$StyleFormatter.printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)
904 java.lang.Object.clinit()
904 java.lang.StringBuilder()
904 java.lang.ArithmeticException(java.lang.String)
904 java.lang.Throwable.clinit()
904 java.lang.StringBuilder.append(java.lang.String)
904 java.lang.StringBuilder.toString()
904 java.lang.StringBuilder.append(int)
690 505
690 java.lang.Object.clinit()
690 509
690 685
690 643
690 689
690 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
1450 372
1450 375
434 936
3738 java.lang.Object.clinit()
3738 java.lang.String.equals(java.lang.Object)
3738 org.joda.time.DateTimeZone.clinit()
3738 491
270 481
270 3394
270 255
270 270
270 460
270 237
270 252
270 240
270 390
270 118
270 257
270 446
2276 java.lang.String.endsWith(java.lang.String)
2276 2277
2276 java.util.GregorianCalendar.getGregorianChange()
2276 org.joda.time.chrono.JulianChronology.clinit()
2276 306
2276 java.util.Date.getTime()
2276 java.lang.Object.clinit()
2276 215
2276 org.joda.time.chrono.ISOChronology.clinit()
2276 org.joda.time.chrono.BuddhistChronology.clinit()
2276 394
2276 java.lang.Object.getClass()
2276 org.joda.time.chrono.GregorianChronology.clinit()
2276 91
2276 java.lang.Class.getName()
2276 org.joda.time.chrono.BasicGJChronology.clinit()
2276 org.joda.time.chrono.BasicChronology.clinit()
2276 org.joda.time.chrono.GJChronology.clinit()
3493 java.lang.Object.clinit()
3493 3494
3493 org.joda.time.DateTimeFieldType.clinit()
3493 143
1899 java.lang.Object.clinit()
1899 java.lang.StringBuffer(int)
1899 java.lang.StringBuffer.clinit()
1899 java.lang.StringBuffer.toString()
1899 514
1899 1361
1899 1360
1899 1900
1899 1363
1899 java.lang.StringBuffer.append(char)
1899 592
1772 1773
1772 java.lang.Object.clinit()
1772 java.lang.IllegalArgumentException()
1772 1775
1772 java.lang.Throwable.clinit()
3295 755
3295 java.lang.Object.clinit()
3295 org.joda.time.chrono.IslamicChronology.clinit()
3295 498
3295 org.joda.time.DateTimeZone.clinit()
3295 org.joda.time.chrono.BasicChronology.clinit()
3295 543
1054 java.lang.StringBuffer.charAt(int)
1054 128
1054 62
1054 org.joda.time.field.DelegatedDurationField.getUnitMillis()
1054 org.joda.time.DateTimeFieldType.clinit()
1054 239
1054 java.nio.CharBuffer.length()
1054 java.lang.String.charAt(int)
1054 359
1054 410
1054 246
1054 448
1054 java.lang.StringBuffer.length()
1054 63
1054 732
1054 java.lang.Object.clinit()
1054 1055
1054 479
1054 java.lang.Math.clinit()
1054 1056
1054 java.lang.StringBuilder.length()
1054 244
1054 68
1054 230
1054 70
1054 java.nio.CharBuffer.charAt(int)
1054 134
1054 java.lang.Math.min(int,int)
1054 org.joda.time.field.MillisDurationField.clinit()
1054 127
1054 3213
1054 454
1054 231
1054 241
1054 247
1054 java.lang.StringBuilder.charAt(int)
1054 java.lang.String.length()
1054 388
1251 342
1251 java.io.StringWriter.append(char)
1251 1252
1251 3410
1251 960
1251 java.io.Writer.append(char)
1251 732
1251 java.lang.Object.clinit()
1251 429
1251 java.nio.CharBuffer.append(char)
1251 java.lang.StringBuilder.append(char)
1251 997
1251 371
1251 995
1251 338
1251 996
1251 457
1251 1103
1251 330
1251 992
1251 994
1251 1104
1251 org.joda.time.format.FormatUtils.clinit()
1251 991
1251 384
1251 java.lang.StringBuffer.append(char)
1251 java.io.PrintStream.append(char)
1251 329
1251 3240
1251 334
1251 1106
1251 290
1251 993
1251 java.io.PrintWriter.append(char)
130 java.lang.Object.clinit()
130 java.lang.Throwable.clinit()
130 170
130 java.lang.IllegalArgumentException(java.lang.String)
130 org.joda.time.field.DelegatedDurationField.isSupported()
130 47
130 131
130 181
23 java.io.ObjectInputStream.readUTF()
23 20
23 34
23 24
23 java.lang.Throwable.clinit()
23 java.io.IOException(java.lang.String)
23 491
23 451
23 25
23 java.lang.Object.clinit()
23 java.io.ObjectInputStream.readUnsignedByte()
23 1040
23 org.joda.time.tz.CachedDateTimeZone.clinit()
23 3126
23 java.io.DataInputStream.readUTF()
23 java.io.ObjectInputStream$BlockDataInputStream.readUnsignedByte()
23 org.joda.time.DateTimeZone.clinit()
23 java.io.DataInputStream.readUnsignedByte()
23 790
23 java.io.ObjectInputStream$BlockDataInputStream.readUTF()
3505 java.lang.Object.clinit()
3505 3479
3505 646
594 505
594 java.lang.Object.clinit()
594 509
594 595
594 org.joda.time.format.ISODateTimeFormat$Constants.clinit()
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 3411
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 1422
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 1320
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale)
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 1420
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 1240
org.joda.time.field.DelegatedDateTimeField.getAsShortText(int,java.util.Locale) 3280
752 325
org.joda.time.chrono.BaseChronology.weekyears() java.lang.Object.clinit()
org.joda.time.chrono.BaseChronology.weekyears() 60
org.joda.time.chrono.BaseChronology.weekyears() 162
org.joda.time.chrono.BaseChronology.weekyears() org.joda.time.DurationFieldType.clinit()
3413 3406
698 java.lang.Object()
943 java.lang.Object.clinit()
943 944
2519 2516
2519 2519
2519 2447
2519 2444
2519 2445
2519 2446
1254 426
1254 1219
1254 1530
1254 2216
1254 219
1254 274
1254 1102
1254 java.lang.Object.clinit()
1254 2258
1254 org.joda.time.chrono.LimitChronology.withUTC()
1254 749
1254 org.joda.time.chrono.EthiopicChronology.getDateTimeMillis(int,int,int,int)
1254 495
1254 2002
1254 385
1254 753
1254 2138
1254 478
1254 272
1254 2001
1254 2211
1254 org.joda.time.chrono.IslamicChronology.getDateTimeMillis(int,int,int,int)
1254 org.joda.time.chrono.ZonedChronology.withUTC()
1254 org.joda.time.DateTimeUtils.clinit()
1254 523
1254 269
1254 343
1081 java.lang.Object.clinit()
1081 903
1081 1082
3764 3765
3764 3754
3764 java.lang.Object.clinit()
3764 java.lang.Integer.clinit()
3764 3740
3764 java.util.StringTokenizer.hasMoreTokens()
3764 java.lang.Integer.parseInt(java.lang.String)
3764 java.lang.String.intern()
3764 3753
3764 java.util.StringTokenizer.nextToken()
3764 java.lang.Object()
1420 java.lang.Object.clinit()
1420 1421
1420 1242
1420 org.joda.time.chrono.GJLocaleSymbols.clinit()
931 120
931 551
931 376
931 374
931 472
931 469
931 548
931 537
931 java.lang.Object.clinit()
931 1381
931 320
931 536
931 348
931 311
931 3290
1103 1103
1103 457
1103 330
1103 992
1103 342
1103 1104
1103 994
1103 991
1103 384
1103 3240
1103 329
1103 960
1103 3410
1103 334
1103 429
1103 1106
1103 290
1103 1058
1103 997
1103 371
1103 995
1103 338
1103 993
1103 996
1103 118
898 1464
898 org.joda.time.field.ZeroIsMaxDateTimeField.add(long,int)
898 3241
898 3266
898 3396
898 895
898 1112
898 1226
898 1391
898 1448
898 3242
898 903
898 1471
898 3432
898 org.joda.time.chrono.BaseChronology.year()
898 1472
898 org.joda.time.field.ZeroIsMaxDateTimeField.isLeap(long)
898 370
898 1350
898 1458
898 899
898 1446
898 org.joda.time.field.DividedDateTimeField.add(long,int)
898 201
898 3300
898 900
898 3347
898 1390
898 org.joda.time.chrono.ISOYearOfEraDateTimeField.add(long,int)
898 3268
898 3344
391 java.lang.Object.clinit()
391 97
1986 java.util.JumboEnumSet.contains(java.lang.Object)
1986 java.util.TreeSet.contains(java.lang.Object)
1986 org.joda.time.field.DelegatedDurationField.getUnitMillis()
1986 java.util.IdentityHashMap$EntrySet.contains(java.lang.Object)
1986 239
1986 java.util.Collections$UnmodifiableCollection.contains(java.lang.Object)
1986 java.lang.ProcessEnvironment$StringEntrySet.contains(java.lang.Object)
1986 java.util.RegularEnumSet.contains(java.lang.Object)
1986 246
1986 org.joda.time.chrono.BaseChronology.days()
1986 732
1986 java.lang.Object.clinit()
1986 java.util.AbstractMap$1.contains(java.lang.Object)
1986 java.util.concurrent.ConcurrentHashMap$KeySet.contains(java.lang.Object)
1986 175
1986 1203
1986 org.joda.time.LocalDate.clinit()
1986 java.util.Collections$SetFromMap.contains(java.lang.Object)
1986 java.util.Collections$CheckedCollection.contains(java.lang.Object)
1986 java.util.WeakHashMap$KeySet.contains(java.lang.Object)
1986 java.util.IdentityHashMap$KeySet.contains(java.lang.Object)
1986 java.util.TreeMap$NavigableSubMap$EntrySetView.contains(java.lang.Object)
1986 java.util.WeakHashMap$EntrySet.contains(java.lang.Object)
1986 68
1986 java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet.contains(java.lang.Object)
1986 java.lang.ProcessEnvironment$StringKeySet.contains(java.lang.Object)
1986 230
1986 70
1986 java.util.Hashtable$EntrySet.contains(java.lang.Object)
1986 java.util.TreeMap$KeySet.contains(java.lang.Object)
1986 288
1986 java.util.Collections$EmptySet.contains(java.lang.Object)
1986 824
1986 java.util.Hashtable$KeySet.contains(java.lang.Object)
1986 java.util.concurrent.ConcurrentHashMap$EntrySet.contains(java.lang.Object)
1986 java.util.Collections$CheckedMap$CheckedEntrySet.contains(java.lang.Object)
1986 231
1986 sun.nio.ch.Util$2.contains(java.lang.Object)
1986 java.util.HashMap$KeySet.contains(java.lang.Object)
1986 405
1986 java.util.AbstractCollection.contains(java.lang.Object)
1986 82
1986 109
1986 javax.security.auth.Subject$SecureSet.contains(java.lang.Object)
1986 java.util.Collections$SingletonSet.contains(java.lang.Object)
1986 java.util.TreeMap$EntrySet.contains(java.lang.Object)
1986 java.util.HashSet.contains(java.lang.Object)
1986 java.util.Collections$SynchronizedCollection.contains(java.lang.Object)
1986 388
1986 java.util.HashMap$EntrySet.contains(java.lang.Object)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) 3430
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.ZeroIsMaxDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.field.DelegatedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) 1137
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue(org.joda.time.ReadablePartial) org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue(org.joda.time.ReadablePartial)
3771 sun.security.jca.ProviderList$3.get(int)
3771 java.util.Collections$SynchronizedCollection.size()
3771 java.util.SubList.size()
3771 sun.security.jca.ProviderList$ServiceList.size()
3771 java.util.Collections$CheckedList.get(int)
3771 java.util.Collections$UnmodifiableCollection.size()
3771 java.util.LinkedList.size()
3771 java.util.Collections$SynchronizedList.get(int)
3771 java.util.Collections$CopiesList.get(int)
3771 java.util.Collections$SingletonList.get(int)
3771 java.util.Collections$EmptyList.size()
3771 java.util.Arrays$ArrayList.size()
3771 java.util.ArrayList.get(int)
3771 java.util.Vector.size()
3771 java.util.Arrays$ArrayList.get(int)
3771 java.util.Collections$CopiesList.size()
3771 sun.security.jca.ProviderList$3.size()
3771 java.util.Vector.get(int)
3771 java.util.ArrayList$SubList.get(int)
3771 java.util.SubList.get(int)
3771 java.util.ArrayList.size()
3771 java.util.LinkedList.get(int)
3771 3772
3771 java.util.Collections$SingletonList.size()
3771 java.util.Collections$CheckedCollection.size()
3771 sun.security.jca.ProviderList$ServiceList.get(int)
3771 java.util.ArrayList$SubList.size()
3771 java.util.Collections$EmptyList.get(int)
3771 java.util.Collections$UnmodifiableList.get(int)
3729 3132
3729 3734
3729 3144
3729 java.io.ObjectOutputStream$BlockDataOutputStream.writeUTF(java.lang.String)
3729 java.lang.Object.clinit()
3729 java.io.ObjectOutputStream.writeByte(int)
3729 java.io.DataOutputStream.writeByte(int)
3729 3739
3729 java.io.ObjectOutputStream$BlockDataOutputStream.writeByte(int)
3729 905
3729 3733
3729 3153
3729 3732
3729 3134
3729 java.io.ObjectOutputStream.writeUTF(java.lang.String)
3729 java.io.DataOutputStream.writeUTF(java.lang.String)
3729 3182
3729 1046
3729 3135
3729 277
3729 3145
3729 3164
3729 285
3729 3515
3729 3142
3729 283
3188 892
416 org.joda.time.chrono.BaseChronology.hourOfDay()
416 417
416 org.joda.time.chrono.BaseChronology.dayOfMonth()
416 435
416 455
416 373
416 1281
416 187
416 195
416 430
416 189
416 422
416 1273
416 200
416 2120
416 185
416 182
416 org.joda.time.chrono.BaseChronology.year()
416 379
416 org.joda.time.chrono.BaseChronology.millisOfSecond()
416 421
416 org.joda.time.chrono.BasicSingleEraDateTimeField.set(long,int)
416 1275
416 org.joda.time.chrono.BaseChronology.monthOfYear()
416 org.joda.time.field.StrictDateTimeField.set(long,int)
416 org.joda.time.chrono.BaseChronology.secondOfMinute()
416 3439
416 3513
416 2119
416 org.joda.time.chrono.ISOYearOfEraDateTimeField.set(long,int)
416 org.joda.time.chrono.BaseChronology.minuteOfHour()
416 201
416 419
416 420
416 1277
416 1379
491 5
1237 java.io.PrintStream.append(java.lang.CharSequence)
1237 1238
1237 java.lang.StringBuffer.append(java.lang.CharSequence)
1237 java.io.StringWriter.append(char)
1237 java.lang.StringBuilder.append(java.lang.CharSequence)
1237 java.io.PrintStream.append(char)
1237 java.lang.StringBuffer.append(char)
1237 java.io.Writer.append(java.lang.CharSequence)
1237 java.io.PrintWriter.append(java.lang.CharSequence)
1237 java.io.Writer.append(char)
1237 java.nio.CharBuffer.append(java.lang.CharSequence)
1237 java.lang.StringBuilder.append(char)
1237 java.nio.CharBuffer.append(char)
1237 java.io.StringWriter.append(java.lang.CharSequence)
1237 java.io.PrintWriter.append(char)
157 64
157 java.lang.Object.clinit()
157 org.joda.time.DateTimeFieldType.clinit()
157 158
249 178
860 java.lang.Throwable.clinit()
860 874
860 1682
860 875
860 876
860 1683
860 java.lang.IllegalStateException(java.lang.String)
860 java.lang.StringBuilder.toString()
860 1704
860 1982
860 java.lang.Class.isAssignableFrom(java.lang.Class)
860 864
860 java.lang.Object.clinit()
860 java.lang.StringBuilder()
860 java.lang.StringBuilder.append(char)
860 863
860 java.lang.StringBuilder.append(java.lang.String)
860 java.lang.Object.getClass()
860 861
860 java.lang.Class.getName()
860 862
3485 java.lang.Object()
3546 java.lang.Object()
