digraph graphname {
rankdir="LR";
69 [label="initialization.StaticInit.<clinit>():15:9:17:2"]
60 [label="initialization.Init.<initblock>():16:4:18:4"]
80 [label="java8.MethodReference.<initblock>():7:17:7:41"]
114 [label="root.CallGraphTest.CallGraphTest():-1:-1:-1:-1"]
108 [label="polimorph.Polimorph.abstractClassImplementation():22:14:26:2"]
84 [label="java.util.List.add(java.lang.Object):-1:-1:-1:-1"]
6 [label="anonymAndInner.AnonymAndInnerTest.anonim():11:7:29:2"]
7 [label="anonymAndInner.AnonymAndInnerTest$1.AnonymAndInnerTest$1():14:22:18:3"]
12 [label="anonymAndInner.AnonymAndInnerTest$2.AnonymAndInnerTest$2():22:41:27:3"]
0 [label="anonymAndInner.AnonymAndInnerTest.AnonymAndInnerTest():-1:-1:-1:-1"]
22 [label="anonymAndInner.Outer$Inner.Outer$Inner():-1:-1:-1:-1"]
17 [label="anonymAndInner.Outer$Nested.Outer$Nested():-1:-1:-1:-1"]
4 [label="anonymAndInner.Outer.Outer():-1:-1:-1:-1"]
52 [label="helper.Base.base():4:14:6:2"]
53 [label="helper.Child1.child1():10:14:12:2"]
72 [label="java8.Lambda.compare(int,int):-1:-1:-1:-1"]
3 [label="helper.Debug.debug(java.lang.String):6:21:10:2"]
75 [label="java8.MethodReference.doSomething():27:16:29:4"]
77 [label="java8.FunctionalInterface.doSomething(java.lang.String):-1:-1:-1:-1"]
24 [label="dynamic.DynamicTest.DynamicTest():-1:-1:-1:-1"]
34 [label="java.lang.invoke.MethodHandles$Lookup.findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType):-1:-1:-1:-1"]
9 [label="anonymAndInner.AnonymAndInnerTest$1.foo():15:16:17:4"]
10 [label="helper.Child1.foo():7:14:9:2"]
39 [label="helper.Interface.foo():-1:-1:-1:-1"]
50 [label="helper.Abstract.foo():4:14:6:2"]
43 [label="generics.Generic3.foo():4:14:7:2"]
87 [label="parser.ForParser.foo():7:27:9:2"]
95 [label="polimorph.Overload.foo():4:7:6:2"]
96 [label="polimorph.Overload.foo(int):7:7:9:2"]
98 [label="polimorph.Overload.foo(int,java.lang.Object[]):13:7:15:2"]
97 [label="polimorph.Overload.foo(java.lang.Object):10:11:12:2"]
85 [label="java.lang.Iterable.forEach(java.util.function.Consumer):-1:-1:-1:-1"]
26 [label="java.lang.Class.forName(java.lang.String):-1:-1:-1:-1"]
76 [label="java8.Java8Test.functionalInterface():24:7:28:2"]
14 [label="anonymAndInner.AnonymAndInnerTest$2.generic(helper.Child1):23:16:26:4"]
15 [label="generics.Generic1.generic(helper.Interface):4:14:7:2"]
41 [label="generics.Generic2.generic(helper.Interface,generics.Generic1):4:14:8:2"]
45 [label="generics.GenericsTest.genericMethod(helper.Interface):4:43:7:2"]
13 [label="generics.Generic1.Generic1():-1:-1:-1:-1"]
40 [label="generics.Generic2.Generic2():-1:-1:-1:-1"]
42 [label="generics.Generic3.Generic3():-1:-1:-1:-1"]
44 [label="generics.GenericsTest.GenericsTest():-1:-1:-1:-1"]
27 [label="java.lang.Class.getMethod(java.lang.String,java.lang.Class[]):-1:-1:-1:-1"]
11 [label="helper.Child1.goo():4:14:6:2"]
106 [label="helper.Interface.goo():-1:-1:-1:-1"]
54 [label="helper.Child2.goo():4:14:6:2"]
88 [label="parser.ForParser.goo():11:27:13:2"]
49 [label="helper.Abstract.Abstract():-1:-1:-1:-1"]
51 [label="helper.Base.Base():-1:-1:-1:-1"]
8 [label="helper.Child1.Child1():-1:-1:-1:-1"]
47 [label="helper.Child2.Child2():-1:-1:-1:-1"]
56 [label="helper.Child3.Child3():-1:-1:-1:-1"]
57 [label="helper.Debug.Debug():-1:-1:-1:-1"]
58 [label="helper.Interface.hoo():3:18:9:1"]
55 [label="helper.Child2.hoo():7:14:9:2"]
59 [label="initialization.Constructor.Constructor():4:2:6:2"]
63 [label="initialization.Init.Init(helper.Interface):20:11:23:4"]
64 [label="initialization.InitializationTest.InitializationTest():-1:-1:-1:-1"]
61 [label="initialization.IntermediateInitialization.IntermediateInitialization():-1:-1:-1:-1"]
68 [label="initialization.StaticInit.StaticInit():-1:-1:-1:-1"]
5 [label="anonymAndInner.Outer.inner():5:14:8:2"]
23 [label="anonymAndInner.Outer$Inner.inner():11:15:13:3"]
2 [label="anonymAndInner.AnonymAndInnerTest.innerClass():4:7:9:2"]
62 [label="initialization.IntermediateInitialization.instantiateChild1():7:23:10:2"]
105 [label="polimorph.Polimorph.interfaceImplementation():9:14:14:2"]
107 [label="polimorph.Polimorph.interfaceImplementation2():16:14:20:2"]
29 [label="java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[]):-1:-1:-1:-1"]
35 [label="java.lang.invoke.MethodHandle.invokeWithArguments(java.lang.Object[]):-1:-1:-1:-1"]
1 [label="java.lang.Object.Object():-1:-1:-1:-1"]
81 [label="java.util.ArrayList.ArrayList():-1:-1:-1:-1"]
70 [label="java8.Java8Test.Java8Test():-1:-1:-1:-1"]
74 [label="java8.MethodReference.MethodReference():18:11:21:4"]
71 [label="java8.Java8Test.lambda():8:15:12:2"]
33 [label="java.lang.invoke.MethodHandles.lookup():-1:-1:-1:-1"]
21 [label="anonymAndInner.AnonymAndInnerTest.main(java.lang.String[]):44:21:47:2"]
48 [label="generics.GenericsTest.main(java.lang.String[]):26:21:28:2"]
38 [label="dynamic.DynamicTest.main(java.lang.String[]):54:21:57:2"]
67 [label="initialization.InitializationTest.main(java.lang.String[]):21:24:23:2"]
79 [label="java8.Java8Test.main(java.lang.String[]):37:21:39:2"]
93 [label="parser.ParserTest.main(java.lang.String[]):22:21:24:2"]
113 [label="polimorph.PolimorphTest.main(java.lang.String[]):27:21:30:2"]
115 [label="root.CallGraphTest.main(java.lang.String[]):4:21:12:2"]
31 [label="dynamic.DynamicTest.methodHandle():35:7:49:2"]
73 [label="java8.Java8Test.methodReference():14:7:18:2"]
32 [label="java.lang.invoke.MethodType.methodType(java.lang.Class,java.lang.Class):-1:-1:-1:-1"]
16 [label="anonymAndInner.AnonymAndInnerTest.nested():31:7:36:2"]
18 [label="anonymAndInner.Outer$Nested.nested():21:15:23:3"]
110 [label="polimorph.PolimorphTest.overload():4:7:12:2"]
99 [label="polimorph.Overload.overload1():17:7:20:2"]
100 [label="polimorph.Overload.overload2():22:7:25:2"]
101 [label="polimorph.Overload.overload3():27:7:30:2"]
102 [label="polimorph.Overload.overload4():32:7:35:2"]
104 [label="polimorph.Polimorph.overloadedInterface(helper.Interface):4:14:7:2"]
86 [label="parser.ForParser.ForParser():-1:-1:-1:-1"]
91 [label="parser.ParserTest.ParserTest():-1:-1:-1:-1"]
94 [label="polimorph.Overload.Overload():-1:-1:-1:-1"]
103 [label="polimorph.Polimorph.Polimorph():-1:-1:-1:-1"]
109 [label="polimorph.PolimorphTest.PolimorphTest():-1:-1:-1:-1"]
111 [label="polimorph.PolimorphTest.polimorphic():14:7:21:2"]
82 [label="java8.MethodReference.print(java.lang.String):9:25:12:4"]
36 [label="java.lang.Throwable.printStackTrace():-1:-1:-1:-1"]
30 [label="java.io.PrintStream.println(java.lang.String):-1:-1:-1:-1"]
83 [label="java8.MethodReference.privatePrint():14:23:16:4"]
25 [label="dynamic.DynamicTest.reflection():14:7:28:2"]
28 [label="java.lang.reflect.AccessibleObject.setAccessible(boolean):-1:-1:-1:-1"]
66 [label="initialization.StaticInit.staticInit():19:14:21:2"]
19 [label="anonymAndInner.Outer$Nested.staticNested():17:22:19:3"]
20 [label="anonymAndInner.AnonymAndInnerTest.test():38:14:42:2"]
46 [label="generics.GenericsTest.test():9:14:25:2"]
37 [label="dynamic.DynamicTest.test():50:14:53:2"]
65 [label="initialization.InitializationTest.test():11:17:16:5"]
78 [label="java8.Java8Test.test():30:14:35:2"]
92 [label="parser.ParserTest.test():11:14:20:2"]
112 [label="polimorph.PolimorphTest.test():23:14:26:2"]
90 [label="parser.ForParser.validGenericMethod(helper.Child2,generics.Generic1,java.lang.Class[]):23:98:29:2"]
89 [label="parser.ForParser.validMethod(helper.Child2,generics.Generic1,java.lang.Class[]):15:69:21:2"]
0 -> 1
2 -> 3
2 -> 4
2 -> 5
3 -> 30
4 -> 1
5 -> 3
5 -> 22
5 -> 23
6 -> 3
6 -> 7
6 -> 10
6 -> 11
6 -> 12
6 -> 15
7 -> 8
8 -> 49
9 -> 3
10 -> 3
11 -> 3
12 -> 13
13 -> 1
14 -> 3
14 -> 10
15 -> 3
15 -> 39
16 -> 3
16 -> 17
16 -> 18
16 -> 19
17 -> 1
18 -> 3
19 -> 3
20 -> 2
20 -> 6
20 -> 16
21 -> 0
21 -> 20
22 -> 1
23 -> 3
24 -> 1
25 -> 3
25 -> 26
25 -> 27
25 -> 28
25 -> 29
25 -> 30
31 -> 3
31 -> 30
31 -> 32
31 -> 33
31 -> 34
31 -> 35
31 -> 36
37 -> 25
37 -> 31
38 -> 24
38 -> 37
40 -> 1
41 -> 3
41 -> 15
41 -> 39
42 -> 13
43 -> 3
43 -> 8
43 -> 15
44 -> 1
45 -> 3
45 -> 39
46 -> 3
46 -> 8
46 -> 13
46 -> 15
46 -> 40
46 -> 41
46 -> 42
46 -> 43
46 -> 45
46 -> 47
47 -> 49
48 -> 44
48 -> 46
49 -> 1
50 -> 3
51 -> 1
52 -> 3
53 -> 3
54 -> 3
55 -> 3
56 -> 47
57 -> 1
58 -> 3
59 -> 1
59 -> 3
60 -> 3
60 -> 8
60 -> 47
60 -> 61
60 -> 62
61 -> 1
62 -> 3
62 -> 8
63 -> 1
63 -> 3
63 -> 60
64 -> 1
65 -> 3
65 -> 8
65 -> 59
65 -> 63
65 -> 66
66 -> 3
67 -> 64
67 -> 65
68 -> 1
69 -> 3
69 -> 47
69 -> 61
69 -> 62
70 -> 1
71 -> 3
71 -> 72
73 -> 3
73 -> 74
73 -> 75
74 -> 1
74 -> 80
74 -> 84
75 -> 85
76 -> 3
76 -> 77
78 -> 3
78 -> 71
78 -> 73
78 -> 76
79 -> 70
79 -> 78
80 -> 81
82 -> 3
83 -> 3
86 -> 1
87 -> 3
88 -> 3
89 -> 3
89 -> 40
89 -> 41
90 -> 3
90 -> 13
90 -> 40
90 -> 41
91 -> 1
92 -> 3
92 -> 13
92 -> 41
92 -> 47
92 -> 86
92 -> 87
92 -> 88
92 -> 89
92 -> 90
93 -> 91
93 -> 92
94 -> 1
95 -> 3
96 -> 3
97 -> 3
98 -> 3
99 -> 3
99 -> 95
100 -> 3
100 -> 96
101 -> 3
101 -> 97
102 -> 3
102 -> 98
103 -> 1
104 -> 3
104 -> 39
105 -> 8
105 -> 39
105 -> 58
105 -> 106
107 -> 39
107 -> 47
107 -> 58
108 -> 8
108 -> 10
108 -> 50
109 -> 1
110 -> 3
110 -> 94
110 -> 99
110 -> 100
110 -> 101
110 -> 102
111 -> 3
111 -> 56
111 -> 103
111 -> 104
111 -> 105
111 -> 107
111 -> 108
112 -> 3
112 -> 110
113 -> 109
113 -> 112
114 -> 1
115 -> 0
115 -> 20
115 -> 24
115 -> 37
115 -> 44
115 -> 46
115 -> 64
115 -> 65
115 -> 70
115 -> 78
115 -> 91
115 -> 92
115 -> 109
115 -> 112
}
