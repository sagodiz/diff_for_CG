digraph graphname {
rankdir="LR";
120 [label="anonymAndInner.AnonymAndInnerTest.<init>()V:-1:-1:-1:-1"]
121 [label="java.lang.Object.<init>()V:-1:-1:-1:-1"]
123 [label="anonymAndInner.AnonymAndInnerTest.innerClass()V:8:2:13:3"]
128 [label="helper.Debug.debug(Ljava/lang/String;)V:6:2:10:3"]
133 [label="anonymAndInner.Outer.<init>()V:-1:-1:-1:-1"]
135 [label="anonymAndInner.Outer.inner()V:5:2:8:3"]
137 [label="anonymAndInner.AnonymAndInnerTest.anonim()V:20:2:41:3"]
142 [label="anonymAndInner.AnonymAndInnerTest$1.<init>()V:-1:-1:-1:-1"]
145 [label="helper.Child1.<init>()V:-1:-1:-1:-1"]
147 [label="anonymAndInner.AnonymAndInnerTest$1.foo()V:24:4:26:5"]
148 [label="helper.Child1.foo()V:7:2:9:3"]
150 [label="helper.Child1.goo()V:4:2:6:3"]
158 [label="anonymAndInner.AnonymAndInnerTest$2.<init>()V:-1:-1:-1:-1"]
161 [label="generics.Generic1.<init>()V:-1:-1:-1:-1"]
163 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Child1;)V:35:4:38:5"]
166 [label="generics.Generic1.generic(Lhelper/Interface;)V:8:2:11:3"]
168 [label="anonymAndInner.AnonymAndInnerTest.nested()V:47:2:52:3"]
170 [label="anonymAndInner.Outer$Nested.nested()V:21:3:23:4"]
175 [label="anonymAndInner.Outer$Nested.<init>()V:-1:-1:-1:-1"]
177 [label="anonymAndInner.Outer$Nested.staticNested()V:17:3:19:4"]
179 [label="anonymAndInner.AnonymAndInnerTest.test()V:54:2:58:3"]
183 [label="anonymAndInner.AnonymAndInnerTest.main([Ljava/lang/String;)V:60:2:63:3"]
194 [label="anonymAndInner.Outer$Inner.inner()V:11:3:13:4"]
199 [label="anonymAndInner.Outer$Inner.<init>()V:-1:-1:-1:-1"]
204 [label="CallGraphTest.<init>()V:-1:-1:-1:-1"]
205 [label="CallGraphTest.main([Ljava/lang/String;)V:4:2:12:3"]
207 [label="parser.ParserTest.test()V:11:2:20:3"]
212 [label="parser.ParserTest.<init>()V:-1:-1:-1:-1"]
214 [label="initialization.InitializationTest.test()V:13:5:18:6"]
219 [label="initialization.InitializationTest.<init>()V:-1:-1:-1:-1"]
221 [label="java8.Java8Test.test()V:30:2:35:3"]
226 [label="java8.Java8Test.<init>()V:-1:-1:-1:-1"]
228 [label="generics.GenericsTest.test()V:12:2:28:3"]
233 [label="generics.GenericsTest.<init>()V:-1:-1:-1:-1"]
235 [label="polimorph.PolimorphTest.test()V:23:2:27:3"]
240 [label="polimorph.PolimorphTest.<init>()V:-1:-1:-1:-1"]
242 [label="dynamic.DynamicTest.test()V:50:2:53:3"]
247 [label="dynamic.DynamicTest.<init>()V:-1:-1:-1:-1"]
252 [label="dynamic.DynamicTest.reflection()V:14:2:28:3"]
257 [label="java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;:-1:-1:-1:-1"]
259 [label="java.lang.Class.forName(Ljava/lang/String;)Ljava/lang/Class;:-1:-1:-1:-1"]
261 [label="java.lang.reflect.AccessibleObject.setAccessible(Z)V:-1:-1:-1:-1"]
263 [label="java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;:-1:-1:-1:-1"]
280 [label="java.io.PrintStream.println(Ljava/lang/String;)V:-1:-1:-1:-1"]
284 [label="dynamic.DynamicTest.methodHandle()V:35:2:49:3"]
289 [label="java.lang.invoke.MethodType.methodType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;:-1:-1:-1:-1"]
297 [label="java.lang.invoke.MethodHandles.lookup()Ljava/lang/invoke/MethodHandles$Lookup;:-1:-1:-1:-1"]
302 [label="java.lang.invoke.MethodHandles$Lookup.findStatic(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;:-1:-1:-1:-1"]
307 [label="java.lang.invoke.MethodHandle.invokeWithArguments([Ljava/lang/Object;)Ljava/lang/Object;:-1:-1:-1:-1"]
312 [label="java.lang.Throwable.printStackTrace()V:-1:-1:-1:-1"]
316 [label="dynamic.DynamicTest.main([Ljava/lang/String;)V:54:2:57:3"]
329 [label="helper.Interface.foo()V:4:4:4:15"]
335 [label="generics.Generic2.<init>()V:-1:-1:-1:-1"]
336 [label="generics.Generic2.generic(Lhelper/Interface;Lgenerics/Generic1;)V:7:2:11:3"]
350 [label="generics.Generic3.<init>()V:-1:-1:-1:-1"]
351 [label="generics.Generic3.foo()V:7:2:10:3"]
353 [label="generics.GenericsTest.genericMethod(Lhelper/Interface;)V:7:2:10:3"]
365 [label="helper.Child2.<init>()V:-1:-1:-1:-1"]
379 [label="generics.GenericsTest.main([Ljava/lang/String;)V:29:2:31:3"]
391 [label="helper.Abstract.<init>()V:-1:-1:-1:-1"]
392 [label="helper.Abstract.foo()V:4:2:6:3"]
394 [label="helper.Base.<init>()V:-1:-1:-1:-1"]
395 [label="helper.Base.base()V:4:2:6:3"]
399 [label="helper.Child1.child1()V:10:2:12:3"]
400 [label="helper.Child2.goo()V:4:2:6:3"]
401 [label="helper.Child2.hoo()V:7:2:9:3"]
403 [label="helper.Child3.<init>()V:-1:-1:-1:-1"]
404 [label="helper.Child3.hoo()V:4:2:6:3"]
406 [label="helper.Debug.<init>()V:-1:-1:-1:-1"]
415 [label="helper.Interface.goo()V:5:4:5:15"]
416 [label="helper.Interface.hoo()V:6:4:8:5"]
425 [label="initialization.Constructor.<init>()V:4:2:6:3"]
429 [label="initialization.IntermediateInitialization.instantiateChild1()Lhelper/Child1;:5:2:8:3"]
436 [label="initialization.Init.<initblock>():6:4:9:5"]
439 [label="initialization.Init.<init>(Lhelper/Interface;)V:14:4:17:5"]
443 [label="initialization.StaticInit.staticInit()V:14:2:16:3"]
451 [label="initialization.InitializationTest.main([Ljava/lang/String;)V:20:5:22:3"]
453 [label="initialization.IntermediateInitialization.<init>()V:-1:-1:-1:-1"]
455 [label="initialization.StaticInit.<init>()V:-1:-1:-1:-1"]
458 [label="initialization.StaticInit.<clinit>():6:2:9:3"]
469 [label="java8.FunctionalInterface.doSomething(Ljava/lang/String;)Ljava/lang/String;:4:2:4:33"]
471 [label="java8.Java8Test.lambda()V:8:2:12:3"]
476 [label="java8.Lambda.compare(II)Z:4:2:4:34"]
478 [label="java8.Java8Test.methodReference()V:14:2:18:3"]
479 [label="java8.MethodReference.<init>()V:18:4:21:5"]
481 [label="java8.MethodReference.doSomething()V:27:4:29:5"]
483 [label="java8.Java8Test.functionalInterface()V:24:2:28:3"]
491 [label="java8.Java8Test.main([Ljava/lang/String;)V:37:2:39:3"]
511 [label="java8.MethodReference.print(Ljava/lang/String;)Ljava/lang/String;:9:4:12:5"]
513 [label="java8.MethodReference.privatePrint()V:14:4:16:5"]
514 [label="java.util.List.add(Ljava/lang/Object;)Z:-1:-1:-1:-1"]
518 [label="java.lang.Iterable.forEach(Ljava/util/function/Consumer;)V:-1:-1:-1:-1"]
525 [label="parser.ForParser.<init>()V:-1:-1:-1:-1"]
528 [label="parser.ForParser.foo()V:7:7:9:3"]
529 [label="parser.ForParser.goo()V:11:7:13:3"]
530 [label="parser.ForParser.validMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:16:2:22:3"]
541 [label="parser.ForParser.validGenericMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:24:2:30:3"]
563 [label="parser.ParserTest.main([Ljava/lang/String;)V:22:2:24:3"]
571 [label="polimorph.Overload.<init>()V:-1:-1:-1:-1"]
572 [label="polimorph.Overload.foo()V:4:2:6:3"]
573 [label="polimorph.Overload.foo(I)V:7:2:9:3"]
575 [label="polimorph.Overload.foo(Ljava/lang/Object;)V:10:2:12:3"]
580 [label="polimorph.Overload.foo(I[Ljava/lang/Object;)V:13:2:15:3"]
584 [label="polimorph.Overload.overload1()V:20:2:23:3"]
587 [label="polimorph.Overload.overload2()V:28:2:31:3"]
590 [label="polimorph.Overload.overload3()V:36:2:39:3"]
593 [label="polimorph.Overload.overload4()V:44:2:47:3"]
597 [label="polimorph.Polimorph.<init>()V:-1:-1:-1:-1"]
598 [label="polimorph.Polimorph.overloadedInterface(Lhelper/Interface;)V:12:2:17:3"]
603 [label="polimorph.Polimorph.overloadedInterface()V:27:2:33:3"]
611 [label="polimorph.Polimorph.overloadedInterface2()V:42:2:48:3"]
614 [label="polimorph.Polimorph.interfaceImplementation()V:58:2:63:3"]
616 [label="polimorph.Polimorph.interfaceImplementation2()V:73:2:77:3"]
618 [label="polimorph.Polimorph.abstractClassImplementation()V:83:2:87:3"]
620 [label="polimorph.PolimorphTest.overload()V:4:2:12:3"]
628 [label="polimorph.PolimorphTest.polimorphic()V:14:2:21:3"]
638 [label="polimorph.PolimorphTest.main([Ljava/lang/String;)V:28:2:31:3"]
120 -> 121
123 -> 128
123 -> 133
123 -> 135
128 -> 280
133 -> 121
135 -> 128
135 -> 194
135 -> 199
137 -> 128
137 -> 142
137 -> 148
137 -> 150
137 -> 158
137 -> 166
142 -> 145
145 -> 391
147 -> 128
148 -> 128
150 -> 128
158 -> 161
161 -> 121
163 -> 128
163 -> 148
166 -> 128
166 -> 329
168 -> 128
168 -> 170
168 -> 175
168 -> 177
170 -> 128
175 -> 121
177 -> 128
179 -> 123
179 -> 137
179 -> 168
183 -> 120
183 -> 179
194 -> 128
199 -> 121
204 -> 121
205 -> 120
205 -> 179
205 -> 207
205 -> 212
205 -> 214
205 -> 219
205 -> 221
205 -> 226
205 -> 228
205 -> 233
205 -> 235
205 -> 240
205 -> 242
205 -> 247
207 -> 128
207 -> 161
207 -> 336
207 -> 365
207 -> 525
207 -> 528
207 -> 529
207 -> 530
207 -> 541
212 -> 121
214 -> 128
214 -> 145
214 -> 425
214 -> 439
214 -> 443
219 -> 121
221 -> 128
221 -> 471
221 -> 478
221 -> 483
226 -> 121
228 -> 128
228 -> 145
228 -> 161
228 -> 166
228 -> 335
228 -> 336
228 -> 350
228 -> 351
228 -> 353
228 -> 365
233 -> 121
235 -> 128
235 -> 620
235 -> 628
240 -> 121
242 -> 252
242 -> 284
247 -> 121
252 -> 128
252 -> 257
252 -> 259
252 -> 261
252 -> 263
252 -> 280
284 -> 128
284 -> 280
284 -> 289
284 -> 297
284 -> 302
284 -> 307
284 -> 312
316 -> 242
316 -> 247
335 -> 121
336 -> 128
336 -> 166
336 -> 329
350 -> 161
351 -> 128
351 -> 145
351 -> 166
353 -> 128
353 -> 329
365 -> 391
379 -> 228
379 -> 233
391 -> 121
392 -> 128
394 -> 121
395 -> 128
399 -> 128
400 -> 128
401 -> 128
403 -> 365
404 -> 128
406 -> 121
416 -> 128
425 -> 121
425 -> 128
429 -> 128
429 -> 145
436 -> 128
436 -> 145
436 -> 365
439 -> 121
439 -> 128
443 -> 128
451 -> 214
451 -> 219
453 -> 121
455 -> 121
458 -> 128
458 -> 365
458 -> 429
458 -> 453
471 -> 128
471 -> 476
478 -> 128
478 -> 479
478 -> 481
479 -> 121
479 -> 514
481 -> 518
483 -> 128
483 -> 469
491 -> 221
491 -> 226
511 -> 128
513 -> 128
525 -> 121
528 -> 128
529 -> 128
530 -> 128
530 -> 335
530 -> 336
541 -> 128
541 -> 161
541 -> 335
541 -> 336
563 -> 207
563 -> 212
571 -> 121
572 -> 128
573 -> 128
575 -> 128
580 -> 128
584 -> 128
584 -> 572
587 -> 128
587 -> 573
590 -> 128
590 -> 575
593 -> 128
593 -> 580
597 -> 121
598 -> 128
598 -> 329
598 -> 415
598 -> 416
603 -> 128
603 -> 392
603 -> 400
603 -> 403
603 -> 404
611 -> 128
611 -> 365
611 -> 392
611 -> 400
611 -> 401
614 -> 145
614 -> 329
614 -> 415
614 -> 416
616 -> 329
616 -> 365
616 -> 416
618 -> 145
618 -> 148
618 -> 392
620 -> 128
620 -> 571
620 -> 584
620 -> 587
620 -> 590
620 -> 593
628 -> 128
628 -> 403
628 -> 597
628 -> 598
628 -> 614
628 -> 616
628 -> 618
638 -> 235
638 -> 240
}
