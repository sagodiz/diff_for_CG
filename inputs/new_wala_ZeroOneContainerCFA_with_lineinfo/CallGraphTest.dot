digraph graphname {
rankdir="LR";
90 [label="CallGraphTest.<init>()V:2"]
91 [label="CallGraphTest.main([Ljava/lang/String;)V:5"]
55 [label="anonymAndInner.AnonymAndInnerTest$1.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
47 [label="anonymAndInner.AnonymAndInnerTest$1.foo()V:25"]
45 [label="anonymAndInner.AnonymAndInnerTest$2.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
46 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Child1;)V:36"]
48 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Interface;)V:1"]
44 [label="anonymAndInner.AnonymAndInnerTest.<init>()V:3"]
54 [label="anonymAndInner.AnonymAndInnerTest.anonim()V:21"]
49 [label="anonymAndInner.AnonymAndInnerTest.innerClass()V:9"]
61 [label="anonymAndInner.AnonymAndInnerTest.main([Ljava/lang/String;)V:61"]
56 [label="anonymAndInner.AnonymAndInnerTest.nested()V:48"]
60 [label="anonymAndInner.AnonymAndInnerTest.test()V:55"]
52 [label="anonymAndInner.Outer$Inner.<init>(LanonymAndInner/Outer;)V:10"]
53 [label="anonymAndInner.Outer$Inner.inner()V:12"]
57 [label="anonymAndInner.Outer$Nested.<init>()V:16"]
58 [label="anonymAndInner.Outer$Nested.nested()V:22"]
59 [label="anonymAndInner.Outer$Nested.staticNested()V:18"]
50 [label="anonymAndInner.Outer.<init>()V:3"]
51 [label="anonymAndInner.Outer.inner()V:6"]
17 [label="dynamic.DynamicTest.<init>()V:9"]
30 [label="dynamic.DynamicTest.main([Ljava/lang/String;)V:55"]
24 [label="dynamic.DynamicTest.methodHandle()V:37"]
18 [label="dynamic.DynamicTest.reflection()V:16"]
29 [label="dynamic.DynamicTest.test()V:51"]
12 [label="generics.Generic1.<init>()V:3"]
14 [label="generics.Generic1.generic(Lhelper/Interface;)V:9"]
35 [label="generics.Generic2.<init>()V:3"]
36 [label="generics.Generic2.generic(Lhelper/Interface;Lgenerics/Generic1;)V:8"]
11 [label="generics.Generic3.<init>()V:3"]
13 [label="generics.Generic3.foo()V:8"]
62 [label="generics.GenericsTest.<init>()V:3"]
63 [label="generics.GenericsTest.genericMethod(Lhelper/Interface;)V:8"]
65 [label="generics.GenericsTest.main([Ljava/lang/String;)V:30"]
64 [label="generics.GenericsTest.test()V:13"]
5 [label="helper.Abstract.<init>()V:3"]
16 [label="helper.Abstract.foo()V:5"]
113 [label="helper.Base.<init>()V:3"]
114 [label="helper.Base.base()V:5"]
8 [label="helper.Child1.<init>()V:3"]
39 [label="helper.Child1.child1()V:11"]
15 [label="helper.Child1.foo()V:8"]
38 [label="helper.Child1.goo()V:5"]
4 [label="helper.Child2.<init>()V:3"]
84 [label="helper.Child2.goo()V:5"]
87 [label="helper.Child2.hoo()V:8"]
82 [label="helper.Child3.<init>()V:3"]
85 [label="helper.Child3.hoo()V:5"]
117 [label="helper.Debug.<clinit>()V:4"]
118 [label="helper.Debug.<init>()V:3"]
1 [label="helper.Debug.debug(Ljava/lang/String;)V:7"]
86 [label="helper.Interface.hoo()V:7"]
40 [label="initialization.Constructor.<init>()V:4"]
111 [label="initialization.Init.<init>(Lhelper/Interface;)V:14"]
92 [label="initialization.InitializationTest.<init>()V:5"]
119 [label="initialization.InitializationTest.main([Ljava/lang/String;)V:21"]
93 [label="initialization.InitializationTest.test()V:14"]
2 [label="initialization.IntermediateInitialization.<init>()V:3"]
3 [label="initialization.IntermediateInitialization.instantiateChild1()Lhelper/Child1;:6"]
0 [label="initialization.StaticInit.<clinit>()V:7"]
9 [label="initialization.StaticInit.<init>()V:3"]
10 [label="initialization.StaticInit.staticInit()V:15"]
7 [label="java.io.PrintStream.println(Ljava/lang/String;)V:805"]
19 [label="java.lang.Class.forName(Ljava/lang/String;)Ljava/lang/Class;:-1"]
20 [label="java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;:1783"]
6 [label="java.lang.Object.<init>()V:37"]
28 [label="java.lang.Throwable.printStackTrace()V:634"]
103 [label="java.lang.invoke.LambdaMetafactory.accept$java8$MethodReference$0()Ljava/util/function/Consumer;:-1"]
109 [label="java.lang.invoke.LambdaMetafactory.compare$java8$Java8Test$0()Ljava8/Lambda;:-1"]
107 [label="java.lang.invoke.LambdaMetafactory.doSomething$java8$Java8Test$1()Ljava8/FunctionalInterface;:-1"]
27 [label="java.lang.invoke.MethodHandles$Lookup.findStatic(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;:780"]
26 [label="java.lang.invoke.MethodHandles.lookup()Ljava/lang/invoke/MethodHandles$Lookup;:94"]
25 [label="java.lang.invoke.MethodType.methodType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;:274"]
21 [label="java.lang.reflect.AccessibleObject.setAccessible(Z)V:127"]
22 [label="java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;:488"]
101 [label="java.util.ArrayList.<init>()V:164"]
102 [label="java.util.ArrayList.add(Ljava/lang/Object;)Z:458"]
104 [label="java.util.ArrayList.forEach(Ljava/util/function/Consumer;)V:1243"]
94 [label="java8.Java8Test.<init>()V:3"]
98 [label="java8.Java8Test.functionalInterface()V:25"]
96 [label="java8.Java8Test.lambda()V:9"]
112 [label="java8.Java8Test.main([Ljava/lang/String;)V:38"]
97 [label="java8.Java8Test.methodReference()V:15"]
95 [label="java8.Java8Test.test()V:31"]
99 [label="java8.MethodReference.<init>()V:18"]
100 [label="java8.MethodReference.doSomething()V:28"]
106 [label="java8.MethodReference.print(Ljava/lang/String;)Ljava/lang/String;:10"]
23 [label="java8.MethodReference.privatePrint()V:15"]
31 [label="parser.ForParser.<init>()V:3"]
32 [label="parser.ForParser.foo()V:8"]
33 [label="parser.ForParser.goo()V:12"]
37 [label="parser.ForParser.validGenericMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:25"]
34 [label="parser.ForParser.validMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:17"]
41 [label="parser.ParserTest.<init>()V:3"]
43 [label="parser.ParserTest.main([Ljava/lang/String;)V:23"]
42 [label="parser.ParserTest.test()V:12"]
68 [label="polimorph.Overload.<init>()V:3"]
73 [label="polimorph.Overload.foo()V:5"]
74 [label="polimorph.Overload.foo(I)V:8"]
76 [label="polimorph.Overload.foo(I[Ljava/lang/Object;)V:14"]
75 [label="polimorph.Overload.foo(Ljava/lang/Object;)V:11"]
69 [label="polimorph.Overload.overload1()V:21"]
70 [label="polimorph.Overload.overload2()V:29"]
71 [label="polimorph.Overload.overload3()V:37"]
72 [label="polimorph.Overload.overload4()V:45"]
78 [label="polimorph.Polimorph.<init>()V:3"]
81 [label="polimorph.Polimorph.abstractClassImplementation()V:84"]
79 [label="polimorph.Polimorph.interfaceImplementation()V:59"]
80 [label="polimorph.Polimorph.interfaceImplementation2()V:74"]
115 [label="polimorph.Polimorph.overloadedInterface()V:28"]
83 [label="polimorph.Polimorph.overloadedInterface(Lhelper/Interface;)V:13"]
116 [label="polimorph.Polimorph.overloadedInterface2()V:43"]
66 [label="polimorph.PolimorphTest.<init>()V:3"]
89 [label="polimorph.PolimorphTest.main([Ljava/lang/String;)V:29"]
67 [label="polimorph.PolimorphTest.overload()V:5"]
77 [label="polimorph.PolimorphTest.polimorphic()V:15"]
88 [label="polimorph.PolimorphTest.test()V:24"]
110 [label="wala.lambda$java8$Java8Test$0.compare(II)Z:-1"]
108 [label="wala.lambda$java8$Java8Test$1.doSomething(Ljava/lang/String;)Ljava/lang/String;:-1"]
105 [label="wala.lambda$java8$MethodReference$0.accept(Ljava/lang/Object;)V:-1"]
0 -> 1
0 -> 2
0 -> 3
0 -> 4
1 -> 7
2 -> 6
3 -> 1
3 -> 8
4 -> 5
5 -> 6
8 -> 5
9 -> 6
10 -> 1
11 -> 12
12 -> 6
13 -> 1
13 -> 8
13 -> 14
14 -> 1
14 -> 15
14 -> 16
15 -> 1
16 -> 1
17 -> 6
18 -> 1
18 -> 7
18 -> 19
18 -> 20
18 -> 21
18 -> 22
23 -> 1
24 -> 1
24 -> 7
24 -> 25
24 -> 26
24 -> 27
24 -> 28
29 -> 18
29 -> 24
30 -> 17
30 -> 29
31 -> 6
32 -> 1
33 -> 1
34 -> 1
34 -> 35
34 -> 36
35 -> 6
36 -> 1
36 -> 14
36 -> 16
37 -> 1
37 -> 12
37 -> 35
37 -> 36
38 -> 1
39 -> 1
40 -> 1
40 -> 6
41 -> 6
42 -> 1
42 -> 4
42 -> 12
42 -> 31
42 -> 32
42 -> 33
42 -> 34
42 -> 36
42 -> 37
43 -> 41
43 -> 42
44 -> 6
45 -> 12
46 -> 1
46 -> 15
46 -> 47
47 -> 1
48 -> 46
49 -> 1
49 -> 50
49 -> 51
50 -> 6
51 -> 1
51 -> 52
51 -> 53
52 -> 6
53 -> 1
54 -> 1
54 -> 38
54 -> 45
54 -> 47
54 -> 48
54 -> 55
55 -> 8
56 -> 1
56 -> 57
56 -> 58
56 -> 59
57 -> 6
58 -> 1
59 -> 1
60 -> 49
60 -> 54
60 -> 56
61 -> 44
61 -> 60
62 -> 6
63 -> 1
63 -> 16
64 -> 1
64 -> 4
64 -> 8
64 -> 11
64 -> 12
64 -> 13
64 -> 14
64 -> 35
64 -> 36
64 -> 63
65 -> 62
65 -> 64
66 -> 6
67 -> 1
67 -> 68
67 -> 69
67 -> 70
67 -> 71
67 -> 72
68 -> 6
69 -> 1
69 -> 73
70 -> 1
70 -> 74
71 -> 1
71 -> 75
72 -> 1
72 -> 76
73 -> 1
74 -> 1
75 -> 1
76 -> 1
77 -> 1
77 -> 78
77 -> 79
77 -> 80
77 -> 81
77 -> 82
77 -> 83
78 -> 6
79 -> 8
79 -> 15
79 -> 38
79 -> 86
80 -> 4
80 -> 16
80 -> 87
81 -> 8
81 -> 15
82 -> 4
83 -> 1
83 -> 16
83 -> 84
83 -> 85
84 -> 1
85 -> 1
86 -> 1
87 -> 1
88 -> 1
88 -> 67
88 -> 77
89 -> 66
89 -> 88
90 -> 6
91 -> 17
91 -> 29
91 -> 41
91 -> 42
91 -> 44
91 -> 60
91 -> 62
91 -> 64
91 -> 66
91 -> 88
91 -> 92
91 -> 93
91 -> 94
91 -> 95
92 -> 6
93 -> 1
93 -> 8
93 -> 10
93 -> 40
93 -> 111
94 -> 6
95 -> 1
95 -> 96
95 -> 97
95 -> 98
96 -> 1
96 -> 109
96 -> 110
97 -> 1
97 -> 99
97 -> 100
98 -> 1
98 -> 107
98 -> 108
99 -> 6
99 -> 101
99 -> 102
100 -> 103
100 -> 104
105 -> 106
106 -> 1
108 -> 106
111 -> 1
111 -> 2
111 -> 3
111 -> 4
111 -> 6
111 -> 8
112 -> 94
112 -> 95
113 -> 6
114 -> 1
115 -> 1
115 -> 16
115 -> 82
115 -> 84
115 -> 85
116 -> 1
116 -> 4
116 -> 16
116 -> 84
116 -> 87
118 -> 6
119 -> 92
119 -> 93
}
