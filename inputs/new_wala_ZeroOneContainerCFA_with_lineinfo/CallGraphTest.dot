digraph graphname {
rankdir="LR";
102 [label="CallGraphTest.<init>()V:2"]
103 [label="CallGraphTest.main([Ljava/lang/String;)V:5"]
71 [label="anonymAndInner.AnonymAndInnerTest$1.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
63 [label="anonymAndInner.AnonymAndInnerTest$1.foo()V:16"]
61 [label="anonymAndInner.AnonymAndInnerTest$2.<init>(LanonymAndInner/AnonymAndInnerTest;)V:1"]
62 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Child1;)V:24"]
64 [label="anonymAndInner.AnonymAndInnerTest$2.generic(Lhelper/Interface;)V:1"]
60 [label="anonymAndInner.AnonymAndInnerTest.<init>()V:3"]
70 [label="anonymAndInner.AnonymAndInnerTest.anonim()V:12"]
65 [label="anonymAndInner.AnonymAndInnerTest.innerClass()V:5"]
76 [label="anonymAndInner.AnonymAndInnerTest.main([Ljava/lang/String;)V:45"]
72 [label="anonymAndInner.AnonymAndInnerTest.nested()V:32"]
75 [label="anonymAndInner.AnonymAndInnerTest.test()V:39"]
68 [label="anonymAndInner.Outer$Inner.<init>(LanonymAndInner/Outer;)V:10"]
69 [label="anonymAndInner.Outer$Inner.inner()V:12"]
73 [label="anonymAndInner.Outer$Nested.<init>()V:16"]
0 [label="anonymAndInner.Outer$Nested.nested()V:22"]
74 [label="anonymAndInner.Outer$Nested.staticNested()V:18"]
66 [label="anonymAndInner.Outer.<init>()V:3"]
67 [label="anonymAndInner.Outer.inner()V:6"]
35 [label="dynamic.DynamicTest.<init>()V:9"]
47 [label="dynamic.DynamicTest.main([Ljava/lang/String;)V:55"]
41 [label="dynamic.DynamicTest.methodHandle()V:37"]
36 [label="dynamic.DynamicTest.reflection()V:16"]
46 [label="dynamic.DynamicTest.test()V:51"]
30 [label="generics.Generic1.<init>()V:3"]
32 [label="generics.Generic1.generic(Lhelper/Interface;)V:5"]
52 [label="generics.Generic2.<init>()V:3"]
53 [label="generics.Generic2.generic(Lhelper/Interface;Lgenerics/Generic1;)V:5"]
29 [label="generics.Generic3.<init>()V:3"]
31 [label="generics.Generic3.foo()V:5"]
77 [label="generics.GenericsTest.<init>()V:3"]
78 [label="generics.GenericsTest.genericMethod(Lhelper/Interface;)V:5"]
80 [label="generics.GenericsTest.main([Ljava/lang/String;)V:27"]
79 [label="generics.GenericsTest.test()V:10"]
17 [label="helper.Abstract.<init>()V:3"]
34 [label="helper.Abstract.foo()V:5"]
114 [label="helper.Base.<init>()V:3"]
115 [label="helper.Base.base()V:5"]
20 [label="helper.Child1.<init>()V:3"]
56 [label="helper.Child1.child1()V:11"]
33 [label="helper.Child1.foo()V:8"]
55 [label="helper.Child1.goo()V:5"]
16 [label="helper.Child2.<init>()V:3"]
116 [label="helper.Child2.goo()V:5"]
99 [label="helper.Child2.hoo()V:8"]
15 [label="helper.Child3.<init>()V:3"]
13 [label="helper.Debug.<clinit>()V:4"]
14 [label="helper.Debug.<init>()V:3"]
1 [label="helper.Debug.debug(Ljava/lang/String;)V:7"]
98 [label="helper.Interface.hoo()V:7"]
25 [label="initialization.Constructor.<init>()V:4"]
24 [label="initialization.Init.<init>(Lhelper/Interface;)V:20"]
21 [label="initialization.InitializationTest.<init>()V:5"]
26 [label="initialization.InitializationTest.main([Ljava/lang/String;)V:22"]
22 [label="initialization.InitializationTest.test()V:12"]
18 [label="initialization.IntermediateInitialization.<init>()V:3"]
19 [label="initialization.IntermediateInitialization.instantiateChild1()Lhelper/Child1;:8"]
27 [label="initialization.StaticInit.<clinit>()V:12"]
28 [label="initialization.StaticInit.<init>()V:3"]
23 [label="initialization.StaticInit.staticInit()V:20"]
2 [label="java.io.PrintStream.println(Ljava/lang/String;)V:805"]
37 [label="java.lang.Class.forName(Ljava/lang/String;)Ljava/lang/Class;:-1"]
38 [label="java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;:1783"]
6 [label="java.lang.Object.<init>()V:37"]
45 [label="java.lang.Throwable.printStackTrace()V:634"]
10 [label="java.lang.invoke.LambdaMetafactory.accept$java8$MethodReference$0()Ljava/util/function/Consumer;:-1"]
111 [label="java.lang.invoke.LambdaMetafactory.compare$java8$Java8Test$0()Ljava8/Lambda;:-1"]
109 [label="java.lang.invoke.LambdaMetafactory.doSomething$java8$Java8Test$1()Ljava8/FunctionalInterface;:-1"]
44 [label="java.lang.invoke.MethodHandles$Lookup.findStatic(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;:780"]
43 [label="java.lang.invoke.MethodHandles.lookup()Ljava/lang/invoke/MethodHandles$Lookup;:94"]
42 [label="java.lang.invoke.MethodType.methodType(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;:274"]
39 [label="java.lang.reflect.AccessibleObject.setAccessible(Z)V:127"]
40 [label="java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;:488"]
7 [label="java.util.ArrayList.<init>()V:164"]
8 [label="java.util.ArrayList.add(Ljava/lang/Object;)Z:458"]
11 [label="java.util.ArrayList.forEach(Ljava/util/function/Consumer;)V:1243"]
104 [label="java8.Java8Test.<init>()V:3"]
108 [label="java8.Java8Test.functionalInterface()V:25"]
106 [label="java8.Java8Test.lambda()V:9"]
113 [label="java8.Java8Test.main([Ljava/lang/String;)V:38"]
107 [label="java8.Java8Test.methodReference()V:15"]
105 [label="java8.Java8Test.test()V:31"]
5 [label="java8.MethodReference.<init>()V:18"]
9 [label="java8.MethodReference.doSomething()V:28"]
3 [label="java8.MethodReference.print(Ljava/lang/String;)Ljava/lang/String;:10"]
4 [label="java8.MethodReference.privatePrint()V:15"]
48 [label="parser.ForParser.<init>()V:3"]
49 [label="parser.ForParser.foo()V:8"]
50 [label="parser.ForParser.goo()V:12"]
54 [label="parser.ForParser.validGenericMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:24"]
51 [label="parser.ForParser.validMethod(Lhelper/Child2;Lgenerics/Generic1;[Ljava/lang/Class;)Lgenerics/Generic2;:16"]
57 [label="parser.ParserTest.<init>()V:3"]
59 [label="parser.ParserTest.main([Ljava/lang/String;)V:23"]
58 [label="parser.ParserTest.test()V:12"]
83 [label="polimorph.Overload.<init>()V:3"]
88 [label="polimorph.Overload.foo()V:5"]
89 [label="polimorph.Overload.foo(I)V:8"]
91 [label="polimorph.Overload.foo(I[Ljava/lang/Object;)V:14"]
90 [label="polimorph.Overload.foo(Ljava/lang/Object;)V:11"]
84 [label="polimorph.Overload.overload1()V:18"]
85 [label="polimorph.Overload.overload2()V:23"]
86 [label="polimorph.Overload.overload3()V:28"]
87 [label="polimorph.Overload.overload4()V:33"]
93 [label="polimorph.Polimorph.<init>()V:3"]
96 [label="polimorph.Polimorph.abstractClassImplementation()V:23"]
94 [label="polimorph.Polimorph.interfaceImplementation()V:10"]
95 [label="polimorph.Polimorph.interfaceImplementation2()V:17"]
97 [label="polimorph.Polimorph.overloadedInterface(Lhelper/Interface;)V:5"]
81 [label="polimorph.PolimorphTest.<init>()V:3"]
101 [label="polimorph.PolimorphTest.main([Ljava/lang/String;)V:28"]
82 [label="polimorph.PolimorphTest.overload()V:5"]
92 [label="polimorph.PolimorphTest.polimorphic()V:15"]
100 [label="polimorph.PolimorphTest.test()V:24"]
112 [label="wala.lambda$java8$Java8Test$0.compare(II)Z:-1"]
110 [label="wala.lambda$java8$Java8Test$1.doSomething(Ljava/lang/String;)Ljava/lang/String;:-1"]
12 [label="wala.lambda$java8$MethodReference$0.accept(Ljava/lang/Object;)V:-1"]
0 -> 1
1 -> 2
3 -> 1
4 -> 1
5 -> 6
5 -> 7
5 -> 8
9 -> 10
9 -> 11
12 -> 3
14 -> 6
15 -> 16
16 -> 17
17 -> 6
18 -> 6
19 -> 1
19 -> 20
20 -> 17
21 -> 6
22 -> 1
22 -> 20
22 -> 23
22 -> 24
22 -> 25
23 -> 1
24 -> 1
24 -> 6
24 -> 16
24 -> 18
24 -> 19
24 -> 20
25 -> 1
25 -> 6
26 -> 21
26 -> 22
27 -> 1
27 -> 16
27 -> 18
27 -> 19
28 -> 6
29 -> 30
30 -> 6
31 -> 1
31 -> 20
31 -> 32
32 -> 1
32 -> 33
32 -> 34
33 -> 1
34 -> 1
35 -> 6
36 -> 1
36 -> 2
36 -> 37
36 -> 38
36 -> 39
36 -> 40
41 -> 1
41 -> 2
41 -> 42
41 -> 43
41 -> 44
41 -> 45
46 -> 36
46 -> 41
47 -> 35
47 -> 46
48 -> 6
49 -> 1
50 -> 1
51 -> 1
51 -> 52
51 -> 53
52 -> 6
53 -> 1
53 -> 32
53 -> 34
54 -> 1
54 -> 30
54 -> 52
54 -> 53
55 -> 1
56 -> 1
57 -> 6
58 -> 1
58 -> 16
58 -> 30
58 -> 48
58 -> 49
58 -> 50
58 -> 51
58 -> 53
58 -> 54
59 -> 57
59 -> 58
60 -> 6
61 -> 30
62 -> 1
62 -> 33
62 -> 63
63 -> 1
64 -> 62
65 -> 1
65 -> 66
65 -> 67
66 -> 6
67 -> 1
67 -> 68
67 -> 69
68 -> 6
69 -> 1
70 -> 1
70 -> 55
70 -> 61
70 -> 63
70 -> 64
70 -> 71
71 -> 20
72 -> 0
72 -> 1
72 -> 73
72 -> 74
73 -> 6
74 -> 1
75 -> 65
75 -> 70
75 -> 72
76 -> 60
76 -> 75
77 -> 6
78 -> 1
78 -> 34
79 -> 1
79 -> 16
79 -> 20
79 -> 29
79 -> 30
79 -> 31
79 -> 32
79 -> 52
79 -> 53
79 -> 78
80 -> 77
80 -> 79
81 -> 6
82 -> 1
82 -> 83
82 -> 84
82 -> 85
82 -> 86
82 -> 87
83 -> 6
84 -> 1
84 -> 88
85 -> 1
85 -> 89
86 -> 1
86 -> 90
87 -> 1
87 -> 91
88 -> 1
89 -> 1
90 -> 1
91 -> 1
92 -> 1
92 -> 15
92 -> 93
92 -> 94
92 -> 95
92 -> 96
92 -> 97
93 -> 6
94 -> 20
94 -> 33
94 -> 55
94 -> 98
95 -> 16
95 -> 34
95 -> 99
96 -> 20
96 -> 33
97 -> 1
97 -> 34
98 -> 1
99 -> 1
100 -> 1
100 -> 82
101 -> 81
101 -> 100
102 -> 6
103 -> 21
103 -> 22
103 -> 35
103 -> 46
103 -> 57
103 -> 58
103 -> 60
103 -> 75
103 -> 77
103 -> 79
103 -> 81
103 -> 100
103 -> 104
103 -> 105
104 -> 6
105 -> 1
105 -> 106
105 -> 107
105 -> 108
106 -> 1
106 -> 111
106 -> 112
107 -> 1
107 -> 5
107 -> 9
108 -> 1
108 -> 109
108 -> 110
110 -> 3
113 -> 104
113 -> 105
114 -> 6
115 -> 1
116 -> 1
}
